//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using Rock.Data;

namespace Rock.Com.CCVOnline.Service
{
	/// <summary>
	/// Auth POCO Service class
	/// </summary>
    public partial class RecordingService : Service<Recording>
    {
        public RecordingService()
            : base( new EFRepository<Recording>( new Rock.Com.CCVOnline.Data.Context() ) )
        {
        }

        private Rock.Net.WebResponse SendRecordingRequest( string app, string streamName, string recordingName, string action )
        {
            var globalAttributes = Rock.Web.Cache.GlobalAttributes.Read();

            if ( globalAttributes.AttributeValues.ContainsKey( "ccvonlineWowzaServer" ) )
            {
                string wowzaServerUrl = globalAttributes.AttributeValues["ccvonlineWowzaServer"].Value;

                Dictionary<string, string> parms = new Dictionary<string, string>();
                parms.Add( "app", HttpUtility.UrlEncode( app ) );
                parms.Add( "streamname", HttpUtility.UrlEncode( streamName ) );
                parms.Add( "recordingname", HttpUtility.UrlEncode( recordingName ) );
                parms.Add( "action", HttpUtility.UrlEncode( action ) );

                return Rock.Net.WebRequest.Send( wowzaServerUrl, "GET", parms, null );
            }
            else
                throw new ApplicationException( "missing 'ccvonlineWowzaServer' Global Attribute value" );
        }

        public Recording StartRecording( int? campusId, string label, string app, string streamName, string recordingName, int? personId )
        {
            Rock.Net.WebResponse response = SendRecordingRequest( app, streamName, recordingName, "start" );

            if (response != null && response.HttpStatusCode == System.Net.HttpStatusCode.OK)
            {
                IQueryable<Recording> recordings = Queryable().
                    Where( r =>
                        r.CampusId == campusId &&
                        r.Label == label &&
                        r.App == app &&
                        r.StreamName == streamName &&
                        r.RecordingName == recordingName &&
                        r.StopTime == null );

                bool restart = false;

                DateTime startTime = DateTime.Now;
                foreach ( var existingRecording in recordings )
                {
                    existingRecording.StartTime = startTime;
                    this.Save( existingRecording, personId );
                    restart = true;
                }

                if ( restart )
                    return recordings.OrderByDescending( r => r.CreatedDateTime ).FirstOrDefault();

                Recording recording = new Recording();
                this.Add( recording, personId );

                recording.CampusId = campusId;
                recording.Date = DateTime.Today;
                recording.Label = label;
                recording.App = app;
                recording.StreamName = streamName;
                recording.RecordingName = recordingName;
                recording.StartTime = startTime;
                this.Save( recording, personId );

                return recording;
            }

            return null;
        }

        public Recording StopRecording( int? campusId, string label, string app, string streamName, string recordingName, int? personId )
        {
            Rock.Net.WebResponse response = SendRecordingRequest( app, streamName, recordingName, "stop" );

            if ( response != null && response.HttpStatusCode == System.Net.HttpStatusCode.OK )
            {
                IQueryable<Recording> recordings = Queryable().
                    Where( r =>
                        r.CampusId == campusId &&
                        r.Label == label &&
                        r.App == app &&
                        r.StreamName == streamName &&
                        r.RecordingName == recordingName &&
                        r.StopTime == null );

                DateTime stopTime = DateTime.Now;
                foreach ( var recording in recordings )
                {
                    recording.StopTime = stopTime;
                    this.Save( recording, personId );
                }

                return recordings.OrderByDescending( r => r.CreatedDateTime ).FirstOrDefault();
            }

            return null;
        }
    }
}
