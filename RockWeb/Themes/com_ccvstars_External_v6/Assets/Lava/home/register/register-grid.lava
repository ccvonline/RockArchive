{% comment %} 
    {% include '~~/Assets/Lava/home/register/register-grid.lava' %}
{% endcomment %}

<!-- Desktop Grid -->
<div class="register-card">
    <div class="register-filter-row">
        <div class="filter-row-left">
            <div class="filter-item">
                <span>Filter:</span>
            </div>
            <div id="divFilterBadges" class="filter-item filter-badges">
            </div>
            <div class="filter-item">
                <i  data-toggle="modal" data-target="#modalConfigureFilter" class="fa fa-plus" aria-hidden="true"></i>
            </div>
            <div class="filter-item" data-toggle="modal" data-target="#modalConfirmReset" >
                <i class="fa fa-undo" aria-hidden="true"></i><span>Reset</span>
            </div>
            <!-- <div class="option limit-results">   not sure if gonna allow limiting results
                <span>Show</span>
                <input type="number" value="25">
                <span>sports</span>
            </div> -->
        </div>
        <div class="filter-row-right">
            <div class="search">
                <span>Search:</span>
                <input id="tbSearch" type="text">
            </div>
        </div>
    </div>
    <div class="register-grid">
        <table id="tblGrid" class="hidden">
            <tr>
                <th onclick="sortGrid('Sport')" class="column-icon"></th>
                <th id="sortCampus" onclick="sortGrid('Campus')" class="column-campus">
                    <div class="header-item">
                        Campus
                        <i class="mdi mdi-chevron-up sort-chevron hidden"></i>
                        <i class="mdi mdi-chevron-down sort-chevron hidden"></i>
                    </div>
                </th>
                <th id="sortSport" onclick="sortGrid('Sport')" sortdirection="desc" class="column-sport">
                    <div class="header-item">
                        Sport
                        <i class="mdi mdi-chevron-up sort-chevron hidden"></i>
                        <i class="mdi mdi-chevron-down sort-chevron hidden"></i>
                    </div>
                </th>
                <th id="sortGender" onclick="sortGrid('Gender')" class="column-gender">
                    <div class="header-item">
                        Gender
                        <i class="mdi mdi-chevron-up sort-chevron hidden"></i>
                        <i class="mdi mdi-chevron-down sort-chevron hidden"></i>
                    </div>
                </th>
                <th id="sortDivision" onclick="sortGrid('Division')" class="column-division">
                    <div class="header-item">
                        Division
                        <i class="mdi mdi-chevron-up sort-chevron hidden"></i>
                        <i class="mdi mdi-chevron-down sort-chevron hidden"></i>
                    </div>
                </th>
                <th id="sortSeason" onclick="sortGrid('Season')" class="column-season">
                    <div class="header-item">
                        Season
                        <i class="mdi mdi-chevron-up sort-chevron hidden"></i>
                        <i class="mdi mdi-chevron-down sort-chevron hidden"></i>
                    </div>
                </th>
                <th class="column-action"></th>
            </tr>          
        </table>
        <div id="gridLoading" class="loading">
            <h5>
                Loading<br />
                Registrations
            </h5>
            <div class="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
        </div>
    </div>
</div>

<!-- Confirm Modal -->
<div id="modalConfirmReset" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <div class="modal-header-content">
                    <h4>Reset Filters?</h4>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="resetFilter()">Yes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

<!-- Configure Filter Modal -->
<div id="modalConfigureFilter" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <div class="modal-header-content">
                    <h4>Add Filter</h4>
                </div>
            </div>
            <div class="modal-body">
                <!-- Season filter -->
                <h6>Season</h6>
                <div id="filterSeason" class="filter-row seasons">
                </div>

                <!-- Campus filter -->
                <h6>Campus</h6>
                <div id="filterCampus" class="filter-row campuses">
                </div>

                <!-- Season filter -->
                <h6>Sport</h6>
                <div id="filterSport" class="filter-row sports">
                </div>

                <!-- Gender filter -->
                <h6>Gender</h6>
                <div id="filterGender" class="filter-row gender">
                    <label><input type="checkbox" name="gender" value="Boys"> Boys</label>
                    <label><input type="checkbox" name="gender" value="Girls"> Girls</label>
                    <label><input type="checkbox" name="gender" value="Co-ed"> Co-Ed</label>
                </div>

                <!-- Division filter -->
                <h6>Division</h6>
                <div id="filterDivision" class="filter-row divisions">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="applyFilter()">Apply</button>
            </div>
        </div>
    </div>
</div>

<!-- Mobile Grid -->
<div class="register-mobile">
    <h4 class="current-section"></h4>
    <div class="register-card-mobile">
        <div class="mobile-header">
            <div class="back hidden">
                <i class="mdi mdi-chevron-left back-arrow"></i>
                <h5>Back</h5>
            </div>
        </div>
        <div class="mobile-body">
            <h5>Currently no active registrations</h5>
        </div>
    </div>
</div>

<script>
    //
    // setup page
    //

    // global variables for desktop with default values
    var activeRegistrations = [];
    var sortColumn = 'Sport'
    var sortDirection = 'asc'

    // global variables for mobile
    var filteredMobileRegistrations = [];
    var availableMobileSeasons = [];
    var availableMobileSports = [];
    var availableMobileCampuses = [];
    var availableMobileDivisions = [];
    var selectedMobileSeason = '';
    var selectedMobileCampus = '';
    var selectedMobileSport = '';
    var selectedMobileDivision = '';
    var mobileState = '';

    // get active registrations
    var getUrl = '/api/STARS/ActiveRegistrations?CalendarId=6';
    
    $.get(getUrl, function(data, status){
        activeRegistrations = data.Data;

        // hydrate available seasons for initial mobile view
        for ( let i = 0; i < activeRegistrations.length; i++ ) {
            if ( !availableMobileSeasons.includes( activeRegistrations[i].Season ) ) {
                availableMobileSeasons.push(activeRegistrations[i].Season);
            }
        }

        $(document).ready(function(){
            initializeGrid();

            initializeMobile();
        });
    });

    //
    // initialize functions
    //

    // initialize desktop view
    function initializeGrid() {
        // build filter options
        initializeModalFilterOptions();

        // sort registrations
        activeRegistrations.sort(compareValues(sortColumn,sortDirection));

        renderGrid(activeRegistrations);
    }

    function initializeModalFilterOptions() {
        var availableSeasons = [];
        var availableCampuses = [];
        var availableSports = [];
        var availableDivisions = [];

        // hydrate available arrays
        for (let i = 0; i < activeRegistrations.length; i++) {
            if (!availableSeasons.includes(activeRegistrations[i].Season)) {
                availableSeasons.push(activeRegistrations[i].Season)
            }

            if (!availableCampuses.includes(activeRegistrations[i].Campus)) {
                availableCampuses.push(activeRegistrations[i].Campus);
            }

            if (!availableSports.includes(activeRegistrations[i].Sport)) {
                availableSports.push(activeRegistrations[i].Sport);
            }

            if (!availableDivisions.includes(activeRegistrations[i].Division)) {
                availableDivisions.push(activeRegistrations[i].Division);
            }            
        }

        // add checkbox options for each filter
        for (let i = 0; i < availableSeasons.length; i++) {
            var newCheckbox = createCheckboxItem('season', availableSeasons[i].replace(/\s|\-/g,''), availableSeasons[i]);
        
            $('#filterSeason').append(newCheckbox);
        }

        for (let i = 0; i < availableCampuses.length; i++) {
            var newCheckbox = createCheckboxItem('campus', availableCampuses[i].replace(/\s|\-/g,''), availableCampuses[i]);

            $('#filterCampus').append(newCheckbox);            
        }

        for (let i = 0; i < availableSports.length; i++) {
            var newCheckbox = createCheckboxItem('sport', availableSports[i].replace(/\s|\-/g,''), availableSports[i].replace('-',' '));

            $('#filterSport').append(newCheckbox);
        }

        for (let i = 0; i < availableDivisions.length; i++) {
            var newCheckbox = createCheckboxItem('division', availableDivisions[i].replace(/\s|\-/g,''), availableDivisions[i]);

            $('#filterDivision').append(newCheckbox);
        }

        // attach search event to text input
        $('#tbSearch').on('change keyup paste', function() {
            applyFilter();
        });
    }

    // initialize mobile view
    function initializeMobile() {
        // set state to season selection
        mobileState = 'SEASON';

        renderMobile();
    }

    //
    // render functions
    //

    //
    // desktop render
    //

    function renderGrid(items) {
        var itemsProcessed = 0;

        // ensure table is empty
        $('#tblGrid tr>td').remove();

        var table = document.getElementById('tblGrid');

        if (items.length !== 0) {
            // items to display
            for (let i = 0; i < items.length; i++) {

                var waitListActive = items[i].SlotsAvailable === 0 && items[i].WaitListEnabled;

                var newRow = createTableRow(items[i].Sport, items[i].Campus, items[i].Gender, items[i].Division, items[i].Season, items[i].EventOccurrenceId, waitListActive);

                table.appendChild(newRow);

                itemsProcessed++;
            }
        } else {
            // no items to display
            var row = document.createElement('tr');

            row.innerHTML = `<td colspan="7"><h4 class="grid-no-items">Nothing to display</h4></td>`;

            table.appendChild(row);
        }

        if ( itemsProcessed === items.length ) {
            // set the sort icon
            renderSortIcon();

            // everything has processed, hide spinner and show grid
            toggleGridLoading();
        }
    }

    function renderSortIcon() {
        // hide all sort icons
        $('.sort-chevron').addClass('hidden');

        // show active sort icon
        if (sortDirection === 'asc' ) {
            $('#sort' + sortColumn + ' .mdi-chevron-up').removeClass('hidden');
        } else {
            $('#sort' + sortColumn + ' .mdi-chevron-down').removeClass('hidden');
        }
    }

    //
    // mobile render
    //

    function renderMobile() {
        switch (mobileState) {
            case 'CAMPUS':
                renderCampusSelection();             
                break;
            case 'SPORT':
                renderSportSelection();
                break;
            case 'DIVISION':
                renderDivisionSelection();
                break;
            case 'GRID':
                renderRegistrationsGrid();
                break;        
            default:
                // by default show season selection
                renderSeasonSelection();
                break;
        }
    }

    function renderSeasonSelection() {
        // clear mobile card and set header
        resetMobileCardUI('Select Season','');
    
        // add season options
        for (let i = 0; i < availableMobileSeasons.length; i++) {
            var onclickString = `handleNextClick('CAMPUS','` + availableMobileSeasons[i] + `')`;   

            var itemNew = createNavigationItem(availableMobileSeasons[i], onclickString, true);

            if ( itemNew ) {
                $('.mobile-body').append(itemNew);
            }
        }
    }

    function renderCampusSelection() {
        // clear mobile card and set header
        resetMobileCardUI('Select Campus','SEASON');

        // add selected season
        var itemSeason = createNavigationItem(selectedMobileSeason, '', false);

        if ( itemSeason ) {
            $('.mobile-body').append(itemSeason);
        }

        // add campus options
        for (let i = 0; i < availableMobileCampuses.length; i++) {
            var onclickString = `handleNextClick('SPORT','` + availableMobileCampuses[i] + `')`;   

            var itemNew = createNavigationItem(availableMobileCampuses[i], onclickString, true);

            if ( itemNew ) {
                $('.mobile-body').append(itemNew);
            }
        }
    }

    function renderSportSelection() {
        // clear mobile card and set header
        resetMobileCardUI('Select Sport','CAMPUS');
        
        // add selected season
        var itemSeason = createNavigationItem(selectedMobileSeason, '', false);

        if ( itemSeason ) {
            $('.mobile-body').append(itemSeason);
        }

        // add selected campus
        var itemCampus = createNavigationItem(selectedMobileCampus, '', false);

        if ( itemCampus ) {
            $('.mobile-body').append(itemCampus);
        }

        // add sport options
        for (let i = 0; i < availableMobileSports.length; i++) {
            var onclickString = `handleNextClick('DIVISION','` + availableMobileSports[i] + `')`;   

            var itemNew = createNavigationItem(availableMobileSports[i].replace('-',' '), onclickString, true);

            if ( itemNew ) {
                $('.mobile-body').append(itemNew);
            }
        }
    }

    function renderDivisionSelection() {
        // clear mobile card and set header
        resetMobileCardUI('Select Division','SPORT');
        
        // add selected season
        var itemSeason = createNavigationItem(selectedMobileSeason, '', false);

        if ( itemSeason ) {
            $('.mobile-body').append(itemSeason);
        }

        // add selected campus
        var itemCampus = createNavigationItem(selectedMobileCampus, '', false);

        if ( itemCampus ) {
            $('.mobile-body').append(itemCampus);
        }

        // add selected sport
        var itemSport = createNavigationItem(selectedMobileSport, '', false);

        if ( itemSport ) {
            $('.mobile-body').append(itemSport);
        }

        // add division options
        for (let i = 0; i < availableMobileDivisions.length; i++) {
            var onclickString = `handleNextClick('GRID','` + availableMobileDivisions[i] + `')`;            

            var itemNew = createNavigationItem(availableMobileDivisions[i], onclickString, true);

            if ( itemNew ) {
                $('.mobile-body').append(itemNew);
            }
        }
    }

    function renderRegistrationsGrid() {
        // clear mobile card and set header
        resetMobileCardUI(selectedMobileDivision,'DIVISION');

        // add selected season
        var itemSeason = createNavigationItem(selectedMobileSeason, '', false);

        if ( itemSeason ) {
            $('.mobile-body').append(itemSeason);
        }

        // add selected campus
        var itemCampus = createNavigationItem(selectedMobileCampus, '', false);

        if ( itemCampus ) {
            $('.mobile-body').append(itemCampus);
        }

        // add selected sport
        var itemSport = createNavigationItem(selectedMobileSport, '', false);

        if ( itemSport ) {
            $('.mobile-body').append(itemSport);
        }

        // add selected division
        var itemDivision = createNavigationItem(selectedMobileDivision, '', false);

        if ( itemDivision ) {
            $('.mobile-body').append(itemDivision);
        }

        // add regististrations from filtered array
        for (let i = 0; i < filteredMobileRegistrations.length; i++) {
            var itemUrl = '/register-v2/details?EventOccurrenceId=' + filteredMobileRegistrations[i].EventOccurrenceId;

            var waitListActive = filteredMobileRegistrations[i].SlotsAvailable === 0 && filteredMobileRegistrations[i].WaitListEnabled;

            var itemNew = createEventLinkSelectionItem(filteredMobileRegistrations[i].Gender, itemUrl, waitListActive);

            if ( itemNew ) {
                $('.mobile-body').append(itemNew);
            }
        }
    }

    //
    // event functions
    //

    //
    // desktop functions
    // 

    function sortGrid(newSortColumn) {
        // change sort direction to its opposite
        sortDirection === 'asc' ? sortDirection = 'desc' : sortDirection = 'asc';

        // set the new sort column
        sortColumn = newSortColumn;

        // re-render grid by applying filter
        applyFilter();
    }

    // by default sort by Sport column ascending
    function applyFilter() {
        // hide grid and show spinner
        toggleGridLoading();

        // get badges div and clear it
        $('#divFilterBadges').html('');

        // when applying filters, always start with unfiltered list
        var filteredRegistrations = activeRegistrations;

        // get the checked values from the filters
        var seasonFilter = $('input:checked[name="season"]').map(function() { return $(this).val(); }).get();
        var campusFilter = $('input:checked[name="campus"]').map(function() { return $(this).val(); }).get();
        var sportFilter = $('input:checked[name="sport"]').map(function() { return $(this).val(); }).get();
        var genderFilter = $('input:checked[name="gender"]').map(function() { return $(this).val(); }).get();
        var divisionFilter = $('input:checked[name="division"]').map(function() { return $(this).val(); }).get();

        // apply filters

        if (seasonFilter.length > 0) {
            filteredRegistrations = filteredRegistrations.filter(value => seasonFilter.includes(value.Season.replace(/\s|\-/g,'')));

            // add filter badges for seasons
            for (let i = 0; i < seasonFilter.length; i++) {
                var filterBadge = createFilterBadge(seasonFilter[i]);

                $('#divFilterBadges').append(filterBadge);                
            }
        }

        if (campusFilter.length > 0) {
            filteredRegistrations = filteredRegistrations.filter(value => campusFilter.includes(value.Campus.replace(/\s|\-/g,'')));

            // add filter badges for campus
            for (let i = 0; i < campusFilter.length; i++) {
                var filterBadge = createFilterBadge(campusFilter[i]);

                $('#divFilterBadges').append(filterBadge);                
            }
        }

        if (sportFilter.length > 0) {
            filteredRegistrations = filteredRegistrations.filter(value => sportFilter.includes(value.Sport.replace(/\s|\-/g,'')));

            // add filter badges for sport
            for (let i = 0; i < sportFilter.length; i++) {
                var filterBadge = createFilterBadge(sportFilter[i]);

                $('#divFilterBadges').append(filterBadge);                
            }

        }

        if (genderFilter.length > 0) {
            // Always show coed
            // IE there are boys and girls in coed so if filter set to boys, boys are in coed, so show coed
            filteredRegistrations = filteredRegistrations.filter(value => genderFilter.includes(value.Gender) || value.Gender === 'Co-ed');

            // add filter badges for gender
            for (let i = 0; i < genderFilter.length; i++) {
                var filterBadge = createFilterBadge(genderFilter[i]);

                $('#divFilterBadges').append(filterBadge);                
            }
        }
        
        if (divisionFilter.length > 0) {
            filteredRegistrations = filteredRegistrations.filter(value => divisionFilter.includes(value.Division.replace(/\s|\-/g,'')));

            // add filter badges for division
            for (let i = 0; i < divisionFilter.length; i++) {
                var filterBadge = createFilterBadge(divisionFilter[i]);

                $('#divFilterBadges').append(filterBadge);                
            }
        }

        var searchText = $('#tbSearch').val();

        if (searchText) {
            // split search input into array
            var searchItems = searchText.split(' ');            

            // loop through each search term
            // if match found
            // search the newly filtered items again
            // with the next search term in the array
            for (let i = 0; i < searchItems.length; i++) {
                var searchItem = searchItems[i].toLowerCase();
            
                filteredRegistrations = filteredRegistrations.filter(function(item) {
                        // convert sport to searchable text
                        var sport = item.Sport.replace('-',' ');

                        // TODO: return coed options when search for gender
                        return ( item.Season.toLowerCase().includes(searchItem) || 
                                 item.Campus.toLowerCase().includes(searchItem) ||
                                 sport.toLowerCase().includes(searchItem) ||
                                 item.Division.toLowerCase().includes(searchItem) ||
                                 item.Gender.toLowerCase().includes(searchItem)
                            )
                    });
            }            
        }

        // sort the registrations
        filteredRegistrations.sort(compareValues(sortColumn,sortDirection));

        // rerender the grid
        renderGrid(filteredRegistrations);
    }

    // unchecks the respective checkbox, then reapplies the filter
    function removeFilterItem(filterValue) {
        $('input[type=checkbox][value=' + filterValue + ']').prop('checked',false);

        applyFilter();
    }

    function resetFilter() {
        // hide grid and show spinner
        toggleGridLoading();

        // uncheck all checkboxes
        $(':checkbox').attr('checked', false);

        // clear search text input
        $('#tbSearch').val('');

        // clear badges
        $('#divFilterBadges').html('');

        // reset sorting to default values and sort
        sortColumn = 'Sport';
        sortDirection = 'asc';

        activeRegistrations.sort(compareValues(sortColumn,sortDirection));

        renderGrid(activeRegistrations);
    }


    //
    // mobile functions
    //

    function handleNextClick(nextState,selectedItem) {
        // set selected item based on current mobileState
        switch (mobileState) {
            case 'SEASON':
                selectedMobileSeason = selectedItem;
                break;
            case 'CAMPUS':
                selectedMobileCampus = selectedItem;             
                break;
            case 'SPORT':
                selectedMobileSport = selectedItem;
                break;
            case 'DIVISION':
                selectedMobileDivision = selectedItem
                break;       
            default:
                break;
        }

        // update filtered registrations
        filteredMobileRegistrations = applyMobileFilter();

        // rehydrate the available arrays
        hydrateAvailableMobileArrays(filteredMobileRegistrations);
        
        // update mobileState
        mobileState = nextState;

        renderMobile();
    }

    function handleBackClick(targetState) {
        // reset selected items for intended state
        switch (targetState) {
            case 'SEASON':
                selectedMobileSeason = '';
                selectedMobileCampus = '';
                selectedMobileSport = '';
                selectedMobileDivision = '';                
                break;
            case 'CAMPUS':
                selectedMobileCampus = '';
                selectedMobileSport = '';
                selectedMobileDivision = '';                
                break;
            case 'SPORT':
                selectedMobileSport = '';
                selectedMobileDivision = '';   
                break;
            case 'DIVISION':
                selectedMobileDivision = '';   
                break;       
            default:
                break;
        }

        // update filtered registrations
        filteredMobileRegistrations = applyMobileFilter();

        // rehydrate the available arrays
        hydrateAvailableMobileArrays(filteredMobileRegistrations);
        
        // update mobileState
        mobileState = targetState;

        renderMobile();
    }

    //
    // helper functions
    //

    //
    // desktop functions
    //

    // return an html filter badge
    function createFilterBadge(filterValue) {
        var div = document.createElement('div');
        var span = document.createElement('span');
        var closeIcon = document.createElement('i');

        // configure the div
        div.setAttribute('class','filter-badge');
        div.setAttribute('onclick',`removeFilterItem('` + filterValue + `')`);

        // get the text for the badge from the label of the filter checkbox
        span.innerHTML = $('input[type=checkbox][value=' + filterValue + ']').parent().text();

        div.append(span);

        // configure closeIcon
        closeIcon.setAttribute('class','fa fa-times');
        closeIcon.setAttribute('aria-hidden','true');

        div.append(closeIcon);

        return div;
    }

    // return an html checkbox
    function createCheckboxItem(name, value, text) {
        // create new html elements
        var label = document.createElement('label');
        var input = document.createElement('input');

        // configure input and add to label
        input.setAttribute('type','checkbox')
        input.setAttribute('name',name);
        input.setAttribute('value',value);

        label.append(input);

        // add the text
        label.innerHTML += (' ' + text);

        return label;
    }


    function toggleGridLoading() {
        $('#gridLoading').toggleClass('hidden');
        $('#tblGrid').toggleClass('hidden');
    }

    // return a table row for the desktop grid
    function createTableRow(program, campus, gender, division, season, eventOccurrenceId, waitListActive) {
        var row = document.createElement('tr');

        var sport = getSport(program);

        var actionText = waitListActive ? 'Join Wait List' : 'Register';
        var actionCSSClass = waitListActive ? 'btn btn-secondary' : 'btn btn-primary';

        // add column data to row
        addCellToRow(row, '<img width="25" height="25" src="/Themes/com_ccvstars_External_v6/Assets/Images/icon/' + sport + '-red.png">');
        addCellToRow(row, campus);
        addCellToRow(row, program.replace('-',' '));
        addCellToRow(row, gender);
        addCellToRow(row, division, 'grid-division');
        addCellToRow(row, season);
        addCellToRow(row, '<a href="/register-v2/details?EventOccurrenceId=' + eventOccurrenceId + '" class="' + actionCSSClass + '">' + actionText + '</a>' );

        return row;
    }

    // create a table cell and add it to a row
    function addCellToRow(row, value, cssClass) {
        var cell = document.createElement('td');

        // add optional css class if it was specified
        if ( cssClass ) {
            cell.className = cssClass
        }

        cell.innerHTML = value;

        row.appendChild(cell);
    }

    // return a sport based on program
    function getSport(program) {
        var sport = "";

        if (program.includes('baseball')) {
            sport = 'baseball';
        }

        if (program.includes('basketball')) {
            sport = 'basketball';
        }

        if (program.includes('football')) {
            sport = 'football';
        }

        if (program.includes('soccer')) {
            sport = 'soccer';
        }

        return sport;
    }

    // sort array
    function compareValues(key, order='asc') {
        return function(a, b) {
            // ensure property exists
            if(!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                return 0
            }

            // if property is string, convert to lowercase
            var valueA = (typeof a[key] === 'string') ? a[key].toLowerCase() : a[key];
            var valueB = (typeof b[key] === 'string') ? b[key].toLowerCase() : b[key];

            // compare the values
            var comparison = 0;

            if (valueA > valueB) {
                comparison = 1;
            } else if (valueA < valueB) {
                comparison = -1;
            }

            return ((order == 'desc') ? (comparison * -1) : comparison);
        };
    }

    //
    // mobile functions
    //

    // loop through array of items to hydrate mobile available arrays
    function hydrateAvailableMobileArrays(items) {
        // reset arrays
        availableMobileSeasons = [];
        availableMobileCampuses = [];
        availableMobileSports = [];
        availableMobileDivisions = [];

        for ( let i = 0; i < items.length; i++ ) {
            if ( !availableMobileSeasons.includes( items[i].Season ) ) {
                availableMobileSeasons.push(items[i].Season);
            }

            if ( !availableMobileCampuses.includes( items[i].Campus ) ) {
                availableMobileCampuses.push(items[i].Campus);
            }

            if ( !availableMobileSports.includes( items[i].Sport ) ) {
                availableMobileSports.push(items[i].Sport);
            }

            if ( !availableMobileDivisions.includes( items[i].Division ) ) {
                availableMobileDivisions.push(items[i].Division);
            }
        }

        availableMobileSeasons.sort();
        availableMobileCampuses.sort();
        availableMobileSports.sort();
        availableMobileDivisions.sort();
    }

    function applyMobileFilter() {
        // get fresh copy of active registrations
        var filteredRegistrations = activeRegistrations;

        // filter by various options if they have values
        if (selectedMobileSeason !== '') {
            filteredRegistrations = filteredRegistrations.filter(value => value.Season === selectedMobileSeason);
        }

        if (selectedMobileCampus !== '') {
            filteredRegistrations = filteredRegistrations.filter(value => value.Campus === selectedMobileCampus);
        }

        if (selectedMobileSport !== '') {            
            filteredRegistrations = filteredRegistrations.filter(value => value.Sport === selectedMobileSport);
        }

        if (selectedMobileDivision !== '') {
            filteredRegistrations = filteredRegistrations.filter(value => value.Division === selectedMobileDivision);
        }

        return filteredRegistrations;
    }

    function resetMobileCardUI(currentSectionText,backState) {
        // set current section
        $('.current-section').text(currentSectionText);

        // clear existing body content
        $('.mobile-body').html('');

        // set back button based on backState if it exists
        if (backState) {
            // configure and show back button
            $('.back').attr('onclick',`handleBackClick('` + backState + `')`);
            $('.back').removeClass('hidden');
        } else {
            // hide backbutton
            $('.back').addClass('hidden');
        }
    }

    // return a navigation item
    function createNavigationItem(itemName, onClickString, showRightChevron) {
        // create new html elements
        var div = document.createElement('div');
        var hFive = document.createElement('h5');

        // configure h5 and add to div
        hFive.innerHTML = itemName;
        div.append(hFive);

        // configure div
        div.setAttribute('class','selection-item');

        if (onClickString) {
            div.setAttribute('onclick',onClickString);
        }

        if (showRightChevron) {
            // create, configure chevronRight and add to div
            var chevronRight = document.createElement('i');

            chevronRight.setAttribute('class','mdi mdi-chevron-right');
            div.append(chevronRight);
        }        

        return div;
    }

    // return a link selection item
    function createEventLinkSelectionItem(itemName, targetUrl, waitListActive) {
        // create new html elements
        var div = document.createElement('div');
        var a = document.createElement('a');

        // configure div
        div.setAttribute('class','link-item');

        // configure link
        // build button text and button css class
        var buttonText = itemName
        var buttonCSSClass = 'btn btn-primary';

        if (waitListActive) {
            buttonText += ' (wait list)'
            buttonCSSClass = 'btn btn-secondary';
        }

        a.setAttribute('href', targetUrl);
        a.setAttribute('class','btn btn-primary');
        a.text = buttonText;

        // add link to div
        div.append(a);

        return div;
    }
</script>