{% comment %} {% include '~~/Assets/Lava/MyDashboard/NextStepsNav.lava' %} {% endcomment %}

{% comment %} Modals for next steps {% endcomment %}
{% include '~~/Assets/Lava/MyDashboard/NextStepsModals.lava' %}

{% comment %} Render nav icons for next steps modals {% endcomment %}
<div class="next-steps-nav">
    <div class="outer-circle">
        <a href="#" class="outer-circle-link hidden deg188" data-toggle="modal" data-target="#modalStartingPoint"><img id="startingPoint" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-startingpoint.png'></a>
        <a href="#" class="outer-circle-link hidden deg209-5" data-toggle="modal" data-target="#modalBaptism"><img id="baptism" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-baptism.png'></a>
        <a href="#" class="outer-circle-link hidden deg233" data-toggle="modal" data-target="#modalWorship"><img id="worship" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-worship.png'></a>
        <a href="#" class="outer-circle-link hidden deg257-5" data-toggle="modal" data-target="#modalConnect"><img id="connect" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-connect.png'></a>
        <a href="#" class="outer-circle-link hidden deg282-5" data-toggle="modal" data-target="#modalServe"><img id="serve" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-serve.png'></a>
        <a href="#" class="outer-circle-link hidden deg307" data-toggle="modal" data-target="#modalGive"><img id="give" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-give.png'></a>
        <a href="#" class="outer-circle-link hidden deg330-5" data-toggle="modal" data-target="#modalShare"><img id="share" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-share.png'></a>
        <a href="#" class="outer-circle-link hidden deg352" data-toggle="modal" data-target="#modalCoach"><img id="coach" class="nextstep-icon-inactive" src='~~/Assets/Images/icon-nextstep-coach.png'></a>
    </div>
    <div class="inner-circle">
        <a href="#" onClick="toggleNextStepsMenu(); return false;">
            <div class="inner-circle-text">
                <span><svg viewBox="0 0 24 24"><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path></svg></span>
                <span>My Next Steps</span>
            </div>
        </a>
    </div>
</div>

<script>
    $( document ).ready(function() {
        // hidden is used to prevent steps icons from displaying in front of dashboard cards on load
        $('.outer-circle-link').toggleClass('hidden');
    });

    // .5s after page load, trigger the toggleNextStepsMenu animation
    $( window ).on('load', function() {
        setTimeout(function() {
            toggleNextStepsMenu();
        }, 100);
    });

    // toggle the next steps menu open / close
    function toggleNextStepsMenu() {
        $('.outer-circle-link').toggleClass('outer-circle-link-open');
    };

    // setup popover
    activatePopOver = function(element, content) {
        // only activate mobile for non-mobile devices
        if (window.matchMedia("(min-width: 1024px)").matches) {
            // html template for popover
            var popOverTemplate = `<div class="popover" role="tooltip">
                                    <div class="arrow"></div>
                                    <h3 class="popover-title"></h3>
                                    <div class="popover-content"></div>
                                </div>`;
            // setup popover element
            $(element).popover({
                content: content,
                container: 'body',
                trigger: 'hover',
                placement: 'top',
                template: popOverTemplate,
                html: true
            })
        }

    }

    // Render active starting point icon and update relative popover and modal content
    renderStartingPoint = function(data) {
        switch (data.Status) {
            case 0: {
                // has not attended starting point
                statusValue = 'You have not taken Starting Point'; 
                break;
            }
            case 1: {
                // attended starting point
                statusValue = 'Took Starting Point on ' + data.DateFormatted;

                // Update modal content
                $('#modalContentStartingPoint').html(statusValue);

                // change color of icon
                $('#startingPoint').toggleClass('nextstep-icon-inactive nextstep-icon-active');
                break;
            }
            case 2: { 
                // registered for starting point
                statusValue = 'Registered to take Starting Point on ' + data.DateFormatted;
                
                // update modal content
                $('#modalContentStartingPoint').html(statusValue);
                break;
            }
            default: 
                break;
        }

        activatePopOver('#startingPoint', statusValue);
    }

    // Render active baptism icon and update relative popover and modal content
    renderBaptism = function(data) {
        switch (data.BaptismStatus) {
            case 0: {
                // is not baptised
                statusValue = 'You are not baptized'; 
                break;
            }
            case 1: {
                // is baptised
                statusValue = `You were baptised on {{ CurrentPerson | Attribute:'BaptismDate' | Date:'MMMM d, yyyy' }}!`

                // Update modal content
                var htmlContent = "<p>" + statusValue + "</p>";
                // if baptized by CCV show certificate button, if photo exists show photo button
                htmlContent += `<div class="nextstep-modal-baptism-buttons">
                                    {% assign baptizedHere = CurrentPerson | Attribute:'BaptizedHere' %}
                                    {% if baptizedHere == 'Yes' %}
                                        <a class="btn btn-baptism btn-baptism-2-rows" href="/baptismdashboardV2?display=certificate">Baptism<br />Certificate</a>
                                    {% endif %}
                                    {% assign baptismPhoto = CurrentPerson | Attribute:'BaptismPhoto' %}
                                    {% if baptismPhoto != null and baptismPhoto != '' %}
                                        <a class="btn btn-baptism btn-baptism-2-rows" href="/baptismdashboardV2?display=photo">Baptism<br />Photo</a>
                                    {% endif %}  
                                </div>`;
                $('#modalContentBaptism').html(htmlContent);

                // change color of icon
                $('#baptism').toggleClass('nextstep-icon-inactive nextstep-icon-active');
                break;
            }
            case 2: {
                // regestered to be baptised
                statusValue = 'Registered for baptism on ' + moment( new Date(data.BaptismRegistrationDate)).format("M/D/YYYY");
                
                // Update modal content
                $('#modalContentBaptism').html(statusValue);  
                break;
            }
            default: 
                break;
        }

        activatePopOver('#baptism', statusValue);
    }

    // Render active worship icon and update relative popover and modal content
    renderWorship = function(data) {
        if (data) {
            // is worshiping 
            statusValue = 'You worship regularly';

            // update modal content
            $('#modalContentWorship').html(statusValue);

            // change color of icon 
            $('#worship').toggleClass('nextstep-icon-inactive nextstep-icon-active');
        } else {
            // is not worshiping
            statusValue = 'Join us this weekend for worship!'
        }

        activatePopOver('#worship', statusValue)
    }

    // Render active connect icon and update relative popover and modal content
    renderConnect = function(data) {
        switch (data.ConnectionStatus) {
            case 0: {
                // in a group
                statusValue = 'You are in a CCV group (eariest active group ' + moment( new Date(data.ConnectedSince)).format("M/D/YYYY") + ')'; 

                // update modal content
                $('#modalContentConnect').html(statusValue);

                // change color of icon
                $('#connect').toggleClass('nextstep-icon-inactive nextstep-icon-active');
                break;
            }
            case 1: {
                // not in a group
                statusValue = 'You are not connected to a CCV group'; 
                break;
            }
            case 2: { 
                // registered for a group
                statusValue = 'You are registered for a CCV group'; 

                // update modal content
                $('#modalContentConnect').html(statusValue);
                break;
            }
            default: 
                break;
        }

        activatePopOver('#connect', statusValue)
    }

    // Render active serve icon and update relative popover and modal content
    renderServe = function(data) {
        switch (data.ServingStatus) {
            case 0: {
                // Not serving
                statusValue = 'You are not serving'; 
                break;
            }
            case 1: {
                // Registered to serve
                statusValue = 'You are registered to serve';

                // update modal content
                $('#modalContentServe').html(statusValue);
                break;
            }
            case 2: { 
                // Is Serving
                statusValue = 'You are serving (earliest active group ' + moment( new Date(data.ServingSince)).format("M/D/YYYY") + ')'; 
                
                // update modal content
                $('#modalContentServe').html(statusValue);

                // change color of icon
                $('#serve').toggleClass('nextstep-icon-inactive nextstep-icon-active');
                break;
            }
            default: 
                break;
        }

        activatePopOver('#serve', statusValue)
    }

    // Render active give icon and update relative popover and modal content
    renderGive = function(data) {
        if (data) {
            // giving
            statusValue = 'You are giving'; 

            // update modal content
            $('#modalContentGive').html(statusValue);

            // change color of icon
            $('#give').toggleClass('nextstep-icon-inactive nextstep-icon-active');
        } else {
            // not giving
            statusValue = 'You are not giving';
        }

        activatePopOver('#give', statusValue)
    }

    // Render active share icon and update relative popover and modal content
    renderShare = function(data) {
        if (data.SharedStory) {
            // Story shared
            statusValue = 'You have shared a story'; 

            // update modal content
            $('#modalContentShare').html(statusValue);            

            // change color of icon
            $('#share').toggleClass('nextstep-icon-inactive nextstep-icon-active');
        } else {
            // Story not shared
            statusValue = 'You have not shared a story'
        }

        activatePopOver('#share', statusValue)
    }

    // Render active coach icon and update relative popover and modal content
    renderCoach = function(data) {
        if (data.IsCoaching) {
            // is Coach
            statusValue = 'You are coaching (earliest active group ' + moment( new Date(data.CoachingSince)).format("M/D/YYYY") + ')'; 

            // update modal content
            $('#modalContentCoach').html(statusValue);

            // change color of icon
            $('#coach').toggleClass('nextstep-icon-inactive nextstep-icon-active');
        } else {
            // is not Coach
            statusValue = 'You are not coaching'
        }

        activatePopOver('#coach', statusValue)
    }

    // Get Steps data from api
    Sys.Application.add_load(function(){
        // if current person query api for steps taken
        var currentPersonGuid = '{{ CurrentPerson.Guid }}'
        if (currentPersonGuid !== '') {
            $.getJSON('/api/CCV/Badges/StepsBar/'+currentPersonGuid, function(data){
                for (var key in data) {
                    if (data.hasOwnProperty(key)) {
                        var keyData = data[key]
                        // Process response
                        switch (key) {
                            case 'BaptismResult': {
                                renderBaptism(keyData)
                                break;
                            };
                            case 'IsWorshipper': {
                                renderWorship(keyData)
                                break;
                            };   
                            case 'ConnectionResult': {
                                renderConnect(keyData)
                                break;
                            };
                            case 'IsTithing': {
                                renderGive(keyData)
                                break;
                            };   
                            case 'ServingResult': {
                                renderServe(keyData)
                                break;
                            };  
                            case 'CoachingResult': {
                                renderCoach(keyData)
                                break;
                            };  
                            case 'SharedStoryResult': {
                                renderShare(keyData)
                                break;
                            };                           
                            default:
                                break;
                        }
                    }
                }
            })
        }
        
        // If current person query api for starting point step
        var currentPersonId = '{{ CurrentPerson.Id }}'
        if (currentPersonId !== '') {
            $.getJSON('/api/CCV/Badges/TakenStartingPoint/'+currentPersonId, function(data){
                // process response
                renderStartingPoint(data);
            })
        }

    })
</script>
