!function () { function o() { CCV.mapStyles = [{ stylers: [{ visibility: "simplified" }, { saturation: -100 }] }, { featureType: "road.arterial", elementType: "labels", stylers: [{ visibility: "on" }, { gamma: 3.05 }] }, { featureType: "poi", stylers: [{ visibility: "off" }] }, { featureType: "transit", stylers: [{ visibility: "off" }] }, { featureType: "administrative.country", stylers: [{ visibility: "off" }] }, { featureType: "administrative.locality", stylers: [{ visibility: "off" }] }, { featureType: "administrative.neighborhood", stylers: [{ visibility: "off" }] }, { featureType: "water", stylers: [{ visibility: "off" }] }, {}], CCV.mapType = new google.maps.StyledMapType(CCV.mapStyles), CCV.markerFile = 1.5 < window.devicePixelRatio ? "/Assets/Images/marker@2x.png" : "/Assets/Images/marker.png", CCV.marker = new google.maps.MarkerImage(CCV.markerFile, null, null, null, new google.maps.Size(30, 38)), CCV.baseMap = function (o, t) { this.holder = o, this.points = t, this.markers = [], this.bounds = new google.maps.LatLngBounds, this.zoom = this.zoom || 12, this.useZoom = this.useZoom || !1, this.useScrollZoom = this.useScrollZoom || !0, this.usePanControl = this.usePanControl || !0 }, CCV.baseMap.prototype = { draw: function () { var o = {}; if (o = this.useScrollZoom ? { mapTypeId: "CCV", disableDefaultUI: !0 } : { mapTypeId: "CCV", scrollwheel: !1, panControl: this.usePanControl, zoomControl: !0, zoomControlOptions: { style: google.maps.ZoomControlStyle.SMALL, position: google.maps.ControlPosition.TOP_RIGHT }, streetViewControl: !1, mapTypeControl: !1 }, this.mapOptions = this.mapOptions || o, !this.holder) throw "Can't find map holder"; this.map = new google.maps.Map(this.holder, this.mapOptions), this.map.mapTypes.set("CCV", CCV.mapType), this.dropMarkers(), this.fitMarkers(), this.bindUi() }, dropMarkers: function () { for (var o = 0; o < this.points.length; o++) { var t = this.points[o]; this.dropMarker(t) } }, dropMarker: function (o) { var t = new google.maps.Marker({ position: new google.maps.LatLng(o.lat, o.lng), icon: CCV.marker, map: this.map, title: o.title, animation: google.maps.Animation.DROP }); this.markers.push(t), this.bounds.extend(t.position), this.afterDropMarker.call(this, o, t) }, afterDropMarker: function () { }, fitMarkers: function () { this.map.setCenter(this.bounds.getCenter()), this.useZoom || 1 == this.markers.length ? this.map.setZoom(this.zoom) : this.map.fitBounds(this.bounds) }, bindUi: function () { var o = this; $(window).resize(function () { o.fitMarkers() }) }, getInstanceName: function () { for (var o in window) if (window[o] == this) return o } }, CCV.campusMap = function (o, t) { CCV.baseMap.call(this, o, t), this.campusToDraw = t || "all" }, CCV.campusMap.prototype = new CCV.baseMap, CCV.campusMap.prototype.constructor = CCV.campusMap, CCV.campusMap.prototype.dropMarkers = function () { if ("all" == this.campusToDraw) for (var o = 0; o < CCV.locations.length; o++) { var t = CCV.locations[o]; this.dropMarker(t) } else { t = CCV.findCampusById(this.campusToDraw); this.dropMarker(t), this.useZoom = !0 } }, CCV.campusMap.prototype.dropMarker = function (o) { var t = new google.maps.Marker({ position: new google.maps.LatLng(o.geo.lat, o.geo.lng), icon: CCV.marker, map: this.map, title: o.name, campusid: o.id, animation: google.maps.Animation.DROP }); this.markers.push(t), this.bounds.extend(t.position), this.afterDropMarker.call(this, o, t) }, CCV.campusInfoWindowMap = function (o, t) { CCV.campusMap.call(this, o, t), this.infowindow = new google.maps.InfoWindow({ content: "Loading..." }) }, CCV.campusInfoWindowMap.prototype = new CCV.campusMap, CCV.campusInfoWindowMap.prototype.constructor = CCV.campusInfoWindowMap, CCV.campusInfoWindowMap.prototype.afterDropMarker = function (o, t) { var a = this; google.maps.event.addListener(t, "click", function () { a.infowindow.setContent(a.buildInfoWindow(o)), a.infowindow.open(a.map, this) }) }, CCV.campusInfoWindowMap.prototype.buildInfoWindow = function (o) { var t; return t = '<div class="infowindow">', t += '  <div class="name">' + o.name + " Campus</div>", t += '  <div class="group">', t += '    <img class="photo" src="' + o.photo + '&width=75" style="width: 75px; height: 75px;">', t += '    <div class="details">', t += '      <span class="address">' + o.street + "<br>" + o.city + ", " + o.state + " " + o.zip + "</span>", t += '      <span class="phone">' + o.phone + "</span>", t += "    </div>", t += "  </div>", t += '  <a class="select" href="/locationsv2/' + o.name.replace(" ", "-").toLowerCase() + '">Select this Campus</a>', t += "</div>" }, CCV.campusInfoWindowMapGeo = function (o, t) { CCV.campusInfoWindowMap.call(this, o, t), this.infowindow = new google.maps.InfoWindow({ content: "Loading..." }) }, CCV.campusInfoWindowMapGeo.prototype = new CCV.campusInfoWindowMap, CCV.campusInfoWindowMapGeo.prototype.constructor = CCV.campusInfoWindowMapGeo, CCV.campusInfoWindowMapGeo.prototype.findNearestCampus = function (p, o) { function t(o, t) { if (t == google.maps.DistanceMatrixStatus.OK) { for (var a, s, e = Number.POSITIVE_INFINITY, i = o.rows[0].elements, n = 0; n < i.length; n++)(s = i[n].duration.value) < e && (e = s, a = n); l.removeClass("is-loading"), r.nearestCampus = CCV.locations[a], "function" == typeof p && p.call(r, r.nearestCampus) } } var a, r = this, l = $(o), s = new google.maps.DistanceMatrixService; navigator.geolocation && (l.addClass("is-loading"), navigator.geolocation.getCurrentPosition(function (o) { a = new google.maps.LatLng(o.coords.latitude, o.coords.longitude), s.getDistanceMatrix({ origins: [a], destinations: r.allLocationsGeoArray(), travelMode: google.maps.TravelMode.DRIVING }, t) })) }, CCV.campusInfoWindowMapGeo.prototype.allLocationsGeoArray = function () { for (var o = [], t = 0; t < CCV.locations.length; t++) { var a = CCV.locations[t].geo, s = new google.maps.LatLng(a.lat, a.lng); o.push(s) } return o }, CCV.campusInfoWindowMapGeo.prototype.openInfoWindow = function (t) { var o = this.markers.filter(function (o) { return o.campusid == t.id })[0]; this.infowindow.setContent(this.buildInfoWindow(t)), this.infowindow.open(this.map, o) } } window.CCV = window.CCV || {}, "object" == typeof google && "object" == typeof google.maps ? o() : $(window).on("googleMapsIsLoaded", function () { o() }) }(), Rock.controls.util.loadGoogleMapsApi("https://maps.googleapis.com/maps/api/js?sensor=false&libraries=drawing&key=" + googleApiKey), window.CCV = window.CCV || {}, CCV.showMapCampusModal = function () { CCV.campusModalMapHasBeenDrawn || (window.campusModalMap = new CCV.campusInfoWindowMap(document.getElementById("our-campuses-map")), options = { mapTypeId: "CCV", panControl: this.usePanControl, zoomControl: !0, zoomControlOptions: { style: google.maps.ZoomControlStyle.SMALL, position: google.maps.ControlPosition.TOP_RIGHT }, streetViewControl: !1, mapTypeControl: !1, gestureHandling: "greedy" }, window.campusModalMap.mapOptions = options, campusModalMap.draw(), CCV.campusModalMapHasBeenDrawn = !0) }, $(window).on("googleMapsIsLoaded", function () { CCV.showMapCampusModal() });