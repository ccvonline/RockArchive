<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsvHelper12</name>
    </assembly>
    <members>
        <member name="T:CsvHelper12.BadDataException">
            <summary>
            Represents errors that occur due to bad data.
            </summary>
        </member>
        <member name="M:CsvHelper12.BadDataException.#ctor(CsvHelper12.ReadingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.BadDataException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper12.BadDataException.#ctor(CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.BadDataException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.BadDataException.#ctor(CsvHelper12.ReadingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.BadDataException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.Caches">
            <summary>
            Types of caches.
            </summary>
        </member>
        <member name="F:CsvHelper12.Caches.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:CsvHelper12.Caches.NamedIndex">
            <summary>
            Named index.
            </summary>
        </member>
        <member name="F:CsvHelper12.Caches.ReadRecord">
            <summary>
            Delegate that creates objects when reading.
            </summary>
        </member>
        <member name="F:CsvHelper12.Caches.WriteRecord">
            <summary>
            Delegate that writes objects to strings when writing.
            </summary>
        </member>
        <member name="F:CsvHelper12.Caches.TypeConverterOptions">
            <summary>
            Type converter options.
            </summary>
        </member>
        <member name="F:CsvHelper12.Caches.RawRecord">
            <summary>
            Raw record.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.BooleanFalseValuesAttribute">
            <summary>
            The string values used to represent a boolean false when converting.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.BooleanFalseValuesAttribute.FalseValues">
            <summary>
            Gets the false values.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.BooleanFalseValuesAttribute.#ctor(System.String)">
            <summary>
            The string values used to represent a boolean false when converting.
            </summary>
            <param name="falseValue">The false values.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.BooleanFalseValuesAttribute.#ctor(System.String[])">
            <summary>
            The string values used to represent a boolean false when converting.
            </summary>
            <param name="falseValues">The false values.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.BooleanTrueValuesAttribute">
            <summary>
            The string values used to represent a boolean true when converting.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.BooleanTrueValuesAttribute.TrueValues">
            <summary>
            Gets the true values.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.BooleanTrueValuesAttribute.#ctor(System.String)">
            <summary>
            The string values used to represent a boolean true when converting.
            </summary>
            <param name="trueValue"></param>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.BooleanTrueValuesAttribute.#ctor(System.String[])">
            <summary>
            The string values used to represent a boolean true when converting.
            </summary>
            <param name="trueValues"></param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.ConstantAttribute">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.ConstantAttribute.Constant">
            <summary>
            Gets the constant.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.ConstantAttribute.#ctor(System.Object)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="constant">The constant.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.CultureInfoAttribute">
            <summary>
            The <see cref="P:CsvHelper12.Configuration.Attributes.CultureInfoAttribute.CultureInfo"/> used when type converting.
            This will override the global <see cref="P:CsvHelper12.Configuration.Configuration.CultureInfo"/>
            setting.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.CultureInfoAttribute.CultureInfo">
            <summary>
            Gets the culture info.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.CultureInfoAttribute.#ctor(System.String)">
            <summary>
            The <see cref="P:CsvHelper12.Configuration.Attributes.CultureInfoAttribute.CultureInfo"/> used when type converting.
            This will override the global <see cref="P:CsvHelper12.Configuration.Configuration.CultureInfo"/>
            setting.
            </summary>
            <param name="culture">The culture.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.DateTimeStylesAttribute">
            <summary>
            The <see cref="P:CsvHelper12.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStyles"/> to use when type converting.
            This is used when doing any <see cref="T:System.DateTime"/> conversions.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStyles">
            <summary>
            Gets the date time styles.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.DateTimeStylesAttribute.#ctor(System.Globalization.DateTimeStyles)">
            <summary>
            The <see cref="P:CsvHelper12.Configuration.Attributes.DateTimeStylesAttribute.DateTimeStyles"/> to use when type converting.
            This is used when doing any <see cref="T:System.DateTime"/> conversions.
            </summary>
            <param name="dateTimeStyles">The date time styles.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.DefaultAttribute">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.DefaultAttribute.Default">
            <summary>
            Gets the default value.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.DefaultAttribute.#ctor(System.Object)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.FormatAttribute">
            <summary>
            The string format to be used when type converting.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.FormatAttribute.Formats">
            <summary>
            Gets the formats.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.FormatAttribute.#ctor(System.String)">
            <summary>
            The string format to be used when type converting.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.FormatAttribute.#ctor(System.String[])">
            <summary>
            The string format to be used when type converting.
            </summary>
            <param name="formats">The formats.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.HeaderPrefixAttribute">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.HeaderPrefixAttribute.Prefix">
            <summary>
            Gets the prefix.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.HeaderPrefixAttribute.#ctor">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.HeaderPrefixAttribute.#ctor(System.String)">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.IgnoreAttribute">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.IndexAttribute">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.IndexAttribute.Index">
            <summary>
            Gets the index.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.IndexAttribute.IndexEnd">
            <summary>
            Gets the index end.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.IndexAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index.</param>
            <param name="indexEnd">The index end.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.NameAttribute">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.NameAttribute.Names">
            <summary>
            Gets the names.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.NameAttribute.#ctor(System.String)">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="name">The name</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.NameAttribute.#ctor(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The names.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.NameIndexAttribute">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.NameIndexAttribute.NameIndex">
            <summary>
            The name index.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.NameIndexAttribute.#ctor(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="nameIndex">The name index.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.NullValuesAttribute">
            <summary>
            The string values used to represent null when converting.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.NullValuesAttribute.NullValues">
            <summary>
            Gets the null values.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.NullValuesAttribute.#ctor(System.String)">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="nullValue">The null values.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.NullValuesAttribute.#ctor(System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="nullValues">The null values.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.NumberStylesAttribute">
            <summary>
            The <see cref="P:CsvHelper12.Configuration.Attributes.NumberStylesAttribute.NumberStyles"/> to use when type converting.
            This is used when doing any number conversions.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.NumberStylesAttribute.NumberStyles">
            <summary>
            Gets the number styles.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.NumberStylesAttribute.#ctor(System.Globalization.NumberStyles)">
            <summary>
            The <see cref="P:CsvHelper12.Configuration.Attributes.NumberStylesAttribute.NumberStyles"/> to use when type converting.
            This is used when doing any number conversions.
            </summary>
            <param name="numberStyles">The number styles.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.OptionalAttribute">
            <summary>
            Ignore the member when reading if no matching field name can be found.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.Attributes.TypeConverterAttribute">
            <summary>
            Specifies the <see cref="P:CsvHelper12.Configuration.Attributes.TypeConverterAttribute.TypeConverter"/> to use
            when converting the member to and from a CSV field.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Attributes.TypeConverterAttribute.TypeConverter">
            <summary>
            Gets the type converter.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Attributes.TypeConverterAttribute.#ctor(System.Type)">
            <summary>
            Specifies the <see cref="P:CsvHelper12.Configuration.Attributes.TypeConverterAttribute.TypeConverter"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverterType"></param>
        </member>
        <member name="T:CsvHelper12.Configuration.ClassMap">
            <summary>
             Maps class members to CSV fields.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ClassMap.ClassType">
            <summary>
            The type of the class this map is for.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ClassMap.ParameterMaps">
            <summary>
            The class constructor parameter mappings.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ClassMap.MemberMaps">
            <summary>
            The class member mappings.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ClassMap.ReferenceMaps">
            <summary>
            The class member reference mappings.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.#ctor(System.Type)">
            <summary>
            Allow only internal creation of CsvClassMap.
            </summary>
            <param name="classType">The type of the class this map is for.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.Map(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Maps a member to a CSV field.
            </summary>
            <param name="classType">The type of the class this map is for. This may not be the same type
            as the member.DeclaringType or the current ClassType due to nested member mappings.</param>
            <param name="member">The member to map.</param>
            <param name="useExistingMap">If true, an existing map will be used if available.
            If false, a new map is created for the same member.</param>
            <returns>The member mapping.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.Map">
            <summary>
            Maps a non-member to a CSV field. This allows for writing
            data that isn't mapped to a class member.
            </summary>
            <returns>The member mapping.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.References(System.Type,System.Reflection.MemberInfo,System.Object[])">
            <summary>
            Maps a member to another class map.
            </summary>
            <param name="classMapType">The type of the class map.</param>
            <param name="member">The member.</param>
            <param name="constructorArgs">Constructor arguments used to create the reference map.</param>
            <returns>The reference mapping for the member.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.AutoMap">
            <summary>
            Auto maps all members for the given type. If a member 
            is mapped again it will override the existing map.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.AutoMap(CsvHelper12.Configuration.Configuration)">
            <summary>
            Auto maps all members for the given type. If a member 
            is mapped again it will override the existing map.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.GetMaxIndex">
            <summary>
            Get the largest index for the
            members and references.
            </summary>
            <returns>The max index.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.ReIndex(System.Int32)">
            <summary>
            Resets the indexes based on the given start index.
            </summary>
            <param name="indexStart">The index start.</param>
            <returns>The last index + 1.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.AutoMapMembers(CsvHelper12.Configuration.ClassMap,CsvHelper12.Configuration.Configuration,System.Collections.Generic.LinkedList{System.Type},System.Int32)">
            <summary>
            Auto maps the given map and checks for circular references as it goes.
            </summary>
            <param name="map">The map to auto map.</param>
            <param name="configuration">The configuration.</param>
            <param name="mapParents">The list of parents for the map.</param>
            <param name="indexStart">The index starting point.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.AutoMapConstructorParameters(CsvHelper12.Configuration.ClassMap,CsvHelper12.Configuration.Configuration,System.Collections.Generic.LinkedList{System.Type},System.Int32)">
            <summary>
            Auto maps the given map using constructor parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="configuration">The configuration.</param>
            <param name="mapParents">The list of parents for the map.</param>
            <param name="indexStart">The index starting point.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.CheckForCircularReference(System.Type,System.Collections.Generic.LinkedList{System.Type})">
            <summary>
            Checks for circular references.
            </summary>
            <param name="type">The type to check for.</param>
            <param name="mapParents">The list of parents to check against.</param>
            <returns>A value indicating if a circular reference was found.
            True if a circular reference was found, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.GetGenericType">
            <summary>
            Gets the generic type for this class map.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.ApplyAttributes(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Applies attribute configurations to the map.
            </summary>
            <param name="memberMap">The member map.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap.ApplyAttributes(CsvHelper12.Configuration.MemberReferenceMap)">
            <summary>
            Applies attribute configurations to the map.
            </summary>
            <param name="referenceMap">The reference map.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasMap`1">
            <summary>
            Has mapping capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Maps a member to a CSV field.
            </summary>
            <param name="expression">The member to map.</param>
            <param name="useExistingMap">If true, an existing map will be used if available.
            If false, a new map is created for the same member.</param>
            <returns>The member mapping.</returns>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasMapOptions`2">
            <summary>
            Options after a mapping call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasTypeConverter`2">
            <summary>
            Has type converter capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper12.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasTypeConverter`2.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper12.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <typeparam name="TConverter">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper12.Configuration.IHasTypeConverter`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasTypeConverterOptions`2">
            <summary>
            Options after a type converter call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasIndex`2">
            <summary>
            Has index capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasIndex`2.Index(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
            <param name="indexEnd">The end index used when mapping to an <see cref="T:System.Collections.IEnumerable"/> member.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasIndexOptions`2">
            <summary>
            Options after an index call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasOptional`2">
            <summary>
            Has optional capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasOptional`2.Optional">
            <summary>
            Ignore the member when reading if no matching field name can be found.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasOptionalOptions`2">
            <summary>
            Options after an optional call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasName`2">
            <summary>
            Has name capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasName`2.Name(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The possible names of the CSV field.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasNameOptions`2">
            <summary>
            Options after a name call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasNameIndex`2">
            <summary>
            Has name index capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasNameIndex`2.NameIndex(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="index">The index of the name.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasNameIndexOptions`2">
            <summary>
            Options after a name index call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasConvertUsing`2">
            <summary>
            Has convert using capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasConvertUsing`2.ConvertUsing(System.Func{CsvHelper12.IReaderRow,`1})">
            <summary>
            Specifies an expression to be used to convert data in the
            row to the member.
            </summary>
            <param name="convertExpression">The convert expression.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasConvertUsing`2.ConvertUsing(System.Func{`0,System.String})">
            <summary>
            Specifies an expression to be used to convert the object
            to a field.
            </summary>
            <param name="convertExpression">The convert expression.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasDefault`2">
            <summary>
            Has default capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasDefault`2.Default(`1)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasDefault`2.Default(System.String)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty. This value is not type checked
            and will use a <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> to convert
            the field. This could potentially have runtime errors.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasDefaultOptions`2">
            <summary>
            Options after a default call.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasConstant`2">
            <summary>
            Has constant capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasConstant`2.Constant(`1)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="value">The constant value.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IHasValidate`2">
            <summary>
            Has validate capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IHasValidate`2.Validate(System.Func{System.String,System.Boolean})">
            <summary>
            The validate expression that will be called on every field when reading.
            The expression should return true if the field is valid.
            If false is returned, a <see cref="T:CsvHelper12.ValidationException"/>
            will be thrown.
            </summary>
            <param name="validateExpression">The validation expression.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.IBuildableClass`1">
            <summary>
            Has build capabilities.
            </summary>
            <typeparam name="TClass">The class type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IBuildableClass`1.Build">
            <summary>
            Builds the <see cref="T:CsvHelper12.Configuration.ClassMap`1"/>.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.ClassMapCollection">
            <summary>
            Collection that holds CsvClassMaps for record types.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ClassMapCollection.Item(System.Type)">
            <summary>
            Gets the <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the specified record type.
            </summary>
            <value>
            The <see cref="T:CsvHelper12.Configuration.ClassMap"/>.
            </value>
            <param name="type">The record type.</param>
            <returns>The <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the specified record type.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMapCollection.#ctor(CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates a new instance using the given configuration.
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMapCollection.Find``1">
            <summary>
            Finds the <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the specified record type.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <returns>The <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the specified record type.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMapCollection.Add(CsvHelper12.Configuration.ClassMap)">
            <summary>
            Adds the specified map for it's record type. If a map
            already exists for the record type, the specified
            map will replace it.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMapCollection.Remove(System.Type)">
            <summary>
            Removes the class map.
            </summary>
            <param name="classMapType">The class map type.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMapCollection.Clear">
            <summary>
            Removes all maps.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMapCollection.GetGenericCsvClassMapType(System.Type)">
            <summary>
            Goes up the inheritance tree to find the type instance of CsvClassMap{}.
            </summary>
            <param name="type">The type to traverse.</param>
            <returns>The type that is CsvClassMap{}.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMapCollection.SetMapDefaults(CsvHelper12.Configuration.ClassMap)">
            <summary>
            Sets defaults for the mapping tree. The defaults used
            to be set inside the classes, but this didn't allow for
            the TypeConverter to be created from the Configuration's
            TypeConverterFactory.
            </summary>
            <param name="map">The map to set defaults on.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.ClassMap`1">
            <summary>
            Maps class members to CSV fields.
            </summary>
            <typeparam name="TClass">The <see cref="T:System.Type"/> of class to map.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:CsvHelper12.Configuration.ClassMap`1"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap`1.Map``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Maps a member to a CSV field.
            </summary>
            <param name="expression">The member to map.</param>
            <param name="useExistingMap">If true, an existing map will be used if available.
            If false, a new map is created for the same member.</param>
            <returns>The member mapping.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ClassMap`1.References``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object[])">
            <summary>
            Meant for internal use only. 
            Maps a member to another class map. When this is used, accessing a property through
            sub-property mapping later won't work. You can only use one or the other. When using
            this, ConvertUsing will also not work.
            </summary>
            <typeparam name="TClassMap">The type of the class map.</typeparam>
            <param name="expression">The expression.</param>
            <param name="constructorArgs">Constructor arguments used to create the reference map.</param>
            <returns>The reference mapping for the member.</returns>
        </member>
        <member name="T:CsvHelper12.Configuration.Configuration">
            <summary>
            Configuration used for reading and writing CSV data.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.TypeConverterOptionsCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper12.Configuration.Configuration.TypeConverterOptionsCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.TypeConverterCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper12.Configuration.Configuration.TypeConverterOptionsCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.HasHeaderRecord">
            <summary>
            Gets or sets a value indicating if the
            CSV file has a header record.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.HeaderValidated">
            <summary>
            Gets or sets the function that is called when a header validation check is ran. The default function
            will throw a <see cref="T:CsvHelper12.ValidationException"/> if there is no header for a given member mapping.
            You can supply your own function to do other things like logging the issue instead of throwing an exception.
            Arguments: isValid, headerNames, headerNameIndex, context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.MissingFieldFound">
            <summary>
            Gets or sets the function that is called when a missing field is found. The default function will
            throw a <see cref="T:CsvHelper12.MissingFieldException"/>. You can supply your own function to do other things
            like logging the issue instead of throwing an exception.
            Arguments: headerNames, index, context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.BadDataFound">
            <summary>
            Gets or sets the function that is called when bad field data is found. A field
            has bad data if it contains a quote and the field is not quoted (escaped).
            You can supply your own function to do other things like logging the issue
            instead of throwing an exception.
            Arguments: context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.ReadingExceptionOccurred">
            <summary>
            Gets or sets the function that is called when a reading exception occurs.
            The default function will re-throw the given exception. If you want to ignore
            reading exceptions, you can supply your own function to do other things like
            logging the issue.
            Arguments: exception
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.ShouldSkipRecord">
            <summary>
            Gets or sets the callback that will be called to
            determine whether to skip the given record or not.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.LineBreakInQuotedFieldIsBadData">
            <summary>
            Gets or sets a value indicating if a line break found in a quote field should
            be considered bad data. True to consider a line break bad data, otherwise false.
            Defaults to false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.SanitizeForInjection">
            <summary>
            Gets or sets a value indicating if fields should be sanitized
            to prevent malicious injection. This covers MS Excel, 
            Google Sheets and Open Office Calc.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.InjectionCharacters">
            <summary>
            Gets or sets the characters that are used for injection attacks.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.InjectionEscapeCharacter">
            <summary>
            Gets or sets the character used to escape a detected injection.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.DetectColumnCountChanges">
            <summary>
            Gets or sets a value indicating whether changes in the column
            count should be detected. If true, a <see cref="T:CsvHelper12.BadDataException"/>
            will be thrown if a different column count is detected.
            </summary>
            <value>
            <c>true</c> if [detect column count changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.PrepareHeaderForMatch">
            <summary>
            Prepares the header field for matching against a member name.
            The header field and the member name are both ran through this function.
            You should do things like trimming, removing whitespace, removing underscores,
            and making casing changes to ignore case.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.ShouldUseConstructorParameters">
            <summary>
            Determines if constructor parameters should be used to create
            the class instead of the default constructor and members.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.GetConstructor">
            <summary>
            Chooses the constructor to use for constructor mapping.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.DynamicPropertySort">
            <summary>
            Gets or sets the comparer used to order the properties
            of dynamic objects when writing. The default is null,
            which will preserve the order the object properties
            were created with.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.IgnoreReferences">
            <summary>
            Gets or sets a value indicating whether references
            should be ignored when auto mapping. True to ignore
            references, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.TrimOptions">
            <summary>
            Gets or sets the field trimming options.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.Delimiter">
            <summary>
            Gets or sets the delimiter used to separate fields.
            Default is CultureInfo.TextInfo.ListSeparator.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.Escape">
            <summary>
            Gets or sets the escape character used to escape a quote inside a field.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.Quote">
            <summary>
            Gets or sets the character used to quote fields.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.QuoteString">
            <summary>
            Gets a string representation of the currently configured Quote character.
            </summary>
            <value>
            The new quote string.
            </value>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.DoubleQuoteString">
            <summary>
            Gets a string representation of two of the currently configured Quote characters.
            </summary>
            <value>
            The new double quote string.
            </value>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.ShouldQuote">
            <summary>
            Gets or sets a function that is used to determine if a field should get quoted
            when writing.
            Arguments: field, context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.Comment">
            <summary>
            Gets or sets the character used to denote
            a line that is commented out. Default is '#'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.AllowComments">
            <summary>
            Gets or sets a value indicating if comments are allowed.
            True to allow commented out lines, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.BufferSize">
            <summary>
            Gets or sets the size of the buffer
            used for reading CSV files.
            Default is 2048.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.CountBytes">
            <summary>
            Gets or sets a value indicating whether the number of bytes should
            be counted while parsing. Default is false. This will slow down parsing
            because it needs to get the byte count of every char for the given encoding.
            The <see cref="P:CsvHelper12.Configuration.Configuration.Encoding"/> needs to be set correctly for this to be accurate.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.Encoding">
            <summary>
            Gets or sets the encoding used when counting bytes.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.CultureInfo">
            <summary>
            Gets or sets the culture info used to read an write CSV files.
            Default is <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.IgnoreQuotes">
            <summary>
            Gets or sets a value indicating if quotes should be
            ignored when parsing and treated like any other character.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.IncludePrivateMembers">
            <summary>
            Gets or sets a value indicating if private
            member should be read from and written to.
            True to include private member, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.MemberTypes">
            <summary>
            Gets or sets the member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.IgnoreBlankLines">
            <summary>
            Gets or sets a value indicating if blank lines
            should be ignored when reading.
            True to ignore, otherwise false. Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.ReferenceHeaderPrefix">
            <summary>
            Gets or sets a callback that will return the prefix for a reference header.
            Arguments: memberType, memberName
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.Maps">
            <summary>
            The configured <see cref="T:CsvHelper12.Configuration.ClassMap"/>s.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.Configuration.UseNewObjectForNullReferenceMembers">
            <summary>
            Gets or sets a value indicating that during writing if a new 
            object should be created when a reference member is null.
            True to create a new object and use it's defaults for the
            fields, or false to leave the fields empty for all the
            reference member's member.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.Configuration"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.Configuration"/> class
            using the given <see cref="T:System.Globalization.CultureInfo"/>. Since <see cref="P:CsvHelper12.Configuration.Configuration.Delimiter"/>
            uses <see cref="P:CsvHelper12.Configuration.Configuration.CultureInfo"/> for it's default, the given <see cref="T:System.Globalization.CultureInfo"/>
            will be used instead.
            </summary>
            <param name="cultureInfo">The culture information.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.RegisterClassMap``1">
            <summary>
            Use a <see cref="T:CsvHelper12.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no members are mapped by default.
            Only member specified in the mapping are used.
            </summary>
            <typeparam name="TMap">The type of mapping class to use.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.RegisterClassMap(System.Type)">
            <summary>
            Use a <see cref="T:CsvHelper12.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no members are mapped by default.
            Only members specified in the mapping are used.
            </summary>
            <param name="classMapType">The type of mapping class to use.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.RegisterClassMap(CsvHelper12.Configuration.ClassMap)">
            <summary>
            Registers the class map.
            </summary>
            <param name="map">The class map to register.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.UnregisterClassMap``1">
            <summary>
            Unregisters the class map.
            </summary>
            <typeparam name="TMap">The map type to unregister.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.UnregisterClassMap(System.Type)">
            <summary>
            Unregisters the class map.
            </summary>
            <param name="classMapType">The map type to unregister.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.UnregisterClassMap">
            <summary>
            Unregisters all class maps.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.AutoMap``1">
            <summary>
            Generates a <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the type.
            </summary>
            <typeparam name="T">The type to generate the map for.</typeparam>
            <returns>The generate map.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.Configuration.AutoMap(System.Type)">
            <summary>
            Generates a <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the type.
            </summary>
            <param name="type">The type to generate for the map.</param>
            <returns>The generate map.</returns>
        </member>
        <member name="T:CsvHelper12.Configuration.ConfigurationException">
            <summary>
            Represents configuration errors that occur.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.ConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.ConfigurationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.ConfigurationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.ConfigurationFunctions">
            <summary>Holds the default callback methods for delegate members of <c>CsvHelper12.Configuration.Configuration</c>.</summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.HeaderValidated(System.Boolean,System.String[],System.Int32,CsvHelper12.ReadingContext)">
            <summary>
            Throws a <see cref="T:CsvHelper12.ValidationException"/> if <paramref name="isValid"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.MissingFieldFound(System.String[],System.Int32,CsvHelper12.ReadingContext)">
            <summary>
            Throws a <c>MissingFieldException</c>.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.BadDataFound(CsvHelper12.ReadingContext)">
            <summary>
            Throws a <see cref="T:CsvHelper12.BadDataException"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.ReadingExceptionOccurred(CsvHelper12.CsvHelperException)">
            <summary>
            Throws the given <paramref name="exception"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.ShouldQuote(System.String,CsvHelper12.WritingContext)">
            <summary>
            Returns true if the field contains a <see cref="P:CsvHelper12.Configuration.IWriterConfiguration.QuoteString"/>,
            starts with a space, ends with a space, contains \r or \n, or contains
            the <see cref="P:CsvHelper12.Configuration.ISerializerConfiguration.Delimiter"/>.
            </summary>
            <param name="field">The field.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.ShouldSkipRecord(System.String[])">
            <summary>
            Returns <c>false</c>.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.PrepareHeaderForMatch(System.String,System.Int32)">
            <summary>
            Returns the <paramref name="header"/> as given.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.ShouldUseConstructorParameters(System.Type)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/>:
            1. does not have a parameterless constructor
            2. has a constructor
            3. is not a user defined struct
            4. is not an interface
            5. TypeCode is not an Object.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ConfigurationFunctions.GetConstructor(System.Type)">
            <summary>
            Returns the type's constructor with the most parameters. 
            If two constructors have the same number of parameters, then
            there is no guarantee which one will be returned. If you have
            that situation, you should probably implement this function yourself.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.DefaultClassMap`1">
            <summary>
            A default <see cref="T:CsvHelper12.Configuration.ClassMap`1"/> that can be used
            to create a class map dynamically.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CsvHelper12.Configuration.IParserConfiguration">
            <summary>
            Configuration used for the <see cref="T:CsvHelper12.IParser"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.BufferSize">
            <summary>
            Gets or sets the size of the buffer
            used for reading CSV files.
            Default is 2048.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.CountBytes">
            <summary>
            Gets or sets a value indicating whether the number of bytes should
            be counted while parsing. Default is false. This will slow down parsing
            because it needs to get the byte count of every char for the given encoding.
            The <see cref="P:CsvHelper12.Configuration.IParserConfiguration.Encoding"/> needs to be set correctly for this to be accurate.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.Encoding">
            <summary>
            Gets or sets the encoding used when counting bytes.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.BadDataFound">
            <summary>
            Gets or sets the function that is called when bad field data is found. A field
            has bad data if it contains a quote and the field is not quoted (escaped).
            You can supply your own function to do other things like logging the issue
            instead of throwing an exception.
            Arguments: context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.LineBreakInQuotedFieldIsBadData">
            <summary>
            Gets or sets a value indicating if a line break found in a quote field should
            be considered bad data. True to consider a line break bad data, otherwise false.
            Defaults to false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.Comment">
            <summary>
            Gets or sets the character used to denote
            a line that is commented out. Default is '#'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.AllowComments">
            <summary>
            Gets or sets a value indicating if comments are allowed.
            True to allow commented out lines, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.IgnoreBlankLines">
            <summary>
            Gets or sets a value indicating if blank lines
            should be ignored when reading.
            True to ignore, otherwise false. Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.IgnoreQuotes">
            <summary>
            Gets or sets a value indicating if quotes should be
            ignored when parsing and treated like any other character.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.Quote">
            <summary>
            Gets or sets the character used to quote fields.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.Delimiter">
            <summary>
            Gets or sets the delimiter used to separate fields.
            Default is CultureInfo.CurrentCulture.TextInfo.ListSeparator.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.Escape">
            <summary>
            Gets or sets the escape character used to escape a quote inside a field.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IParserConfiguration.TrimOptions">
            <summary>
            Gets or sets the field trimming options.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.IReaderConfiguration">
            <summary>
            Configuration used for the <see cref="T:CsvHelper12.IReader"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.HasHeaderRecord">
            <summary>
            Gets or sets a value indicating if the
            CSV file has a header record.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.HeaderValidated">
            <summary>
            Gets or sets the function that is called when a header validation check is ran. The default function
            will throw a <see cref="T:CsvHelper12.ValidationException"/> if there is no header for a given member mapping.
            You can supply your own function to do other things like logging the issue instead of throwing an exception.
            Arguments: isValid, headerNames, headerNameIndex, context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.MissingFieldFound">
            <summary>
            Gets or sets the function that is called when a missing field is found. The default function will
            throw a <see cref="T:CsvHelper12.MissingFieldException"/>. You can supply your own function to do other things
            like logging the issue instead of throwing an exception.
            Arguments: headerNames, index, context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.ReadingExceptionOccurred">
            <summary>
            Gets or sets the function that is called when a reading exception occurs.
            The default function will re-throw the given exception. If you want to ignore
            reading exceptions, you can supply your own function to do other things like
            logging the issue.
            Arguments: exception
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.CultureInfo">
            <summary>
            Gets or sets the culture info used to read an write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.TypeConverterOptionsCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper12.Configuration.IReaderConfiguration.TypeConverterOptionsCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.TypeConverterCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper12.Configuration.IReaderConfiguration.TypeConverterCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.PrepareHeaderForMatch">
            <summary>
            Prepares the header field for matching against a member name.
            The header field and the member name are both ran through this function.
            You should do things like trimming, removing whitespace, removing underscores,
            and making casing changes to ignore case.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.ShouldUseConstructorParameters">
            <summary>
            Determines if constructor parameters should be used to create
            the class instead of the default constructor and members.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.GetConstructor">
            <summary>
            Chooses the constructor to use for constructor mapping.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.IgnoreReferences">
            <summary>
            Gets or sets a value indicating whether references
            should be ignored when auto mapping. True to ignore
            references, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.ShouldSkipRecord">
            <summary>
            Gets or sets the callback that will be called to
            determine whether to skip the given record or not.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.IncludePrivateMembers">
            <summary>
            Gets or sets a value indicating if private
            member should be read from and written to.
            True to include private member, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.ReferenceHeaderPrefix">
            <summary>
            Gets or sets a callback that will return the prefix for a reference header.
            Arguments: memberType, memberName
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.DetectColumnCountChanges">
            <summary>
            Gets or sets a value indicating whether changes in the column
            count should be detected. If true, a <see cref="T:CsvHelper12.BadDataException"/>
            will be thrown if a different column count is detected.
            </summary>
            <value>
            <c>true</c> if [detect column count changes]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.MemberTypes">
            <summary>
            Gets or sets the member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IReaderConfiguration.Maps">
            <summary>
            The configured <see cref="T:CsvHelper12.Configuration.ClassMap"/>s.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.RegisterClassMap``1">
            <summary>
            Use a <see cref="T:CsvHelper12.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no members are mapped by default.
            Only member specified in the mapping are used.
            </summary>
            <typeparam name="TMap">The type of mapping class to use.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.RegisterClassMap(System.Type)">
            <summary>
            Use a <see cref="T:CsvHelper12.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no member are mapped by default.
            Only member specified in the mapping are used.
            </summary>
            <param name="classMapType">The type of mapping class to use.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.RegisterClassMap(CsvHelper12.Configuration.ClassMap)">
            <summary>
            Registers the class map.
            </summary>
            <param name="map">The class map to register.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.UnregisterClassMap``1">
            <summary>
            Unregisters the class map.
            </summary>
            <typeparam name="TMap">The map type to unregister.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.UnregisterClassMap(System.Type)">
            <summary>
            Unregisters the class map.
            </summary>
            <param name="classMapType">The map type to unregister.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.UnregisterClassMap">
            <summary>
            Unregisters all class maps.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.AutoMap``1">
            <summary>
            Generates a <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the type.
            </summary>
            <typeparam name="T">The type to generate the map for.</typeparam>
            <returns>The generate map.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.IReaderConfiguration.AutoMap(System.Type)">
            <summary>
            Generates a <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the type.
            </summary>
            <param name="type">The type to generate for the map.</param>
            <returns>The generate map.</returns>
        </member>
        <member name="T:CsvHelper12.Configuration.ISerializerConfiguration">
            <summary>
            Configuration used for the <see cref="T:CsvHelper12.ISerializer"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ISerializerConfiguration.Delimiter">
            <summary>
            Gets or sets the delimiter used to separate fields.
            Default is ',';
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ISerializerConfiguration.Quote">
            <summary>
            Gets or sets the character used to quote fields.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ISerializerConfiguration.Escape">
            <summary>
            Gets or sets the escape character used to escape a quote inside a field.
            Default is '"'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ISerializerConfiguration.TrimOptions">
            <summary>
            Gets or sets the field trimming options.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ISerializerConfiguration.SanitizeForInjection">
            <summary>
            Gets or sets a value indicating if fields should be sanitized
            to prevent malicious injection. This covers MS Excel, 
            Google Sheets and Open Office Calc.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ISerializerConfiguration.InjectionCharacters">
            <summary>
            Gets or sets the characters that are used for injection attacks.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ISerializerConfiguration.InjectionEscapeCharacter">
            <summary>
            Gets or sets the character used to escape a detected injection.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.IWriterConfiguration">
            <summary>
            Configuration used for the <see cref="T:CsvHelper12.IWriter"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.QuoteString">
            <summary>
            Gets a string representation of the currently configured Quote character.
            </summary>
            <value>
            The new quote string.
            </value>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.DoubleQuoteString">
            <summary>
            Gets a string representation of two of the currently configured Quote characters.
            </summary>
            <value>
            The new double quote string.
            </value>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.ShouldQuote">
            <summary>
            Gets or sets a function that is used to determine if a field should get quoted 
            when writing.
            Arguments: field, context
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.CultureInfo">
            <summary>
            Gets or sets the culture info used to read an write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.TypeConverterOptionsCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper12.Configuration.IWriterConfiguration.TypeConverterOptionsCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.TypeConverterCache">
            <summary>
            Gets or sets the <see cref="P:CsvHelper12.Configuration.IWriterConfiguration.TypeConverterCache"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.AllowComments">
            <summary>
            Gets or sets a value indicating if comments are allowed.
            True to allow commented out lines, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.Comment">
            <summary>
            Gets or sets the character used to denote
            a line that is commented out. Default is '#'.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.HasHeaderRecord">
            <summary>
            Gets or sets a value indicating if the
            CSV file has a header record.
            Default is true.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.IgnoreReferences">
            <summary>
            Gets or sets a value indicating whether references
            should be ignored when auto mapping. True to ignore
            references, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.IncludePrivateMembers">
            <summary>
            Gets or sets a value indicating if private
            member should be read from and written to.
            True to include private member, otherwise false. Default is false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.ReferenceHeaderPrefix">
            <summary>
            Gets or sets a callback that will return the prefix for a reference header.
            Arguments: memberType, memberName
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.MemberTypes">
            <summary>
            Gets or sets the member types that are used when auto mapping.
            MemberTypes are flags, so you can choose more than one.
            Default is Properties.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.Maps">
            <summary>
            The configured <see cref="T:CsvHelper12.Configuration.ClassMap"/>s.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.RegisterClassMap``1">
            <summary>
            Use a <see cref="T:CsvHelper12.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no member are mapped by default.
            Only member specified in the mapping are used.
            </summary>
            <typeparam name="TMap">The type of mapping class to use.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.RegisterClassMap(System.Type)">
            <summary>
            Use a <see cref="T:CsvHelper12.Configuration.ClassMap`1" /> to configure mappings.
            When using a class map, no member are mapped by default.
            Only member specified in the mapping are used.
            </summary>
            <param name="classMapType">The type of mapping class to use.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.RegisterClassMap(CsvHelper12.Configuration.ClassMap)">
            <summary>
            Registers the class map.
            </summary>
            <param name="map">The class map to register.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.UnregisterClassMap``1">
            <summary>
            Unregisters the class map.
            </summary>
            <typeparam name="TMap">The map type to unregister.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.UnregisterClassMap(System.Type)">
            <summary>
            Unregisters the class map.
            </summary>
            <param name="classMapType">The map type to unregister.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.UnregisterClassMap">
            <summary>
            Unregisters all class maps.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.AutoMap``1">
            <summary>
            Generates a <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the type.
            </summary>
            <typeparam name="T">The type to generate the map for.</typeparam>
            <returns>The generate map.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.IWriterConfiguration.AutoMap(System.Type)">
            <summary>
            Generates a <see cref="T:CsvHelper12.Configuration.ClassMap"/> for the type.
            </summary>
            <param name="type">The type to generate for the map.</param>
            <returns>The generate map.</returns>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.UseNewObjectForNullReferenceMembers">
            <summary>
            Gets or sets a value indicating that during writing if a new 
            object should be created when a reference member is null.
            True to create a new object and use it's defaults for the
            fields, or false to leave the fields empty for all the
            reference member's member.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.IWriterConfiguration.DynamicPropertySort">
            <summary>
            Gets or sets the comparer used to order the properties
            of dynamic objects when writing. The default is null,
            which will preserve the order the object properties
            were created with.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.MapTypeConverterOption">
            <summary>
            Sets type converter options on a member map.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.#ctor(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Creates a new instance using the given <see cref="T:CsvHelper12.Configuration.MemberMap"/>.
            </summary>
            <param name="memberMap">The member map the options are being applied to.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.CultureInfo(System.Globalization.CultureInfo)">
            <summary>
            The <see cref="M:CsvHelper12.Configuration.MapTypeConverterOption.CultureInfo(System.Globalization.CultureInfo)"/> used when type converting.
            This will override the global <see cref="P:CsvHelper12.Configuration.Configuration.CultureInfo"/>
            setting.
            </summary>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.DateTimeStyles(System.Globalization.DateTimeStyles)">
            <summary>
            The <see cref="M:CsvHelper12.Configuration.MapTypeConverterOption.DateTimeStyles(System.Globalization.DateTimeStyles)"/> to use when type converting.
            This is used when doing any <see cref="T:System.DateTime"/> conversions.
            </summary>
            <param name="dateTimeStyle">The date time style.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.NumberStyles(System.Globalization.NumberStyles)">
            <summary>
            The <see cref="M:CsvHelper12.Configuration.MapTypeConverterOption.NumberStyles(System.Globalization.NumberStyles)"/> to use when type converting.
            This is used when doing any number conversions.
            </summary>
            <param name="numberStyle"></param>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.Format(System.String[])">
            <summary>
            The string format to be used when type converting.
            </summary>
            <param name="formats">The format.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.BooleanValues(System.Boolean,System.Boolean,System.String[])">
            <summary>
            The string values used to represent a boolean when converting.
            </summary>
            <param name="isTrue">A value indicating whether true values or false values are being set.</param>
            <param name="clearValues">A value indication if the current values should be cleared before adding the new ones.</param>
            <param name="booleanValues">The string boolean values.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.NullValues(System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="nullValues">The values that represent null.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper12.Configuration.MapTypeConverterOption.NullValues(System.Boolean,System.String[])">
            <summary>
            The string values used to represent null when converting.
            </summary>
            <param name="clearValues">A value indication if the current values should be cleared before adding the new ones.</param>
            <param name="nullValues">The values that represent null.</param>
            <returns></returns>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberMap">
            <summary>
            Mapping info for a member to a CSV field.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMap.Data">
            <summary>
            Gets the member map data.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMap.TypeConverterOption">
            <summary>
            Type converter options.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.CreateGeneric(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Creates an instance of <see cref="T:CsvHelper12.Configuration.MemberMap"/> using the given Type and <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="classType">Type of the class the member being mapped belongs to.</param>
            <param name="member">The member being mapped.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Name(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The possible names of the CSV field.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.NameIndex(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="index">The index of the name.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Index(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
            <param name="indexEnd">The end index used when mapping to an <see cref="T:System.Collections.IEnumerable"/> member.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Ignore">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Ignore(System.Boolean)">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
            <param name="ignore">True to ignore, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Default(System.Object)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Default(System.String)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty. This value is not type checked
            and will use a <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> to convert
            the field. This could potentially have runtime errors.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Constant(System.Object)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="constantValue">The constant value.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper12.Configuration.MemberMap.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper12.Configuration.MemberMap.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <typeparam name="TConverter">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper12.Configuration.MemberMap.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap.Validate(System.Func{System.String,System.Boolean})">
            <summary>
            Specifies an expression to be used to validate a field when reading.
            </summary>
            <param name="validateExpression"></param>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberMapCollection">
            <summary>
            A collection that holds <see cref="T:CsvHelper12.Configuration.MemberMap"/>'s.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.MemberMapCollection"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.#ctor(System.Collections.Generic.IComparer{CsvHelper12.Configuration.MemberMap})">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.MemberMapCollection"/> class.
            </summary>
            <param name="comparer">The comparer to use when sorting the member maps.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.Add(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.AddRange(System.Collections.Generic.ICollection{CsvHelper12.Configuration.MemberMap})">
            <summary>
            Adds a range of items to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="collection">The collection to add.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.Contains(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.CopyTo(CsvHelper12.Configuration.MemberMap[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.Remove(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.IndexOf(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.Insert(System.Int32,CsvHelper12.Configuration.MemberMap)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
                            </param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The member is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Finds the <see cref="T:CsvHelper12.Configuration.MemberMap"/> using the given member expression.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> the member is on.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>The <see cref="T:CsvHelper12.Configuration.MemberMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.Find(System.Reflection.MemberInfo)">
            <summary>
            Finds the <see cref="T:CsvHelper12.Configuration.MemberMap"/> using the given member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:CsvHelper12.Configuration.MemberMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapCollection.AddMembers(CsvHelper12.Configuration.ClassMap)">
            <summary>
            Adds the members from the mapping. This will recursively
            traverse the mapping tree and add all members for
            reference maps.
            </summary>
            <param name="mapping">The mapping where the members are added from.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberMapComparer">
            <summary>
            Used to compare <see cref="T:CsvHelper12.Configuration.MemberMap"/>s.
            The order is by field index ascending. Any
            fields that don't have an index are pushed
            to the bottom.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero 
                            <paramref name="x"/> is less than <paramref name="y"/>. 
                                Zero 
                            <paramref name="x"/> equals <paramref name="y"/>. 
                                Greater than zero 
                            <paramref name="x"/> is greater than <paramref name="y"/>. 
            </returns>
            <param name="x">The first object to compare. 
                            </param><param name="y">The second object to compare. 
                            </param><exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.
                                -or- 
                            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapComparer.Compare(CsvHelper12.Configuration.MemberMap,CsvHelper12.Configuration.MemberMap)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero
                            <paramref name="x"/> is less than <paramref name="y"/>.
                                Zero
                            <paramref name="x"/> equals <paramref name="y"/>.
                                Greater than zero
                            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.
                            </param><param name="y">The second object to compare.
                            </param>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberMapData">
            <summary>
            The configured data for the member map.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.Names">
            <summary>
            Gets the list of column names.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.NameIndex">
            <summary>
            Gets or sets the index of the name.
            This is used if there are multiple
            columns with the same names.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.IsNameSet">
            <summary>
            Gets or sets a value indicating if the name was
            explicitly set. True if it was explicitly set,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.Index">
            <summary>
            Gets or sets the column index.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.IndexEnd">
            <summary>
            Gets or sets the index end. The Index end is used to specify a range for use
            with a collection member. Index is used as the start of the range, and IndexEnd
            is the end of the range.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.IsIndexSet">
            <summary>
            Gets or sets a value indicating if the index was
            explicitly set. True if it was explicitly set,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.TypeConverter">
            <summary>
            Gets or sets the type converter.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.TypeConverterOptions">
            <summary>
            Gets or sets the type converter options.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.Ignore">
            <summary>
            Gets or sets a value indicating whether the field should be ignored.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.Default">
            <summary>
            Gets or sets the default value used when a CSV field is empty.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.IsDefaultSet">
            <summary>
            Gets or sets a value indicating whether this instance is default value set.
            the default value was explicitly set. True if it was
            explicitly set, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.Constant">
            <summary>
            Gets or sets the constant value used for every record.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.IsConstantSet">
            <summary>
            Gets or sets a value indicating if a constant was explicitly set.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.ReadingConvertExpression">
            <summary>
            Gets or sets the expression used to convert data in the
            row to the member.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.WritingConvertExpression">
            <summary>
            Gets or sets the expression to be used to convert the object
            to a field.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.ValidateExpression">
            <summary>
            Gets or sets the expression use to validate a field.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberMapData.IsOptional">
            <summary>
            Gets or sets a value indicating if a field is optional.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMapData.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.MemberMapData"/> class.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberMap`2">
            <summary>
            Mapping info for a member to a CSV field.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Creates a new <see cref="T:CsvHelper12.Configuration.MemberMap"/> instance using the specified member.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Name(System.String[])">
            <summary>
            When reading, is used to get the field
            at the index of the name if there was a
            header specified. It will look for the
            first name match in the order listed.
            When writing, sets the name of the 
            field in the header record.
            The first name will be used.
            </summary>
            <param name="names">The possible names of the CSV field.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.NameIndex(System.Int32)">
            <summary>
            When reading, is used to get the 
            index of the name used when there 
            are multiple names that are the same.
            </summary>
            <param name="index">The index of the name.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Index(System.Int32,System.Int32)">
            <summary>
            When reading, is used to get the field at
            the given index. When writing, the fields
            will be written in the order of the field
            indexes.
            </summary>
            <param name="index">The index of the CSV field.</param>
            <param name="indexEnd">The end index used when mapping to an <see cref="T:System.Collections.IEnumerable"/> member.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Ignore">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Ignore(System.Boolean)">
            <summary>
            Ignore the member when reading and writing.
            If this member has already been mapped as a reference
            member, either by a class map, or by automapping, calling
            this method will not ignore all the child members down the
            tree that have already been mapped.
            </summary>
            <param name="ignore">True to ignore, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Default(`1)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Default(System.String)">
            <summary>
            The default value that will be used when reading when
            the CSV field is empty. This value is not type checked
            and will use a <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> to convert
            the field. This could potentially have runtime errors.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Constant(`1)">
            <summary>
            The constant value that will be used for every record when 
            reading and writing. This value will always be used no matter 
            what other mapping configurations are specified.
            </summary>
            <param name="constantValue">The constant value.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Specifies the <see cref="M:CsvHelper12.Configuration.MemberMap`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <param name="typeConverter">The TypeConverter to use.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.TypeConverter``1">
            <summary>
            Specifies the <see cref="M:CsvHelper12.Configuration.MemberMap`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use
            when converting the member to and from a CSV field.
            </summary>
            <typeparam name="TConverter">The <see cref="T:System.Type"/> of the 
            <see cref="M:CsvHelper12.Configuration.MemberMap`2.TypeConverter(CsvHelper12.TypeConversion.ITypeConverter)"/> to use.</typeparam>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.ConvertUsing(System.Func{CsvHelper12.IReaderRow,`1})">
            <summary>
            Specifies an expression to be used to convert data in the
            row to the member.
            </summary>
            <param name="convertExpression">The convert expression.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.ConvertUsing(System.Func{`0,System.String})">
            <summary>
            Specifies an expression to be used to convert the object
            to a field.
            </summary>
            <param name="convertExpression">The convert expression.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Optional">
            <summary>
            Ignore the member when reading if no matching field name can be found.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberMap`2.Validate(System.Func{System.String,System.Boolean})">
            <summary>
            Specifies an expression to be used to validate a field when reading.
            </summary>
            <param name="validateExpression"></param>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberNameCollection">
            <summary>
            A collection that holds member names.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberNameCollection.Item(System.Int32)">
            <summary>
            Gets the name at the given index. If a prefix is set,
            it will be prepended to the name.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberNameCollection.Prefix">
            <summary>
            Gets the prefix to use for each name.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberNameCollection.Names">
            <summary>
            Gets the raw list of names without
            the prefix being prepended.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberNameCollection.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberNameCollection.Add(System.String)">
            <summary>
            Adds the given name to the collection.
            </summary>
            <param name="name">The name to add.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberNameCollection.Clear">
            <summary>
            Clears all names from the collection.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberNameCollection.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of names to the collection.
            </summary>
            <param name="names">The range to add.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberNameCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberNameCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberReferenceMap">
            <summary>
            Mapping info for a reference member mapping to a class.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberReferenceMap.Data">
            <summary>
            Gets the member reference map data.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMap.#ctor(System.Reflection.MemberInfo,CsvHelper12.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.MemberReferenceMap"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="mapping">The <see cref="T:CsvHelper12.Configuration.ClassMap"/> to use for the reference map.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMap.Prefix(System.String)">
            <summary>
            Appends a prefix to the header of each field of the reference member.
            </summary>
            <param name="prefix">The prefix to be prepended to headers of each reference member.</param>
            <returns>The current <see cref="T:CsvHelper12.Configuration.MemberReferenceMap" /></returns>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMap.GetMaxIndex">
            <summary>
            Get the largest index for the
            members and references.
            </summary>
            <returns>The max index.</returns>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberReferenceMapCollection">
            <summary>
            A collection that holds <see cref="T:CsvHelper12.Configuration.MemberReferenceMap"/>'s.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberReferenceMapCollection.Count">
            <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberReferenceMapCollection.IsReadOnly">
            <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberReferenceMapCollection.Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <returns>The element at the specified index.</returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The member is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.Add(CsvHelper12.Configuration.MemberReferenceMap)">
            <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.Clear">
            <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.Contains(CsvHelper12.Configuration.MemberReferenceMap)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.CopyTo(CsvHelper12.Configuration.MemberReferenceMap[],System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.Remove(CsvHelper12.Configuration.MemberReferenceMap)">
            <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.IndexOf(CsvHelper12.Configuration.MemberReferenceMap)">
            <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
            <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.Insert(System.Int32,CsvHelper12.Configuration.MemberReferenceMap)">
            <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.RemoveAt(System.Int32)">
            <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Finds the <see cref="T:CsvHelper12.Configuration.MemberReferenceMap"/> using the given member expression.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> the member is on.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>The <see cref="T:CsvHelper12.Configuration.MemberReferenceMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapCollection.Find(System.Reflection.MemberInfo)">
            <summary>
            Finds the <see cref="T:CsvHelper12.Configuration.MemberReferenceMap"/> using the given member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:CsvHelper12.Configuration.MemberReferenceMap"/> for the given expression, or null if not found.</returns>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberReferenceMapData">
            <summary>
            The configuration data for the reference map.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberReferenceMapData.Prefix">
            <summary>
            Gets or sets the header prefix to use.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberReferenceMapData.Member">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.MemberReferenceMapData.Mapping">
            <summary>
            Gets the mapping this is a reference for.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.MemberReferenceMapData.#ctor(System.Reflection.MemberInfo,CsvHelper12.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.MemberReferenceMapData"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="mapping">The mapping this is a reference for.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.MemberTypes">
            <summary>
            Flags for the type of members that 
            can be used for auto mapping.
            </summary>
        </member>
        <member name="F:CsvHelper12.Configuration.MemberTypes.None">
            <summary>
            No members. This is not a valid value
            and will cause an exception if used.
            </summary>
        </member>
        <member name="F:CsvHelper12.Configuration.MemberTypes.Properties">
            <summary>
            Properties on a class.
            </summary>
        </member>
        <member name="F:CsvHelper12.Configuration.MemberTypes.Fields">
            <summary>
            Fields on a class.
            </summary>
        </member>
        <member name="T:CsvHelper12.Configuration.ParameterMap">
            <summary>
            Mapping for a constructor parameter.
            This may contain value type data, a constructor type map,
            or a reference map, depending on the type of the parameter.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMap.Data">
            <summary>
            Gets the parameter map data.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMap.ConstructorTypeMap">
            <summary>
            Gets or sets the map for a constructor type.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMap.ReferenceMap">
            <summary>
            Gets or sets the map for a reference type.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ParameterMap.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Creates an instance of <see cref="T:CsvHelper12.Configuration.ParameterMap"/> using
            the given information.
            </summary>
            <param name="parameter">The parameter being mapped.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.ParameterMapData">
            <summary>
            The constructor parameter data for the map.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMapData.Parameter">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMapData.TypeConverter">
            <summary>
            Gets or sets the type converter.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMapData.TypeConverterOptions">
            <summary>
            Gets or sets the type converter options.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMapData.Index">
            <summary>
            Gets or sets the column index.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterMapData.Name">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ParameterMapData.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.ParameterMapData"/> class.
            </summary>
            <param name="parameter">The constructor parameter.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.ParameterReferenceMap">
            <summary>
            Mapping info for a reference parameter mapping to a class.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterReferenceMap.Data">
            <summary>
            Gets the parameter reference map data.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ParameterReferenceMap.#ctor(System.Reflection.ParameterInfo,CsvHelper12.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.ParameterReferenceMap"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="mapping">The <see cref="T:CsvHelper12.Configuration.ClassMap"/> to use for the reference map.</param>
        </member>
        <member name="M:CsvHelper12.Configuration.ParameterReferenceMap.Prefix(System.String)">
            <summary>
            Appends a prefix to the header of each field of the reference parameter.
            </summary>
            <param name="prefix">The prefix to be prepended to headers of each reference parameter.</param>
            <returns>The current <see cref="T:CsvHelper12.Configuration.ParameterReferenceMap" /></returns>
        </member>
        <member name="M:CsvHelper12.Configuration.ParameterReferenceMap.GetMaxIndex">
            <summary>
            Get the largest index for the
            members and references.
            </summary>
            <returns>The max index.</returns>
        </member>
        <member name="T:CsvHelper12.Configuration.ParameterReferenceMapData">
            <summary>
            The configuration data for the reference map.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterReferenceMapData.Prefix">
            <summary>
            Gets or sets the header prefix to use.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterReferenceMapData.Parameter">
            <summary>
            Gets the <see cref="T:System.Reflection.ParameterInfo"/> that the data
            is associated with.
            </summary>
        </member>
        <member name="P:CsvHelper12.Configuration.ParameterReferenceMapData.Mapping">
            <summary>
            Gets the mapping this is a reference for.
            </summary>
        </member>
        <member name="M:CsvHelper12.Configuration.ParameterReferenceMapData.#ctor(System.Reflection.ParameterInfo,CsvHelper12.Configuration.ClassMap)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.Configuration.ParameterReferenceMapData"/> class.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="mapping">The mapping this is a reference for.</param>
        </member>
        <member name="T:CsvHelper12.Configuration.TrimOptions">
            <summary>
            Options for trimming of fields.
            </summary>
        </member>
        <member name="F:CsvHelper12.Configuration.TrimOptions.None">
            <summary>
            No trimming.
            </summary>
        </member>
        <member name="F:CsvHelper12.Configuration.TrimOptions.Trim">
            <summary>
            Trims the whitespace around a field.
            </summary>
        </member>
        <member name="F:CsvHelper12.Configuration.TrimOptions.InsideQuotes">
            <summary>
            Trims the whitespace inside of quotes around a field.
            </summary>
        </member>
        <member name="T:CsvHelper12.CsvDataReader">
            <summary>
            Provides a means of reading a CSV file forward-only by using CsvReader.
            </summary>
            <seealso cref="T:System.Data.IDataReader" />
        </member>
        <member name="P:CsvHelper12.CsvDataReader.Item(System.Int32)">
            <summary>
            Gets the column with the specified index.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="i">The i.</param>
            <returns></returns>
        </member>
        <member name="P:CsvHelper12.CsvDataReader.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:CsvHelper12.CsvDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.CsvDataReader"/> class.
            </summary>
            <param name="csv">The CSV.</param>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader"></see> Object.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The value of the column.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The actual number of bytes read.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The character value of the specified column.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>
            The actual number of characters read.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetData(System.Int32)">
            <summary>
            Returns an <see cref="T:System.Data.IDataReader"></see> for the specified column ordinal.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Data.IDataReader"></see> for the specified column ordinal.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The data type information for the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The date and time data value of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"></see> information corresponding to the type of <see cref="T:System.Object"></see> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"></see>.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Type"></see> information corresponding to the type of <see cref="T:System.Object"></see> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"></see>.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The GUID value of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>
            The index of the named field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"></see> that describes the column metadata of the <see cref="T:System.Data.IDataReader"></see>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"></see> that describes the column metadata.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The string value of the specified field.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Object"></see> which will contain the field value upon return.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.GetValues(System.Object[])">
            <summary>
            Populates an array of objects with the column values of the current record.
            </summary>
            <param name="values">An array of <see cref="T:System.Object"></see> to copy the attribute fields into.</param>
            <returns>
            The number of instances of <see cref="T:System.Object"></see> in the array.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            true if the specified field is set to null; otherwise, false.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
        </member>
        <member name="M:CsvHelper12.CsvDataReader.Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader"></see> to the next record.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
        </member>
        <member name="T:CsvHelper12.CsvFieldReader">
            <summary>
            Reads fields from a <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvFieldReader.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvFieldReader.IsBufferEmpty">
            <summary>
            Gets a value indicating if the buffer is empty.
            True if the buffer is empty, otherwise false.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.FillBuffer">
            <summary>
            Fills the buffer.
            </summary>
            <returns>True if there is more data left.
            False if all the data has been read.</returns>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.FillBufferAsync">
            <summary>
            Fills the buffer.
            </summary>
            <returns>True if there is more data left.
            False if all the data has been read.</returns>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.#ctor(System.IO.TextReader,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates a new <see cref="T:CsvHelper12.CsvFieldReader"/> using the given
            <see cref="T:System.IO.TextReader"/> and <see cref="T:CsvHelper12.Configuration.Configuration"/>.
            </summary>
            <param name="reader">The text reader.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.#ctor(System.IO.TextReader,CsvHelper12.Configuration.Configuration,System.Boolean)">
            <summary>
            Creates a new <see cref="T:CsvHelper12.CsvFieldReader"/> using the given
            <see cref="T:System.IO.TextReader"/>, <see cref="T:CsvHelper12.Configuration.Configuration"/>
            and leaveOpen flag.
            </summary>
            <param name="reader">The text reader.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">A value indicating if the <see cref="T:System.IO.TextReader"/> should be left open when disposing.</param>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.GetChar">
            <summary>
            Gets the next char as an <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.GetField">
            <summary>
            Gets the field. This will append any reading progress.
            </summary>
            <returns>The current field.</returns>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.AppendField">
            <summary>
            Appends the current reading progress.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.SetBufferPosition(System.Int32)">
            <summary>
            Move's the buffer position according to the given offset.
            </summary>
            <param name="offset">The offset to move the buffer.</param>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.SetFieldStart(System.Int32)">
            <summary>
            Sets the start of the field to the current buffer position.
            </summary>
            <param name="offset">An offset for the field start.
            The offset should be less than 1.</param>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.SetFieldEnd(System.Int32)">
            <summary>
            Sets the end of the field to the current buffer position.
            </summary>
            <param name="offset">An offset for the field start.
            The offset should be less than 1.</param>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.SetRawRecordStart(System.Int32)">
            <summary>
            Sets the raw record start to the current buffer position;
            </summary>
            <param name="offset">An offset for the raw record start.
            The offset should be less than 1.</param>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.SetRawRecordEnd(System.Int32)">
            <summary>
            Sets the raw record end to the current buffer position.
            </summary>
            <param name="offset">An offset for the raw record end.
            The offset should be less than 1.</param>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.CsvFieldReader.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="T:CsvHelper12.CsvHelperException">
            <summary>
            Represents errors that occur in CsvHelper12.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvHelperException.ReadingContext">
            <summary>
            Gets the context used when reading.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvHelperException.WritingContext">
            <summary>
            Gets the context used when writing.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor">
            <summary>
            Initializes a new instance of the CsvHelperException class.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CsvHelperException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CsvHelperException class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(CsvHelper12.ReadingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.CsvHelperException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(CsvHelper12.WritingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.CsvHelperException"/> class.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.CsvHelperException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(CsvHelper12.ReadingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.CsvHelperException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(CsvHelper12.WritingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.CsvHelperException"/> class
            with a specified error message.
            </summary>
            <param name="context">The writing context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.CsvHelperException.#ctor(CsvHelper12.WritingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.CsvHelperException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The writing context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.CsvParser">
            <summary>
            Parses a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvParser.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvParser.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvParser.FieldReader">
            <summary>
            Gets the <see cref="P:CsvHelper12.CsvParser.FieldReader"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvParser.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> with the CSV file data.</param>
        </member>
        <member name="M:CsvHelper12.CsvParser.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> with the CSV file data.</param>
            <param name="leaveOpen">true to leave the reader open after the CsvReader object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvParser.#ctor(System.IO.TextReader,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.TextReader"/> and <see cref="P:CsvHelper12.CsvParser.Configuration"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> with the CSV file data.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper12.CsvParser.#ctor(System.IO.TextReader,CsvHelper12.Configuration.Configuration,System.Boolean)">
            <summary>
            Creates a new parser using the given <see cref="T:System.IO.TextReader"/> and <see cref="P:CsvHelper12.CsvParser.Configuration"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> with the CSV file data.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">true to leave the reader open after the CsvReader object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvParser.#ctor(CsvHelper12.IFieldReader)">
            <summary>
            Creates a new parser using the given <see cref="P:CsvHelper12.CsvParser.FieldReader"/>.
            </summary>
            <param name="fieldReader">The field reader.</param>
        </member>
        <member name="M:CsvHelper12.CsvParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:String[]" /> of fields for the record read.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadAsync">
            <summary>
            Reads a record from the CSV file asynchronously.
            </summary>
            <returns>A <see cref="T:String[]" /> of fields for the record read.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.CsvParser.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadLine">
            <summary>
            Reads a line of the CSV file.
            </summary>
            <returns>The CSV line.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadLineAsync">
            <summary>
            Reads a line of the CSV file.
            </summary>
            <returns>The CSV line.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadBlankLine">
            <summary>
            Reads a blank line. This accounts for empty lines
            and commented out lines.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadBlankLineAsync">
            <summary>
            Reads a blank line. This accounts for empty lines
            and commented out lines.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadField">
            <summary>
            Reads until a delimiter or line ending is found.
            </summary>
            <returns>True if the end of the line was found, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadFieldAsync">
            <summary>
            Reads until a delimiter or line ending is found.
            </summary>
            <returns>True if the end of the line was found, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadQuotedField">
            <summary>
            Reads until the field is not quoted and a delimiter is found.
            </summary>
            <returns>True if the end of the line was found, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadQuotedFieldAsync">
            <summary>
            Reads until the field is not quoted and a delimiter is found.
            </summary>
            <returns>True if the end of the line was found, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadDelimiter">
            <summary>
            Reads until the delimiter is done.
            </summary>
            <returns>True if a delimiter was read. False if the sequence of
            chars ended up not being the delimiter.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadDelimiterAsync">
            <summary>
            Reads until the delimiter is done.
            </summary>
            <returns>True if a delimiter was read. False if the sequence of
            chars ended up not being the delimiter.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadLineEnding">
            <summary>
            Reads until the line ending is done.
            </summary>
            <returns>The field start offset.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadLineEndingAsync">
            <summary>
            Reads until the line ending is done.
            </summary>
            <returns>The field start offset.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadSpaces">
            <summary>
            Reads until a non-space character is found.
            </summary>
            <returns>True if there is more data to read.
            False if the end of the file has been reached.</returns>
        </member>
        <member name="M:CsvHelper12.CsvParser.ReadSpacesAsync">
            <summary>
            Reads until a non-space character is found.
            </summary>
            <returns>True if there is more data to read.
            False if the end of the file has been reached.</returns>
        </member>
        <member name="T:CsvHelper12.CsvReader">
            <summary>
            Reads data that was parsed from <see cref="T:CsvHelper12.IParser" />.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvReader.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvReader.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvReader.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvReader.#ctor(System.IO.TextReader)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The reader.</param>
            <param name="leaveOpen">true to leave the reader open after the CsvReader object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.#ctor(System.IO.TextReader,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader"/> and
            <see cref="!:CsvHelper.Configuration.Configuration"/> and <see cref="T:CsvHelper12.CsvParser"/> as the default parser.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.#ctor(System.IO.TextReader,CsvHelper12.Configuration.Configuration,System.Boolean)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">true to leave the reader open after the CsvReader object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.#ctor(CsvHelper12.IParser)">
            <summary>
            Creates a new CSV reader using the given <see cref="T:CsvHelper12.IParser" />.
            </summary>
            <param name="parser">The <see cref="T:CsvHelper12.IParser" /> used to parse the CSV file.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.ReadHeader">
            <summary>
            Reads the header record without reading the first row.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.ValidateHeader``1">
            <summary>
            Validates the header. A header is bad if all the mapped members don't match.
            If the header is not valid, a <see cref="T:CsvHelper12.ValidationException"/> will be thrown.
            </summary>
            <typeparam name="T">The type to validate the header against.</typeparam>
        </member>
        <member name="M:CsvHelper12.CsvReader.ValidateHeader(System.Type)">
            <summary>
            Validates the header. A header is bad if all the mapped members don't match.
            If the header is not valid, a <see cref="T:CsvHelper12.ValidationException"/> will be thrown.
            </summary>
            <param name="type">The type to validate the header against.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.ValidateHeader(CsvHelper12.Configuration.ClassMap)">
            <summary>
            Validates the header against the given map.
            </summary>
            <param name="map">The map to validate against.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.Read">
            <summary>
            Advances the reader to the next record. This will not read headers.
            You need to call <see cref="M:CsvHelper12.CsvReader.Read"/> then <see cref="M:CsvHelper12.CsvReader.ReadHeader"/> 
            for the headers to be read.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.ReadAsync">
            <summary>
            Advances the reader to the next record. This will not read headers.
            You need to call <see cref="M:CsvHelper12.CsvReader.ReadAsync"/> then <see cref="M:CsvHelper12.CsvReader.ReadHeader"/> 
            for the headers to be read.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="P:CsvHelper12.CsvReader.Item(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper12.CsvReader.Item(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper12.CsvReader.Item(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name and the index
            instance of that field. The index is used when there are
            multiple columns with the same header name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.Type,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.Type,System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.Type,System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.Type,System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.Type,System.String,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField(System.Type,System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``1(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``1(System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``1(System.String,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``1(System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``2(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``2(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetField``2(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField(System.Type,System.Int32,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField(System.Type,System.String,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField(System.Type,System.String,System.Int32,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField(System.Type,System.Int32,CsvHelper12.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField(System.Type,System.String,CsvHelper12.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField(System.Type,System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``1(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``1(System.Int32,CsvHelper12.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``1(System.String,CsvHelper12.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``1(System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``2(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``2(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.TryGetField``2(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetRecord``1">
            <summary>
            Gets the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetRecord``1(``0)">
            <summary>
            Get the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="anonymousTypeDefinition">The anonymous type definition to use for the record.</param>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetRecord(System.Type)">
            <summary>
            Gets the record.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the record.</param>
            <returns>The record.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetRecords``1">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetRecords``1(``0)">
            <summary>
            Gets all the records in the CSV file and converts
            each to <see cref="T:System.Type"/> T. The read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="anonymousTypeDefinition">The anonymous type definition to use for the records.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetRecords(System.Type)">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the record.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.EnumerateRecords``1(``0)">
            <summary>
            Enumerates the records hydrating the given record instance with row data.
            The record instance is re-used and not cleared on each enumeration. 
            This only works for streaming rows. If any methods are called on the projection
            that force the evaluation of the IEnumerable, such as ToList(), the entire list
            will contain the same instance of the record, which is the last row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to fill each enumeration.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetFieldIndex(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the index of the field at name if found.
            </summary>
            <param name="name">The name of the field to get the index for.</param>
            <param name="index">The index of the field if there are multiple fields with the same name.</param>
            <param name="isTryGet">A value indicating if the call was initiated from a TryGet.</param>
            <returns>The index of the field if found, otherwise -1.</returns>
            <exception cref="T:CsvHelper12.ReaderException">Thrown if there is no header record.</exception>
            <exception cref="T:CsvHelper12.MissingFieldException">Thrown if there isn't a field with name.</exception>
        </member>
        <member name="M:CsvHelper12.CsvReader.GetFieldIndex(System.String[],System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the index of the field at name if found.
            </summary>
            <param name="names">The possible names of the field to get the index for.</param>
            <param name="index">The index of the field if there are multiple fields with the same name.</param>
            <param name="isTryGet">A value indicating if the call was initiated from a TryGet.</param>
            <param name="isOptional">A value indicating if the call was initiated for an optional field.</param>
            <returns>The index of the field if found, otherwise -1.</returns>
            <exception cref="T:CsvHelper12.ReaderException">Thrown if there is no header record.</exception>
            <exception cref="T:CsvHelper12.MissingFieldException">Thrown if there isn't a field with name.</exception>
        </member>
        <member name="M:CsvHelper12.CsvReader.CanRead(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Determines if the member for the <see cref="T:CsvHelper12.Configuration.MemberMap"/>
            can be read.
            </summary>
            <param name="memberMap">The member map.</param>
            <returns>A value indicating of the member can be read. True if it can, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.CanRead(CsvHelper12.Configuration.MemberReferenceMap)">
            <summary>
            Determines if the member for the <see cref="T:CsvHelper12.Configuration.MemberReferenceMap"/>
            can be read.
            </summary>
            <param name="memberReferenceMap">The reference map.</param>
            <returns>A value indicating of the member can be read. True if it can, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.CsvReader.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper12.CsvReader.CheckHasBeenRead">
            <summary>
            Checks if the reader has been read yet.
            </summary>
            <exception cref="T:CsvHelper12.ReaderException" />
        </member>
        <member name="M:CsvHelper12.CsvReader.ParseNamedIndexes">
            <summary>
            Parses the named indexes from the header record.
            </summary>
        </member>
        <member name="T:CsvHelper12.CsvSerializer">
            <summary>
            Defines methods used to serialize data into a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvSerializer.Context">
            <summary>
            Gets the writing context.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvSerializer.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new serializer using the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the CSV file data to.</param>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
            Creates a new serializer using the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the CSV file data to.</param>
            <param name="leaveOpen">true to leave the reader open after the CsvReader object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.#ctor(System.IO.TextWriter,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates a new serializer using the given <see cref="T:System.IO.TextWriter"/>
            and <see cref="!:CsvHelper.Configuration.Configuration"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the CSV file data to.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.#ctor(System.IO.TextWriter,CsvHelper12.Configuration.Configuration,System.Boolean)">
            <summary>
            Creates a new serializer using the given <see cref="T:System.IO.TextWriter"/>
            and <see cref="!:CsvHelper.Configuration.Configuration"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.TextWriter"/> to write the CSV file data to.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">true to leave the reader open after the CsvReader object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.Write(System.String[])">
            <summary>
            Writes a record to the CSV file.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.WriteAsync(System.String[])">
            <summary>
            Writes a record to the CSV file.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.WriteLine">
            <summary>
            Writes a new line to the CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.WriteLineAsync">
            <summary>
            Writes a new line to the CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="M:CsvHelper12.CsvSerializer.SanitizeForInjection(System.String)">
            <summary>
            Sanitizes the field to prevent injection.
            </summary>
            <param name="field">The field to sanitize.</param>
        </member>
        <member name="T:CsvHelper12.CsvWriter">
            <summary>
            Used to write CSV files.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvWriter.Context">
            <summary>
            Gets the writing context.
            </summary>
        </member>
        <member name="P:CsvHelper12.CsvWriter.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.TextWriter" />.
            </summary>
            <param name="writer">The writer used to write the CSV file.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The writer used to write the CSV file.</param>
            <param name="leaveOpen">true to leave the writer open after the CsvWriter object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.#ctor(System.IO.TextWriter,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.StreamWriter"/> use to write the CSV file.</param>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.#ctor(System.IO.TextWriter,CsvHelper12.Configuration.Configuration,System.Boolean)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.IO.StreamWriter"/> use to write the CSV file.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">true to leave the writer open after the CsvWriter object is disposed, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.#ctor(CsvHelper12.ISerializer)">
            <summary>
            Creates a new CSV writer using the given <see cref="T:CsvHelper12.ISerializer"/>.
            </summary>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteConvertedField(System.String)">
            <summary>
            Writes a field that has already been converted to a
            <see cref="T:System.String"/> from an <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            If the field is null, it won't get written. A type converter
            will always return a string, even if field is null. If the
            converter returns a null, it means that the converter has already
            written data, and the returned value should not be written.
            </summary>
            <param name="field">The converted field to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file. The field
            may get quotes added to it.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteField(System.String,System.Boolean)">
            <summary>
            Writes the field to the CSV file. This will
            ignore any need to quote and ignore
            <see cref="!:CsvHelper.Configuration.Configuration.ShouldQuote"/>
            and just quote based on the shouldQuote
            parameter.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
            <param name="shouldQuote">True to quote the field, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteField``1(``0,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteField``2(``0)">
            <summary>
            Writes the field to the CSV file
            using the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <typeparam name="TConverter">The type of the converter.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.Flush">
            <summary>
            Serializes the row to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvWriter.FlushAsync">
            <summary>
            Serializes the row to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvWriter.NextRecord">
            <summary>
            Ends writing of the current record and starts a new record.
            This automatically flushes the writer.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvWriter.NextRecordAsync">
            <summary>
            Ends writing of the current record and starts a new record.
            This automatically flushes the writer.
            </summary>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteComment(System.String)">
            <summary>
            Writes a comment.
            </summary>
            <param name="comment">The comment to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteHeader``1">
            <summary>
            Writes the header record from the given members.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteHeader(System.Type)">
            <summary>
            Writes the header record from the given members.
            </summary>
            <param name="type">The type of the record.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteDynamicHeader(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            Writes the header record for the given dynamic object.
            </summary>
            <param name="record">The dynamic record to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteRecord``1(``0)">
            <summary>
            Writes the record to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteRecords(System.Collections.IEnumerable)">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">Record type.</typeparam>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.CanWrite(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Checks if the member can be written.
            </summary>
            <param name="memberMap">The member map that we are checking.</param>
            <returns>A value indicating if the member can be written.
            True if the member can be written, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.CsvWriter.GetTypeForRecord``1(``0)">
            <summary>
            Gets the type for the record. If the generic type
            is an object due to boxing, it will call GetType()
            on the record itself.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper12.CsvWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.CsvWriter.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.DynamicRecordCreator">
            <summary>
            Creates dynamic records.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.DynamicRecordCreator.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.DynamicRecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.DynamicRecordCreator.CreateDynamicRecord">
            <summary>
            Creates a dynamic record of the current reader row.
            </summary>
        </member>
        <member name="T:CsvHelper12.Expressions.DynamicRecordWriter">
            <summary>
            Write dynamic records.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.DynamicRecordWriter.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.DynamicRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.ExpandoObjectRecordWriter">
            <summary>
            Writes expando objects.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpandoObjectRecordWriter.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpandoObjectRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.ExpressionManager">
            <summary>
            Manages expression creation.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpressionManager.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpressionManager.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpressionManager.CreateConstructorArgumentExpressionsForMapping(CsvHelper12.Configuration.ClassMap,System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            Creates the constructor arguments used to create a type.
            </summary>
            <param name="map">The mapping to create the arguments for.</param>
            <param name="argumentExpressions">The arguments that will be added to the mapping.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpressionManager.CreateMemberAssignmentsForMapping(CsvHelper12.Configuration.ClassMap,System.Collections.Generic.List{System.Linq.Expressions.MemberAssignment})">
            <summary>
            Creates the member assignments for the given <see cref="T:CsvHelper12.Configuration.ClassMap"/>.
            </summary>
            <param name="mapping">The mapping to create the assignments for.</param>
            <param name="assignments">The assignments that will be added to from the mapping.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpressionManager.CreateGetFieldExpression(CsvHelper12.Configuration.MemberMap)">
            <summary>
            Creates an expression the represents getting the field for the given
            member and converting it to the member's type.
            </summary>
            <param name="memberMap">The mapping for the member.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpressionManager.CreateGetMemberExpression(System.Linq.Expressions.Expression,CsvHelper12.Configuration.ClassMap,CsvHelper12.Configuration.MemberMap)">
            <summary>
            Creates a member expression for the given member on the record.
            This will recursively traverse the mapping to find the member
            and create a safe member accessor for each level as it goes.
            </summary>
            <param name="recordExpression">The current member expression.</param>
            <param name="mapping">The mapping to look for the member to map on.</param>
            <param name="memberMap">The member map to look for on the mapping.</param>
            <returns>An Expression to access the given member.</returns>
        </member>
        <member name="M:CsvHelper12.Expressions.ExpressionManager.CreateInstanceAndAssignMembers(System.Type,System.Collections.Generic.List{System.Linq.Expressions.MemberAssignment})">
            <summary>
            Creates an instance of the given type using <see cref="M:CsvHelper12.ReflectionHelper.CreateInstance(System.Type,System.Object[])"/> (in turn using the ObjectResolver), then assigns
            the given member assignments to that instance.
            </summary>
            <param name="recordType">The type of the record we're creating.</param>
            <param name="assignments">The member assignments that will be assigned to the created instance.</param>
            <returns>A <see cref="T:System.Linq.Expressions.BlockExpression"/> representing the instance creation and assignments.</returns>
        </member>
        <member name="T:CsvHelper12.Expressions.ObjectRecordCreator">
            <summary>
            Creates objects.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.ObjectRecordCreator.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:CsvHelper12.Expressions.ObjectRecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.ObjectRecordWriter">
            <summary>
            Writes objects.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.ObjectRecordWriter.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.ObjectRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.PrimitiveRecordCreator">
            <summary>
            Creates primitive records.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.PrimitiveRecordCreator.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.PrimitiveRecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.PrimitiveRecordWriter">
            <summary>
            Writes primitives.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.PrimitiveRecordWriter.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.PrimitiveRecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.RecordCreator">
            <summary>
            Base implementation for classes that create records.
            </summary>
        </member>
        <member name="P:CsvHelper12.Expressions.RecordCreator.Reader">
            <summary>
            The reader.
            </summary>
        </member>
        <member name="P:CsvHelper12.Expressions.RecordCreator.ExpressionManager">
            <summary>
            The expression manager.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordCreator.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordCreator.Create``1">
            <summary>
            Create a record of the given type using the current row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordCreator.Create(System.Type)">
            <summary>
            Create a record of the given type using the current row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordCreator.GetCreateRecordDelegate(System.Type)">
            <summary>
            Gets the delegate to create a record for the given record type. 
            If the delegate doesn't exist, one will be created and cached.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordCreator.CreateCreateRecordDelegate(System.Type)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Func`1"/>
            that will create a record of the given type using the current
            reader row.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.RecordCreatorFactory">
            <summary>
            Factory to create record creators.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordCreatorFactory.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordCreatorFactory.MakeRecordCreator(System.Type)">
            <summary>
            Creates a record creator for the given record type.
            </summary>
            <param name="recordType">The record type.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.RecordHydrator">
            <summary>
            Hydrates members of an existing record.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordHydrator.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Creates a new instance using the given reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordHydrator.Hydrate``1(``0)">
            <summary>
            Hydrates members of the given record using the current reader row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordHydrator.GetHydrateRecordAction``1">
            <summary>
            Gets the action delegate used to hydrate a custom class object's members with data from the reader.
            </summary>
            <typeparam name="T">The record type.</typeparam>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordHydrator.CreateHydrateRecordAction``1">
            <summary>
            Creates the action delegate used to hydrate a record's members with data from the reader.
            </summary>
            <typeparam name="T">The record type.</typeparam>
        </member>
        <member name="T:CsvHelper12.Expressions.RecordManager">
            <summary>
            Manages record manipulation.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordManager.#ctor(CsvHelper12.CsvReader)">
            <summary>
            Initializes a new instance using the given reader.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordManager.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordManager.Create``1">
            <summary>
            Creates a record of the given type using the current reader row.
            </summary>
            <typeparam name="T">The type of record to create.</typeparam>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordManager.Create(System.Type)">
            <summary>
            Creates a record of the given type using the current reader row.
            </summary>
            <param name="recordType">The type of record to create.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordManager.Hydrate``1(``0)">
            <summary>
            Hydrates the given record using the current reader row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to hydrate.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordManager.Write``1(``0)">
            <summary>
            Writes the given record to the current writer row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper12.Expressions.RecordWriter">
            <summary>
            Base implementation for classes that write records.
            </summary>
        </member>
        <member name="P:CsvHelper12.Expressions.RecordWriter.Writer">
            <summary>
            Gets the writer.
            </summary>
        </member>
        <member name="P:CsvHelper12.Expressions.RecordWriter.ExpressionManager">
            <summary>
            The expression manager.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordWriter.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordWriter.Write``1(``0)">
            <summary>
            Writes the record to the current row.
            </summary>
            <typeparam name="T">Type of the record.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordWriter.GetWriteDelegate``1(``0)">
            <summary>
            Gets the delegate to write the given record. 
            If the delegate doesn't exist, one will be created and cached.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordWriter.CreateWriteDelegate``1(``0)">
            <summary>
            Creates a <see cref="T:System.Delegate"/> of type <see cref="T:System.Action`1"/>
            that will write the given record using the current writer row.
            </summary>
            <typeparam name="T">The record type.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordWriter.CombineDelegates``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Combines the delegates into a single multicast delegate.
            This is needed because Silverlight doesn't have the
            Delegate.Combine( params Delegate[] ) overload.
            </summary>
            <param name="delegates">The delegates to combine.</param>
            <returns>A multicast delegate combined from the given delegates.</returns>
        </member>
        <member name="T:CsvHelper12.Expressions.RecordWriterFactory">
            <summary>
            Factory to create record writers.
            </summary>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordWriterFactory.#ctor(CsvHelper12.CsvWriter)">
            <summary>
            Initializes a new instance using the given writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CsvHelper12.Expressions.RecordWriterFactory.MakeRecordWriter``1(``0)">
            <summary>
            Creates a new record writer for the given record.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record.</param>
        </member>
        <member name="T:CsvHelper12.Factory">
            <summary>
            Creates CsvHelper12 classes.
            </summary>
        </member>
        <member name="M:CsvHelper12.Factory.CreateParser(System.IO.TextReader,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="configuration">The configuration to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper12.Factory.CreateParser(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper12.Factory.CreateReader(System.IO.TextReader,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="configuration">The configuration to use for the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper12.Factory.CreateReader(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper12.Factory.CreateReader(CsvHelper12.IParser)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IReader"/>.
            </summary>
            <param name="parser">The parser used to create the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper12.Factory.CreateWriter(System.IO.TextWriter,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="configuration">The configuration to use for the writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper12.Factory.CreateWriter(System.IO.TextWriter)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper12.Factory.CreateClassMapBuilder``1">
            <summary>
            Access point for fluent interface to dynamically build a <see cref="T:CsvHelper12.Configuration.ClassMap`1"/>
            </summary>
            <typeparam name="T">Type you will be making a class map for</typeparam>
            <returns>Options to further configure the <see cref="T:CsvHelper12.Configuration.ClassMap`1"/></returns>
        </member>
        <member name="T:CsvHelper12.FieldValidationException">
            <summary>
            Represents a user supplied field validation failure.
            </summary>
        </member>
        <member name="P:CsvHelper12.FieldValidationException.Field">
            <summary>
            Gets the field that failed validation.
            </summary>
        </member>
        <member name="M:CsvHelper12.FieldValidationException.#ctor(CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class.
            </summary>
            <param name="context">The reading context.</param>
            <param name="field">The field that failed validation.</param>
        </member>
        <member name="M:CsvHelper12.FieldValidationException.#ctor(CsvHelper12.ReadingContext,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="field">The field that failed validation.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.FieldValidationException.#ctor(CsvHelper12.ReadingContext,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="field">The field that failed validation.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.HeaderValidationException">
            <summary>
            Represents a header validation failure.
            </summary>
        </member>
        <member name="P:CsvHelper12.HeaderValidationException.HeaderNames">
            <summary>
            Gets the header names that are mapped to a CSV field that couldn't be found.
            </summary>
        </member>
        <member name="P:CsvHelper12.HeaderValidationException.HeaderNameIndex">
            <summary>
            Gets the header name index that is mapped to a CSV field that couldn't be found.
            The index is used when a CSV header has multiple header names with the same value.
            </summary>
        </member>
        <member name="M:CsvHelper12.HeaderValidationException.#ctor(CsvHelper12.ReadingContext,System.String[],System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class.
            </summary>
            <param name="context">The reading context.</param>
            <param name="headerNames">The header names that are mapped to a CSV field that couldn't be found.</param>
            <param name="headerNameIndex">The header name index that is mapped to a CSV field that couldn't be found.</param>
        </member>
        <member name="M:CsvHelper12.HeaderValidationException.#ctor(CsvHelper12.ReadingContext,System.String[],System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="headerNames">The header names that are mapped to a CSV field that couldn't be found.</param>
            <param name="headerNameIndex">The header name index that is mapped to a CSV field that couldn't be found.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.HeaderValidationException.#ctor(CsvHelper12.ReadingContext,System.String[],System.Nullable{System.Int32},System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="headerNames">The header names that are mapped to a CSV field that couldn't be found.</param>
            <param name="headerNameIndex">The header name index that is mapped to a CSV field that couldn't be found.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.IFactory">
            <summary>
            Defines methods used to create
            CsvHelper12 classes.
            </summary>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateParser(System.IO.TextReader,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <param name="configuration">The configuration to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateParser(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IParser"/>.
            </summary>
            <param name="reader">The text reader to use for the csv parser.</param>
            <returns>The created parser.</returns>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateReader(System.IO.TextReader,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <param name="configuration">The configuration to use for the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateReader(System.IO.TextReader)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IReader"/>.
            </summary>
            <param name="reader">The text reader to use for the csv reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateReader(CsvHelper12.IParser)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IReader"/>.
            </summary>
            <param name="parser">The parser used to create the reader.</param>
            <returns>The created reader.</returns>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateWriter(System.IO.TextWriter,CsvHelper12.Configuration.Configuration)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <param name="configuration">The configuration to use for the writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateWriter(System.IO.TextWriter)">
            <summary>
            Creates an <see cref="T:CsvHelper12.IWriter"/>.
            </summary>
            <param name="writer">The text writer to use for the csv writer.</param>
            <returns>The created writer.</returns>
        </member>
        <member name="M:CsvHelper12.IFactory.CreateClassMapBuilder``1">
            <summary>
            Provides a fluent interface for dynamically creating <see cref="T:CsvHelper12.Configuration.ClassMap`1"/>s 
            </summary>
            <typeparam name="T">Type of class to map</typeparam>
            <returns>Next available options</returns>
        </member>
        <member name="T:CsvHelper12.IFieldReader">
            <summary>
            Defines methods used to read a field in a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper12.IFieldReader.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper12.IFieldReader.IsBufferEmpty">
            <summary>
            Gets a value indicating if the buffer is empty.
            True if the buffer is empty, otherwise false.
            </summary>
        </member>
        <member name="M:CsvHelper12.IFieldReader.FillBuffer">
            <summary>
            Fills the buffer.
            </summary>
            <returns>True if there is more data left.
            False if all the data has been read.</returns>
        </member>
        <member name="M:CsvHelper12.IFieldReader.FillBufferAsync">
            <summary>
            Fills the buffer asynchronously.
            </summary>
            <returns>True if there is more data left.
            False if all the data has been read.</returns>
        </member>
        <member name="M:CsvHelper12.IFieldReader.GetChar">
            <summary>
            Gets the next char as an <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.IFieldReader.GetField">
            <summary>
            Gets the field. This will append any reading progress.
            </summary>
            <returns>The current field.</returns>
        </member>
        <member name="M:CsvHelper12.IFieldReader.AppendField">
            <summary>
            Appends the current reading progress.
            </summary>
        </member>
        <member name="M:CsvHelper12.IFieldReader.SetBufferPosition(System.Int32)">
            <summary>
            Move's the buffer position according to the given offset.
            </summary>
            <param name="offset">The offset to move the buffer.</param>
        </member>
        <member name="M:CsvHelper12.IFieldReader.SetFieldStart(System.Int32)">
            <summary>
            Sets the start of the field to the current buffer position.
            </summary>
            <param name="offset">An offset for the field start.
            The offset should be less than 1.</param>
        </member>
        <member name="M:CsvHelper12.IFieldReader.SetFieldEnd(System.Int32)">
            <summary>
            Sets the end of the field to the current buffer position.
            </summary>
            <param name="offset">An offset for the field start.
            The offset should be less than 1.</param>
        </member>
        <member name="M:CsvHelper12.IFieldReader.SetRawRecordStart(System.Int32)">
            <summary>
            Sets the raw record start to the current buffer position;
            </summary>
            <param name="offset">An offset for the raw record start.
            The offset should be less than 1.</param>
        </member>
        <member name="M:CsvHelper12.IFieldReader.SetRawRecordEnd(System.Int32)">
            <summary>
            Sets the raw record end to the current buffer position.
            </summary>
            <param name="offset">An offset for the raw record end.
            The offset should be less than 1.</param>
        </member>
        <member name="T:CsvHelper12.IObjectResolver">
            <summary>
            Defines the functionality of a class that creates objects
            from a given type.
            </summary>
        </member>
        <member name="P:CsvHelper12.IObjectResolver.UseFallback">
            <summary>
            A value indicating if the resolver's <see cref="P:CsvHelper12.IObjectResolver.CanResolve"/>
            returns false that an object will still be created using
            CsvHelper12's object creation. True to fallback, otherwise false.
            Default value is true.
            </summary>
        </member>
        <member name="P:CsvHelper12.IObjectResolver.CanResolve">
            <summary>
            A value indicating if the resolver is able to resolve
            the given type. True if the type can be resolved,
            otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.IObjectResolver.ResolveFunction">
            <summary>
            The function that creates an object from a given type.
            </summary>
        </member>
        <member name="M:CsvHelper12.IObjectResolver.Resolve(System.Type,System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper12.IObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper12.IObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper12's default object creation. If <see cref="P:CsvHelper12.IObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <param name="type">The type to create an instance from. The created object
            may not be the same type as the given type.</param>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="M:CsvHelper12.IObjectResolver.Resolve``1(System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper12.IObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper12.IObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper12's default object creation. If <see cref="P:CsvHelper12.IObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <typeparam name="T">The type to create an instance from. The created object
            may not be the same type as the given type.</typeparam>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="T:CsvHelper12.IParser">
            <summary>
            Defines methods used the parse a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper12.IParser.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper12.IParser.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.IParser.FieldReader">
            <summary>
            Gets the <see cref="P:CsvHelper12.IParser.FieldReader"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.IParser.Read">
            <summary>
            Reads a record from the CSV file.
            </summary>
            <returns>A <see cref="T:String[]" /> of fields for the record read.</returns>
        </member>
        <member name="M:CsvHelper12.IParser.ReadAsync">
            <summary>
            Reads a record from the CSV file asynchronously.
            </summary>
            <returns>A <see cref="T:String[]" /> of fields for the record read.</returns>
        </member>
        <member name="T:CsvHelper12.IReader">
            <summary>
            Defines methods used to read parsed data
            from a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper12.IReader.Parser">
            <summary>
            Gets the parser.
            </summary>
        </member>
        <member name="M:CsvHelper12.IReader.ReadHeader">
            <summary>
            Reads the header record without reading the first row.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.IReader.Read">
            <summary>
            Advances the reader to the next record. This will not read headers.
            You need to call <see cref="M:CsvHelper12.IReader.Read"/> then <see cref="M:CsvHelper12.IReader.ReadHeader"/> 
            for the headers to be read.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.IReader.ReadAsync">
            <summary>
            Advances the reader to the next record. This will not read headers.
            You need to call <see cref="M:CsvHelper12.IReader.ReadAsync"/> then <see cref="M:CsvHelper12.IReader.ReadHeader"/> 
            for the headers to be read.
            </summary>
            <returns>True if there are more records, otherwise false.</returns>
        </member>
        <member name="M:CsvHelper12.IReader.GetRecords``1">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IList`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper12.IReader.GetRecords``1(``0)">
            <summary>
            Gets all the records in the CSV file and converts
            each to <see cref="T:System.Type"/> T. The read method
            should not be used when using this.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="anonymousTypeDefinition">The anonymous type definition to use for the records.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of records.</returns>
        </member>
        <member name="M:CsvHelper12.IReader.GetRecords(System.Type)">
            <summary>
            Gets all the records in the CSV file and
            converts each to <see cref="T:System.Type"/> T. The Read method
            should not be used when using this.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the record.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of records.</returns>
        </member>
        <member name="M:CsvHelper12.IReader.EnumerateRecords``1(``0)">
            <summary>
            Enumerates the records hydrating the given record instance with row data.
            The record instance is re-used and not cleared on each enumeration. 
            This only works for streaming rows. If any methods are called on the projection
            that force the evaluation of the IEnumerable, such as ToList(), the entire list
            will contain the same instance of the record, which is the last row.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to fill each enumeration.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of records.</returns>
        </member>
        <member name="T:CsvHelper12.IReaderRow">
            <summary>
            Defines methods used to read parsed data
            from a CSV file row.
            </summary>
        </member>
        <member name="P:CsvHelper12.IReaderRow.Context">
            <summary>
            Gets the reading context.
            </summary>
        </member>
        <member name="P:CsvHelper12.IReaderRow.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.IReaderRow.Item(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper12.IReaderRow.Item(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="P:CsvHelper12.IReaderRow.Item(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.Int32)">
            <summary>
            Gets the raw field at position (column) index.
            </summary>
            <param name="index">The zero based index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.String)">
            <summary>
            Gets the raw field at position (column) name.
            </summary>
            <param name="name">The named index of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.String,System.Int32)">
            <summary>
            Gets the raw field at position (column) name and the index
            instance of that field. The index is used when there are
            multiple columns with the same header name.
            </summary>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The raw field.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.Type,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.Type,System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.Type,System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.Type,System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="index">The index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.Type,System.String,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField(System.Type,System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Object"/> using
            the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The type of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Object"/>.</param>
            <returns>The field converted to <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``1(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``1(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``1(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns></returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``1(System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``1(System.String,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``1(System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``2(System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``2(System.String)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name using
            the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetField``2(System.String,System.Int32)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <returns>The field converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField(System.Type,System.Int32,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField(System.Type,System.String,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField(System.Type,System.String,System.Int32,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField(System.Type,System.Int32,CsvHelper12.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField(System.Type,System.String,CsvHelper12.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField(System.Type,System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter,System.Object@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the field.</param>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``1(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to type T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``1(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``1(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position 
            (column) name and the index instance of that field. The index 
            is used when there are multiple columns with the same header name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``1(System.Int32,CsvHelper12.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``1(System.String,CsvHelper12.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``1(System.String,System.Int32,CsvHelper12.TypeConversion.ITypeConverter,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="converter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``2(System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) index
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter" />.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="index">The zero based index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``2(System.String,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.TryGetField``2(System.String,System.Int32,``0@)">
            <summary>
            Gets the field converted to <see cref="T:System.Type"/> T at position (column) name
            using the specified <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the field.</typeparam>
            <typeparam name="TConverter">The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> used to convert the field to <see cref="T:System.Type"/> T.</typeparam>
            <param name="name">The named index of the field.</param>
            <param name="index">The zero based index of the instance of the field.</param>
            <param name="field">The field converted to <see cref="T:System.Type"/> T.</param>
            <returns>A value indicating if the get was successful.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetRecord``1">
            <summary>
            Gets the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetRecord``1(``0)">
            <summary>
            Get the record converted into <see cref="T:System.Type"/> T.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the record.</typeparam>
            <param name="anonymousTypeDefinition">The anonymous type definition to use for the record.</param>
            <returns>The record converted to <see cref="T:System.Type"/> T.</returns>
        </member>
        <member name="M:CsvHelper12.IReaderRow.GetRecord(System.Type)">
            <summary>
            Gets the record.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of the record.</param>
            <returns>The record.</returns>
        </member>
        <member name="T:CsvHelper12.ISerializer">
            <summary>
            Defines methods used to serialize data into a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper12.ISerializer.Context">
            <summary>
            Gets the writing context.
            </summary>
        </member>
        <member name="P:CsvHelper12.ISerializer.Configuration">
            <summary>
            Gets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper12.ISerializer.Write(System.String[])">
            <summary>
            Writes a record to the CSV file.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper12.ISerializer.WriteAsync(System.String[])">
            <summary>
            Writes a record to the CSV file.
            </summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:CsvHelper12.ISerializer.WriteLine">
            <summary>
            Writes a new line to the CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.ISerializer.WriteLineAsync">
            <summary>
            Writes a new line to the CSV file.
            </summary>
        </member>
        <member name="T:CsvHelper12.IWriter">
            <summary>
            Defines methods used to write to a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.IWriter.Flush">
            <summary>
            Serializes the row to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.IWriter.FlushAsync">
            <summary>
            Serializes the row to the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.IWriter.NextRecord">
            <summary>
            Ends writing of the current record and starts a new record.
            This automatically flushes the writer.
            </summary>
        </member>
        <member name="M:CsvHelper12.IWriter.NextRecordAsync">
            <summary>
            Ends writing of the current record and starts a new record.
            This automatically flushes the writer.
            </summary>
        </member>
        <member name="M:CsvHelper12.IWriter.WriteRecords(System.Collections.IEnumerable)">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="M:CsvHelper12.IWriter.WriteRecords``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Writes the list of records to the CSV file.
            </summary>
            <typeparam name="T">Record type.</typeparam>
            <param name="records">The list of records to write.</param>
        </member>
        <member name="T:CsvHelper12.IWriterRow">
            <summary>
            Defines methods used to write a CSV row.
            </summary>
        </member>
        <member name="P:CsvHelper12.IWriterRow.Context">
            <summary>
            Gets the writing context.
            </summary>
        </member>
        <member name="P:CsvHelper12.IWriterRow.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteConvertedField(System.String)">
            <summary>
            Writes a field that has already been converted to a
            <see cref="T:System.String"/> from an <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            If the field is null, it won't get written. A type converter 
            will always return a string, even if field is null. If the 
            converter returns a null, it means that the converter has already
            written data, and the returned value should not be written.
            </summary>
            <param name="field">The converted field to write.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteField(System.String)">
            <summary>
            Writes the field to the CSV file. The field
            may get quotes added to it.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteField(System.String,System.Boolean)">
            <summary>
            Writes the field to the CSV file. This will
            ignore any need to quote and ignore
            <see cref="!:CsvHelper.Configuration.Configuration.ShouldQuote"/>
            and just quote based on the shouldQuote
            parameter.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <param name="field">The field to write.</param>
            <param name="shouldQuote">True to quote the field, otherwise false.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteField``1(``0)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteField``1(``0,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Writes the field to the CSV file.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to write.</param>
            <param name="converter">The converter used to convert the field into a string.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteField``2(``0)">
            <summary>
            Writes the field to the CSV file
            using the given <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>.
            When all fields are written for a record,
            <see cref="M:CsvHelper12.IWriter.NextRecord" /> must be called
            to complete writing of the current record.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <typeparam name="TConverter">The type of the converter.</typeparam>
            <param name="field">The field to write.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteComment(System.String)">
            <summary>
            Writes a comment.
            </summary>
            <param name="comment">The comment to write.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteHeader``1">
            <summary>
            Writes the header record from the given members.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteHeader(System.Type)">
            <summary>
            Writes the header record from the given members.
            </summary>
            <param name="type">The type of the record.</param>
        </member>
        <member name="M:CsvHelper12.IWriterRow.WriteRecord``1(``0)">
            <summary>
            Writes the record to the CSV file.
            </summary>
            <typeparam name="T">The type of the record.</typeparam>
            <param name="record">The record to write.</param>
        </member>
        <member name="T:CsvHelper12.MissingFieldException">
            <summary>
            Represents an error caused because a field is missing
            in the header while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.MissingFieldException.#ctor(CsvHelper12.ReadingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.MissingFieldException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper12.MissingFieldException.#ctor(CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.MissingFieldException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.MissingFieldException.#ctor(CsvHelper12.ReadingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.MissingFieldException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.ObjectResolver">
            <summary>
            Creates objects from a given type.
            </summary>
        </member>
        <member name="P:CsvHelper12.ObjectResolver.Current">
            <summary>
            Gets or sets the current resolver.
            </summary>
        </member>
        <member name="P:CsvHelper12.ObjectResolver.UseFallback">
            <summary>
            A value indicating if the resolver's <see cref="P:CsvHelper12.ObjectResolver.CanResolve"/>
            returns false that an object will still be created using
            CsvHelper12's object creation. True to fallback, otherwise false.
            Default value is true.
            </summary>
        </member>
        <member name="P:CsvHelper12.ObjectResolver.CanResolve">
            <summary>
            A function that returns a value indicating if the resolver 
            is able to resolve the given type. True if the type can be 
            resolved, otherwise false.
            </summary>
        </member>
        <member name="P:CsvHelper12.ObjectResolver.ResolveFunction">
            <summary>
            The function that creates an object from a given type.
            </summary>
        </member>
        <member name="M:CsvHelper12.ObjectResolver.#ctor">
            <summary>
            Creates an instance of the object resolver using default values.
            </summary>
        </member>
        <member name="M:CsvHelper12.ObjectResolver.#ctor(System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Object[],System.Object},System.Boolean)">
            <summary>
            Creates an instance of the object resolver using the given can create function
            and create function.
            </summary>
            <param name="canResolve">A function that returns a value indicating if the resolver
            is able to resolve the given type. True if the type can be
            resolved, otherwise false.</param>
            <param name="resolveFunction">The function that creates an object from a given type.</param>
            <param name="useFallback">A value indicating if the resolver's <see cref="P:CsvHelper12.ObjectResolver.CanResolve"/>
            returns false that an object will still be created using
            CsvHelper12's object creation. True to fallback, otherwise false.
            Default value is true.</param>
        </member>
        <member name="M:CsvHelper12.ObjectResolver.Resolve(System.Type,System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper12.ObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper12.ObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper12's default object creation. If <see cref="P:CsvHelper12.ObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <param name="type">The type to create an instance from. The created object
            may not be the same type as the given type.</param>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="M:CsvHelper12.ObjectResolver.Resolve``1(System.Object[])">
            <summary>
            Creates an object from the given type using the <see cref="P:CsvHelper12.ObjectResolver.ResolveFunction"/>
            function. If <see cref="P:CsvHelper12.ObjectResolver.CanResolve"/> is false, the object will be
            created using CsvHelper12's default object creation. If <see cref="P:CsvHelper12.ObjectResolver.UseFallback"/>
            is false, an exception is thrown.
            </summary>
            <typeparam name="T">The type to create an instance from. The created object
            may not be the same type as the given type.</typeparam>
            <param name="constructorArgs">Constructor arguments used to create the type.</param>
        </member>
        <member name="T:CsvHelper12.ParserException">
            <summary>
            Represents errors that occur while parsing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.ParserException.#ctor(CsvHelper12.ReadingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ParserException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper12.ParserException.#ctor(CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ParserException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.ParserException.#ctor(CsvHelper12.ReadingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ParserException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.ReaderException">
            <summary>
            Represents errors that occur while reading a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.ReaderException.#ctor(CsvHelper12.ReadingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ReaderException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper12.ReaderException.#ctor(CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ReaderException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.ReaderException.#ctor(CsvHelper12.ReadingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ReaderException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.ReadingContext">
            <summary>
            CSV reading state.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.RawRecordBuilder">
            <summary>
            Gets the raw record builder.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.FieldBuilder">
            <summary>
            Gets the field builder.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.RecordBuilder">
            <summary>
            Gets the record builder.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.NamedIndexes">
            <summary>
            Gets the named indexes.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.NamedIndexCache">
            <summary>
            Gets the named indexes cache.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.TypeConverterOptionsCache">
            <summary>
            Gets the type converter options cache.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.CreateRecordFuncs">
            <summary>
            Gets the create record functions.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.HydrateRecordActions">
            <summary>
            Gets the hydrate record actions.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.ReusableMemberMapData">
            <summary>
            Gets the reusable member map data.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.Reader">
            <summary>
            Gets the <see cref="T:System.IO.TextReader"/> that is read from.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.LeaveOpen">
            <summary>
            Gets a value indicating if the <see cref="F:CsvHelper12.ReadingContext.Reader"/>
            should be left open when disposing.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.Buffer">
            <summary>
            Gets the buffer used to store data from the <see cref="F:CsvHelper12.ReadingContext.Reader"/>.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.BufferPosition">
            <summary>
            Gets the buffer position.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.FieldStartPosition">
            <summary>
            Gets the field start position.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.FieldEndPosition">
            <summary>
            Gets the field end position.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.RawRecordStartPosition">
            <summary>
            Gets the raw record start position.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.RawRecordEndPosition">
            <summary>
            Gets the raw record end position.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.CharsRead">
            <summary>
            Gets the number of characters read from the <see cref="F:CsvHelper12.ReadingContext.Reader"/>.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.CharPosition">
            <summary>
            Gets the character position.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.BytePosition">
            <summary>
            Gets the byte position.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.IsFieldBad">
            <summary>
            Gets a value indicating if the field is bad.
            True if the field is bad, otherwise false.
            A field is bad if a quote is found in a field
            that isn't escaped.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.Record">
            <summary>
            Gets the record.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.Row">
            <summary>
            Gets the row of the CSV file that the parser is currently on.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.RawRow">
            <summary>
            Gets the row of the CSV file that the parser is currently on.
            This is the actual file row.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.HasBeenRead">
            <summary>
            Gets a value indicating if reading has begun.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.HeaderRecord">
            <summary>
            Gets the header record.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.CurrentIndex">
            <summary>
            Gets the current index.
            </summary>
        </member>
        <member name="F:CsvHelper12.ReadingContext.ColumnCount">
            <summary>
            Gets the column count.
            </summary>
        </member>
        <member name="P:CsvHelper12.ReadingContext.ParserConfiguration">
            <summary>
            Gets the <see cref="T:CsvHelper12.CsvParser"/> configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.ReadingContext.ReaderConfiguration">
            <summary>
            Gets the <see cref="T:CsvHelper12.CsvReader"/> configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.ReadingContext.RawRecord">
            <summary>
            Gets all the characters of the record including
            quotes, delimiters, and line endings.
            </summary>
        </member>
        <member name="P:CsvHelper12.ReadingContext.Field">
            <summary>
            Gets the field.
            </summary>
        </member>
        <member name="M:CsvHelper12.ReadingContext.#ctor(System.IO.TextReader,CsvHelper12.Configuration.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="reader">The reader.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">A value indicating if the TextReader should be left open when disposing.</param>
        </member>
        <member name="M:CsvHelper12.ReadingContext.ClearCache(CsvHelper12.Caches)">
            <summary>
            Clears the specified caches.
            </summary>
            <param name="cache">The caches to clear.</param>
        </member>
        <member name="M:CsvHelper12.ReadingContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.ReadingContext.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
        <member name="T:CsvHelper12.RecordBuilder">
            <summary>
            Builds CSV records.
            </summary>
        </member>
        <member name="P:CsvHelper12.RecordBuilder.Length">
            <summary>
            The number of records.
            </summary>
        </member>
        <member name="P:CsvHelper12.RecordBuilder.Capacity">
            <summary>
            The total record capacity.
            </summary>
        </member>
        <member name="M:CsvHelper12.RecordBuilder.#ctor">
            <summary>
            Creates a new <see cref="T:CsvHelper12.RecordBuilder"/> using defaults.
            </summary>
        </member>
        <member name="M:CsvHelper12.RecordBuilder.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:CsvHelper12.RecordBuilder"/> using the given capacity.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:CsvHelper12.RecordBuilder.Add(System.String)">
            <summary>
            Adds a new field to the <see cref="T:CsvHelper12.RecordBuilder"/>.
            </summary>
            <param name="field">The field to add.</param>
            <returns>The current instance of the <see cref="T:CsvHelper12.RecordBuilder"/>.</returns>
        </member>
        <member name="M:CsvHelper12.RecordBuilder.Clear">
            <summary>
            Clears the records.
            </summary>
            <returns>The current instance of the <see cref="T:CsvHelper12.RecordBuilder"/>.</returns>
        </member>
        <member name="M:CsvHelper12.RecordBuilder.ToArray">
            <summary>
            Returns the record as an <see cref="T:string[]"/>.
            </summary>
            <returns>The record as an <see cref="T:string[]"/>.</returns>
        </member>
        <member name="T:CsvHelper12.ReflectionExtensions">
            <summary>
            Extensions to help with reflection.
            </summary>
        </member>
        <member name="M:CsvHelper12.ReflectionExtensions.MemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type from the member.
            </summary>
            <param name="member">The member to get the type from.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:CsvHelper12.ReflectionExtensions.GetMemberExpression(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
            <summary>
            Gets a member expression for the member.
            </summary>
            <param name="member">The member to get the expression for.</param>
            <param name="expression">The member expression.</param>
            <returns>The member expression.</returns>
        </member>
        <member name="M:CsvHelper12.ReflectionExtensions.IsAnonymous(System.Type)">
            <summary>
            Gets a value indicating if the given type is anonymous.
            True for anonymous, otherwise false.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper12.ReflectionExtensions.HasParameterlessConstructor(System.Type)">
            <summary>
            Gets a value indicating if the given type has a parameterless constructor.
            True if it has a parameterless constructor, otherwise false.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper12.ReflectionExtensions.HasConstructor(System.Type)">
            <summary>
            Gets a value indicating if the given type has any constructors.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper12.ReflectionExtensions.GetConstructorWithMostParameters(System.Type)">
            <summary>
            Gets the constructor that contains the most parameters.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CsvHelper12.ReflectionExtensions.IsUserDefinedStruct(System.Type)">
            <summary>
            Gets a value indicating if the type is a user defined struct.
            True if it is a user defined struct, otherwise false.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="T:CsvHelper12.ReflectionHelper">
            <summary>
            Common reflection tasks.
            </summary>
        </member>
        <member name="M:CsvHelper12.ReflectionHelper.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance of type T using the current <see cref="T:CsvHelper12.IObjectResolver"/>.
            </summary>
            <typeparam name="T">The type of instance to create.</typeparam>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of type T.</returns>
        </member>
        <member name="M:CsvHelper12.ReflectionHelper.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type using the current <see cref="T:CsvHelper12.IObjectResolver"/>.
            </summary>
            <param name="type">The type of instance to create.</param>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of the specified type.</returns>
        </member>
        <member name="M:CsvHelper12.ReflectionHelper.CreateInstanceWithoutContractResolver(System.Type,System.Object[])">
            <summary>
            Creates an instance of the specified type without using the
            current <see cref="T:CsvHelper12.IObjectResolver"/>.
            </summary>
            <param name="type">The type of instance to create.</param>
            <param name="args">The constructor arguments.</param>
            <returns>A new instance of the specified type.</returns>
        </member>
        <member name="M:CsvHelper12.ReflectionHelper.GetDeclaringProperty(System.Type,System.Reflection.PropertyInfo,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> from the type where the property was declared.
            </summary>
            <param name="type">The type the property belongs to.</param>
            <param name="property">The property to search.</param>
            <param name="flags">Flags for how the property is retrieved.</param>
        </member>
        <member name="M:CsvHelper12.ReflectionHelper.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property from the expression.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> for the expression.</returns>
        </member>
        <member name="M:CsvHelper12.ReflectionHelper.GetMembers``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the member inheritance chain as a stack.
            </summary>
            <typeparam name="TModel">The type of the model.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The member expression.</param>
            <returns>The inheritance chain for the given member expression as a stack.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.ArrayConverter">
            <summary>
            Converts an <see cref="T:System.Array"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.ArrayConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.BooleanConverter">
            <summary>
            Converts a <see cref="T:System.Boolean"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.BooleanConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.ByteArrayConverter">
            <summary>
            Converts a <see cref="T:Byte[]"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.ByteArrayConverter.#ctor(CsvHelper12.TypeConversion.ByteArrayConverterOptions)">
            <summary>
            Creates a new ByteArrayConverter using the given <see cref="T:CsvHelper12.TypeConversion.ByteArrayConverterOptions"/>.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.ByteArrayConverter.ConvertToString(System.Object,CsvHelper12.IWriterRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper12.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.ByteArrayConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.ByteArrayConverterOptions">
            <summary>
            Options for converting byte arrays.
            </summary>
        </member>
        <member name="F:CsvHelper12.TypeConversion.ByteArrayConverterOptions.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:CsvHelper12.TypeConversion.ByteArrayConverterOptions.Hexadecimal">
            <summary>
            Hexadecimal encoding.
            </summary>
        </member>
        <member name="F:CsvHelper12.TypeConversion.ByteArrayConverterOptions.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="F:CsvHelper12.TypeConversion.ByteArrayConverterOptions.HexDashes">
            <summary>
            Use dashes in between hex values.
            </summary>
        </member>
        <member name="F:CsvHelper12.TypeConversion.ByteArrayConverterOptions.HexInclude0x">
            <summary>
            Prefix hex number with 0x.
            </summary>
        </member>
        <member name="T:CsvHelper12.TypeConversion.ByteConverter">
            <summary>
            Converts a <see cref="T:System.Byte"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.ByteConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.CharConverter">
            <summary>
            Converts a <see cref="T:System.Char"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.CharConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.CollectionGenericConverter">
            <summary>
            Converts a <see cref="T:System.Collections.ObjectModel.Collection`1"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.CollectionGenericConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.DateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.DateTimeConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.DateTimeOffsetConverter">
            <summary>
            Converts a <see cref="T:System.DateTimeOffset"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.DateTimeOffsetConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.DecimalConverter">
            <summary>
            Converts a <see cref="T:System.Decimal"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.DecimalConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.DefaultTypeConverter">
            <summary>
            Converts an <see cref="T:System.Object"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.DefaultTypeConverter.ConvertToString(System.Object,CsvHelper12.IWriterRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper12.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.DefaultTypeConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.DoubleConverter">
            <summary>
            Converts a <see cref="T:System.Double"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.DoubleConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.EnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.EnumConverter.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:CsvHelper12.TypeConversion.EnumConverter"/> for the given <see cref="T:System.Enum"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type of the Enum.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.EnumConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.EnumerableConverter">
            <summary>
            Throws an exception when used. This is here so that it's apparent
            that there is no support for <see cref="T:System.Collections.IEnumerable"/> type conversion. A custom
            converter will need to be created to have a field convert to and
            from an IEnumerable.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.EnumerableConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Throws an exception.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.EnumerableConverter.ConvertToString(System.Object,CsvHelper12.IWriterRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Throws an exception.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper12.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.GuidConverter">
            <summary>
            Converts a <see cref="T:System.Guid"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.GuidConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.IDictionaryConverter">
            <summary>
            Converts an <see cref="T:System.Collections.IDictionary"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.IDictionaryConverter.ConvertToString(System.Object,CsvHelper12.IWriterRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper12.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.IDictionaryConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.IDictionaryGenericConverter">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.IDictionaryGenericConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.IEnumerableConverter">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerable"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.IEnumerableConverter.ConvertToString(System.Object,CsvHelper12.IWriterRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row"></param>
            <param name="memberMapData"></param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.IEnumerableConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.IEnumerableGenericConverter">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.IEnumerableGenericConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.Int16Converter">
            <summary>
            Converts a <see cref="T:System.Int16"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.Int16Converter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.Int32Converter">
            <summary>
            Converts an <see cref="T:System.Int32"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.Int32Converter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.Int64Converter">
            <summary>
            Converts an <see cref="T:System.Int64"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.Int64Converter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.ITypeConverter">
            <summary>
            Converts objects to and from strings.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.ITypeConverter.ConvertToString(System.Object,CsvHelper12.IWriterRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row">The <see cref="T:CsvHelper12.IWriterRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being written.</param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.ITypeConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.NullableConverter">
            <summary>
            Converts a <see cref="T:System.Nullable`1"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.NullableConverter.NullableType">
            <summary>
            Gets the type of the nullable.
            </summary>
            <value>
            The type of the nullable.
            </value>
        </member>
        <member name="P:CsvHelper12.TypeConversion.NullableConverter.UnderlyingType">
            <summary>
            Gets the underlying type of the nullable.
            </summary>
            <value>
            The underlying type.
            </value>
        </member>
        <member name="P:CsvHelper12.TypeConversion.NullableConverter.UnderlyingTypeConverter">
            <summary>
            Gets the type converter for the underlying type.
            </summary>
            <value>
            The type converter.
            </value>
        </member>
        <member name="M:CsvHelper12.TypeConversion.NullableConverter.#ctor(System.Type,CsvHelper12.TypeConversion.TypeConverterCache)">
            <summary>
            Creates a new <see cref="T:CsvHelper12.TypeConversion.NullableConverter"/> for the given <see cref="T:System.Nullable`1"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The nullable type.</param>
            <param name="typeConverterFactory">The type converter factory.</param>
            <exception cref="T:System.ArgumentException">type is not a nullable type.</exception>
        </member>
        <member name="M:CsvHelper12.TypeConversion.NullableConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.NullableConverter.ConvertToString(System.Object,CsvHelper12.IWriterRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the object to a string.
            </summary>
            <param name="value">The object to convert to a string.</param>
            <param name="row"></param>
            <param name="memberMapData"></param>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.SByteConverter">
            <summary>
            Converts a <see cref="T:System.SByte"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.SByteConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.SingleConverter">
            <summary>
            Converts a <see cref="T:System.Single"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.SingleConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.StringConverter">
            <summary>
            Converts a <see cref="T:System.String"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.StringConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.TimeSpanConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TimeSpanConverter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.TypeConverterCache">
            <summary>
            Caches <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/>s for a given type.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.#ctor">
            <summary>
            Initializes the <see cref="T:CsvHelper12.TypeConversion.TypeConverterCache" /> class.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.AddConverter(System.Type,CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Adds the <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the converter converts.</param>
            <param name="typeConverter">The type converter that converts the type.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.AddConverter``1(CsvHelper12.TypeConversion.ITypeConverter)">
            <summary>
            Adds the <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the converter converts.</typeparam>
            <param name="typeConverter">The type converter that converts the type.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.RemoveConverter(System.Type)">
            <summary>
            Removes the <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to remove the converter for.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.RemoveConverter``1">
            <summary>
            Removes the <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to remove the converter for.</typeparam>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.GetConverter(System.Type)">
            <summary>
            Gets the converter for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to get the converter for.</param>
            <returns>The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.GetConverter(System.Reflection.MemberInfo)">
            <summary>
            Gets the converter for the given member. If an attribute is
            found on the member, that will be used, otherwise the cache
            will be used.
            </summary>
            <param name="member">The member to get the converter for.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterCache.GetConverter``1">
            <summary>
            Gets the converter for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to get the converter for.</typeparam>
            <returns>The <see cref="T:CsvHelper12.TypeConversion.ITypeConverter"/> for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.TypeConverterException">
            <summary>
            Represents errors that occur while reading a CSV file.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterException.Text">
            <summary>
            The text used in ConvertFromString.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterException.Value">
            <summary>
            The value used in ConvertToString.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterException.TypeConverter">
            <summary>
            The type converter.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterException.MemberMapData">
            <summary>
            The member map data used in ConvertFromString and ConvertToString.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterException.#ctor(CsvHelper12.TypeConversion.ITypeConverter,CsvHelper12.Configuration.MemberMapData,System.String,CsvHelper12.ReadingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.TypeConversion.TypeConverterException"/> class.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="text">The text.</param>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterException.#ctor(CsvHelper12.TypeConversion.ITypeConverter,CsvHelper12.Configuration.MemberMapData,System.Object,CsvHelper12.WritingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.TypeConversion.TypeConverterException"/> class.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="value">The value.</param>
            <param name="context">The writing context.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterException.#ctor(CsvHelper12.TypeConversion.ITypeConverter,CsvHelper12.Configuration.MemberMapData,System.String,CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.TypeConversion.TypeConverterException"/> class
            with a specified error message.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="text">The text.</param>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterException.#ctor(CsvHelper12.TypeConversion.ITypeConverter,CsvHelper12.Configuration.MemberMapData,System.Object,CsvHelper12.WritingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.TypeConversion.TypeConverterException"/> class
            with a specified error message.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="value">The value.</param>
            <param name="context">The writing context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterException.#ctor(CsvHelper12.TypeConversion.ITypeConverter,CsvHelper12.Configuration.MemberMapData,System.String,CsvHelper12.ReadingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.TypeConversion.TypeConverterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="text">The text.</param>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterException.#ctor(CsvHelper12.TypeConversion.ITypeConverter,CsvHelper12.Configuration.MemberMapData,System.Object,CsvHelper12.WritingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.TypeConversion.TypeConverterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="typeConverter">The type converter.</param>
            <param name="memberMapData">The member map data.</param>
            <param name="value">The value.</param>
            <param name="context">The writing context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.TypeConversion.TypeConverterOptions">
            <summary>
            Options used when doing type conversion.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.CultureInfo">
            <summary>
            Gets or sets the culture info.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.DateTimeStyle">
            <summary>
            Gets or sets the date time style.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.TimeSpanStyle">
            <summary>
            Gets or sets the time span style.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.NumberStyle">
            <summary>
            Gets or sets the number style.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.Formats">
            <summary>
            Gets or sets the string format.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.BooleanTrueValues">
            <summary>
            Gets the list of values that can be
            used to represent a boolean of true.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.BooleanFalseValues">
            <summary>
            Gets the list of values that can be
            used to represent a boolean of false.
            </summary>
        </member>
        <member name="P:CsvHelper12.TypeConversion.TypeConverterOptions.NullValues">
            <summary>
            Gets the list of values that can be used to represent a null value.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterOptions.Merge(CsvHelper12.TypeConversion.TypeConverterOptions[])">
            <summary>
            Merges TypeConverterOptions by applying the values of sources in order on to each other.
            The first object is the source object.
            </summary>
            <param name="sources">The sources that will be applied.</param>
            <returns>The updated source object.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.TypeConverterOptionsCache">
            <summary>
            Caches <see cref="T:CsvHelper12.TypeConversion.TypeConverterOptions"/> for a given type.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterOptionsCache.AddOptions(System.Type,CsvHelper12.TypeConversion.TypeConverterOptions)">
            <summary>
            Adds the <see cref="T:CsvHelper12.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the options are for.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterOptionsCache.AddOptions``1(CsvHelper12.TypeConversion.TypeConverterOptions)">
            <summary>
            Adds the <see cref="T:CsvHelper12.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the options are for.</typeparam>
            <param name="options">The options.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterOptionsCache.RemoveOptions(System.Type)">
            <summary>
            Removes the <see cref="T:CsvHelper12.TypeConversion.TypeConverterOptions"/> for the given type.
            </summary>
            <param name="type">The type to remove the options for.</param>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterOptionsCache.RemoveOptions``1">
            <summary>
            Removes the <see cref="T:CsvHelper12.TypeConversion.TypeConverterOptions"/> for the given type.
            </summary>
            <typeparam name="T">The type to remove the options for.</typeparam>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterOptionsCache.GetOptions(System.Type)">
            <summary>
            Get the <see cref="T:CsvHelper12.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type the options are for.</param>
            <returns>The options for the given type.</returns>
        </member>
        <member name="M:CsvHelper12.TypeConversion.TypeConverterOptionsCache.GetOptions``1">
            <summary>
            Get the <see cref="T:CsvHelper12.TypeConversion.TypeConverterOptions"/> for the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type the options are for.</typeparam>
            <returns>The options for the given type.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.UInt16Converter">
            <summary>
            Converts a <see cref="T:System.UInt16"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.UInt16Converter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.UInt32Converter">
            <summary>
            Converts a <see cref="T:System.UInt32"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.UInt32Converter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.TypeConversion.UInt64Converter">
            <summary>
            Converts a <see cref="T:System.UInt64"/> to and from a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CsvHelper12.TypeConversion.UInt64Converter.ConvertFromString(System.String,CsvHelper12.IReaderRow,CsvHelper12.Configuration.MemberMapData)">
            <summary>
            Converts the string to an object.
            </summary>
            <param name="text">The string to convert to an object.</param>
            <param name="row">The <see cref="T:CsvHelper12.IReaderRow"/> for the current record.</param>
            <param name="memberMapData">The <see cref="T:CsvHelper12.Configuration.MemberMapData"/> for the member being created.</param>
            <returns>The object created from the string.</returns>
        </member>
        <member name="T:CsvHelper12.ValidationException">
            <summary>
            Represents a user supplied validation failure.
            </summary>
        </member>
        <member name="M:CsvHelper12.ValidationException.#ctor(CsvHelper12.ReadingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class.
            </summary>
            <param name="context">The reading context.</param>
        </member>
        <member name="M:CsvHelper12.ValidationException.#ctor(CsvHelper12.ReadingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class
            with a specified error message.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.ValidationException.#ctor(CsvHelper12.ReadingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.ValidationException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The reading context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.WriterException">
            <summary>
            Represents errors that occur while writing a CSV file.
            </summary>
        </member>
        <member name="M:CsvHelper12.WriterException.#ctor(CsvHelper12.WritingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.WriterException"/> class.
            </summary>
            <param name="context">The writing context.</param>
        </member>
        <member name="M:CsvHelper12.WriterException.#ctor(CsvHelper12.WritingContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.WriterException"/> class
            with a specified error message.
            </summary>
            <param name="context">The writing context.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CsvHelper12.WriterException.#ctor(CsvHelper12.WritingContext,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CsvHelper12.WriterException"/> class
            with a specified error message and a reference to the inner exception that 
            is the cause of this exception.
            </summary>
            <param name="context">The writing context.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:CsvHelper12.WritingContext">
            <summary>
            CSV writing state.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.TypeActions">
            <summary>
            Gets the type actions.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.TypeConverterOptionsCache">
            <summary>
            Gets the type converter options.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.ReusableMemberMapData">
            <summary>
            Gets or sets the reusable member map data.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.WriterConfiguration">
            <summary>
            Gets the writer configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.SerializerConfiguration">
            <summary>
            Gets the serializer configuration.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.Writer">
            <summary>
            Gets the <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.LeaveOpen">
            <summary>
            Gets a value indicating if the <see cref="P:CsvHelper12.WritingContext.Writer"/>
            should be left open when disposing.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.Row">
            <summary>
            Gets the current row.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.Record">
            <summary>
            Get the current record;
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.HasHeaderBeenWritten">
            <summary>
            Gets a value indicating if the header has been written.
            </summary>
        </member>
        <member name="P:CsvHelper12.WritingContext.HasRecordBeenWritten">
            <summary>
            Gets a value indicating if a record has been written.
            </summary>
        </member>
        <member name="M:CsvHelper12.WritingContext.#ctor(System.IO.TextWriter,CsvHelper12.Configuration.Configuration,System.Boolean)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="writer">The writer.</param>
            <param name="configuration">The configuration.</param>
            <param name="leaveOpen">A value indicating if the TextWriter should be left open.</param>
        </member>
        <member name="M:CsvHelper12.WritingContext.ClearCache(CsvHelper12.Caches)">
            <summary>
            Clears the specified caches.
            </summary>
            <param name="cache">The caches to clear.</param>
        </member>
        <member name="M:CsvHelper12.WritingContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CsvHelper12.WritingContext.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">True if the instance needs to be disposed of.</param>
        </member>
    </members>
</doc>
