//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright 2013 by the Spark Development Network
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using System.Linq;

using Rock.Data;

namespace church.ccv.Datamart.Model
{
    /// <summary>
    /// DatamartPerson Service class
    /// </summary>
    public partial class DatamartPersonService : Service<DatamartPerson>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatamartPersonService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public DatamartPersonService(church.ccv.Datamart.Data.DatamartContext context) : base(context)
        {
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class DatamartPersonExtensionMethods
    {
        /// <summary>
        /// Clones this DatamartPerson object to a new DatamartPerson object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static DatamartPerson Clone( this DatamartPerson source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as DatamartPerson;
            }
            else
            {
                var target = new DatamartPerson();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Copies the properties from another DatamartPerson object to this DatamartPerson object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this DatamartPerson target, DatamartPerson source )
        {
            target.Address = source.Address;
            target.Age = source.Age;
            target.AnniversaryDate = source.AnniversaryDate;
            target.AnniversaryYears = source.AnniversaryYears;
            target.BaptismDate = source.BaptismDate;
            target.BirthDate = source.BirthDate;
            target.C2007Contrib = source.C2007Contrib;
            target.C2008Contrib = source.C2008Contrib;
            target.C2009Contrib = source.C2009Contrib;
            target.C2010Contrib = source.C2010Contrib;
            target.C2011Contrib = source.C2011Contrib;
            target.C2012Contrib = source.C2012Contrib;
            target.C2013Contrib = source.C2013Contrib;
            target.C2014Contrib = source.C2014Contrib;
            target.C2015Contrib = source.C2015Contrib;
            target.Campus = source.Campus;
            target.CampusId = source.CampusId;
            target.CellPhone = source.CellPhone;
            target.City = source.City;
            target.ConnectionStatus = source.ConnectionStatus;
            target.Email = source.Email;
            target.FamilyRole = source.FamilyRole;
            target.FirstName = source.FirstName;
            target.FirstVisitDate = source.FirstVisitDate;
            target.FullName = source.FullName;
            target.Gender = source.Gender;
            target.GeoPoint = source.GeoPoint;
            target.Grade = source.Grade;
            target.HomePhone = source.HomePhone;
            target.InNeighborhoodGroup = source.InNeighborhoodGroup;
            target.IsBaptized = source.IsBaptized;
            target.IsEra = source.IsEra;
            target.IsHeadOfHousehold = source.IsHeadOfHousehold;
            target.IsServing = source.IsServing;
            target.IsStaff = source.IsStaff;
            target.LastContributionDate = source.LastContributionDate;
            target.LastName = source.LastName;
            target.Latitude = source.Latitude;
            target.Longitude = source.Longitude;
            target.MaritalStatus = source.MaritalStatus;
            target.MiddleName = source.MiddleName;
            target.NearestGroupId = source.NearestGroupId;
            target.NearestGroupName = source.NearestGroupName;
            target.NeighborhoodGroupId = source.NeighborhoodGroupId;
            target.NeighborhoodGroupName = source.NeighborhoodGroupName;
            target.NeighborhoodId = source.NeighborhoodId;
            target.NeighborhoodName = source.NeighborhoodName;
            target.NickName = source.NickName;
            target.PersonGuid = source.PersonGuid;
            target.PhotoUrl = source.PhotoUrl;
            target.PostalCode = source.PostalCode;
            target.ServingAreas = source.ServingAreas;
            target.SpouseName = source.SpouseName;
            target.StartingPointDate = source.StartingPointDate;
            target.State = source.State;
            target.TakenStartingPoint = source.TakenStartingPoint;
            target.WorkPhone = source.WorkPhone;
            target.CreatedDateTime = source.CreatedDateTime;
            target.ModifiedDateTime = source.ModifiedDateTime;
            target.CreatedByPersonAliasId = source.CreatedByPersonAliasId;
            target.ModifiedByPersonAliasId = source.ModifiedByPersonAliasId;

        }
    }
}
