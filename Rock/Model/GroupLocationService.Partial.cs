//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.Collections.Generic;
using System.Linq;

namespace Rock.Model
{
    /// <summary>
    /// Data access/service class for <see cref="Rock.Model.GroupLocation"/> entity objects. This class extends the <see cref="Rock.Data.Service"/> class.
    /// </summary>
    public partial class GroupLocationService
    {
        /// <summary>
        /// Returns an enumerable collection of <see cref="Rock.Model.GroupLocation">GroupLocations</see> by their LocationId
        /// </summary>
        /// <param name="locationId">A <see cref="System.Int32"/> representing the Id of a <see cref="Rock.Model.Location"/> to search by.</param>
        /// <returns>An enumerable collection of <see cref="Rock.Model.GroupLocations"/> which are associated with the provided <see cref="Rock.Model.Location"/> </returns>
        public IEnumerable<GroupLocation> GetByLocation( int locationId )
        {
            return Repository.Find( g => g.LocationId == locationId );
        }

        /// <summary>
        /// Returns an enumerable collection of  active <see cref="Rock.Model.GroupLocation">GroupLocations</see> by their <see cref="Rock.Model.Location"/> Id
        /// </summary>
        /// <param name="locationId">A <see cref="System.Int32"/> representing the Id of the <see cref="Rock.Model.Location"/> to search by.</param>
        /// <returns></returns>
        public IEnumerable<GroupLocation> GetActiveByLocation( int locationId )
        {
            return Repository.AsQueryable()
                .Where( g =>
                    g.LocationId == locationId &&
                    g.Group.IsActive ).ToList();

        }

    }
}
