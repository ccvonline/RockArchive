//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// GroupRole Service class
    /// </summary>
    public partial class GroupRoleService : Service<GroupRole, GroupRoleDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupRoleService"/> class
        /// </summary>
        public GroupRoleService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupRoleService"/> class
        /// </summary>
        public GroupRoleService(IRepository<GroupRole> repository) : base(repository)
        {
        }

        /// <summary>
        /// Creates a new model
        /// </summary>
        public override GroupRole CreateNew()
        {
            return new GroupRole();
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public override IQueryable<GroupRoleDto> QueryableDto( )
        {
            return QueryableDto( this.Queryable() );
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public IQueryable<GroupRoleDto> QueryableDto( IQueryable<GroupRole> items )
        {
            return items.Select( m => new GroupRoleDto()
                {
                    IsSystem = m.IsSystem,
                    GroupTypeId = m.GroupTypeId,
                    Name = m.Name,
                    Description = m.Description,
                    SortOrder = m.SortOrder,
                    MaxCount = m.MaxCount,
                    MinCount = m.MinCount,
                    Id = m.Id,
                    Guid = m.Guid,
                });
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( GroupRole item, out string errorMessage )
        {
            errorMessage = string.Empty;
            RockContext context = new RockContext();
            context.Database.Connection.Open();

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from GroupMember where GroupRoleId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "GroupMember" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "GroupMember";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", GroupRole.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from GroupType where DefaultGroupRoleId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "GroupType" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "GroupType";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", GroupRole.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            return true;
        }
    }
}
