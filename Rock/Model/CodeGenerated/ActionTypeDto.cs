//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for ActionType object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class ActionTypeDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public int ActivityTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public int EntityTypeId { get; set; }

        /// <summary />
        [DataMember]
        public bool IsActionCompletedOnSuccess { get; set; }

        /// <summary />
        [DataMember]
        public bool IsActivityCompletedOnSuccess { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public ActionTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="actionType"></param>
        public ActionTypeDto ( ActionType actionType )
        {
            CopyFromModel( actionType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "ActivityTypeId", this.ActivityTypeId );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "EntityTypeId", this.EntityTypeId );
            dictionary.Add( "IsActionCompletedOnSuccess", this.IsActionCompletedOnSuccess );
            dictionary.Add( "IsActivityCompletedOnSuccess", this.IsActivityCompletedOnSuccess );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.ActivityTypeId = this.ActivityTypeId;
            expando.Name = this.Name;
            expando.Order = this.Order;
            expando.EntityTypeId = this.EntityTypeId;
            expando.IsActionCompletedOnSuccess = this.IsActionCompletedOnSuccess;
            expando.IsActivityCompletedOnSuccess = this.IsActivityCompletedOnSuccess;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is ActionType )
            {
                var actionType = (ActionType)model;
                this.ActivityTypeId = actionType.ActivityTypeId;
                this.Name = actionType.Name;
                this.Order = actionType.Order;
                this.EntityTypeId = actionType.EntityTypeId;
                this.IsActionCompletedOnSuccess = actionType.IsActionCompletedOnSuccess;
                this.IsActivityCompletedOnSuccess = actionType.IsActivityCompletedOnSuccess;
                this.Id = actionType.Id;
                this.Guid = actionType.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is ActionType )
            {
                var actionType = (ActionType)model;
                actionType.ActivityTypeId = this.ActivityTypeId;
                actionType.Name = this.Name;
                actionType.Order = this.Order;
                actionType.EntityTypeId = this.EntityTypeId;
                actionType.IsActionCompletedOnSuccess = this.IsActionCompletedOnSuccess;
                actionType.IsActivityCompletedOnSuccess = this.IsActivityCompletedOnSuccess;
                actionType.Id = this.Id;
                actionType.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class ActionTypeDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ActionType ToModel( this ActionTypeDto value )
        {
            ActionType result = new ActionType();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<ActionType> ToModel( this List<ActionTypeDto> value )
        {
            List<ActionType> result = new List<ActionType>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<ActionTypeDto> ToDto( this List<ActionType> value )
        {
            List<ActionTypeDto> result = new List<ActionTypeDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ActionTypeDto ToDto( this ActionType value )
        {
            return new ActionTypeDto( value );
        }

    }
}