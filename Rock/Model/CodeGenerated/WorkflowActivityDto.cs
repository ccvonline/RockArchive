//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for WorkflowActivity object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class WorkflowActivityDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public int WorkflowId { get; set; }

        /// <summary />
        [DataMember]
        public int ActivityTypeId { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? ActivatedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastProcessedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? CompletedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public WorkflowActivityDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="workflowActivity"></param>
        public WorkflowActivityDto ( WorkflowActivity workflowActivity )
        {
            CopyFromModel( workflowActivity );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "WorkflowId", this.WorkflowId );
            dictionary.Add( "ActivityTypeId", this.ActivityTypeId );
            dictionary.Add( "ActivatedDateTime", this.ActivatedDateTime );
            dictionary.Add( "LastProcessedDateTime", this.LastProcessedDateTime );
            dictionary.Add( "CompletedDateTime", this.CompletedDateTime );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.WorkflowId = this.WorkflowId;
            expando.ActivityTypeId = this.ActivityTypeId;
            expando.ActivatedDateTime = this.ActivatedDateTime;
            expando.LastProcessedDateTime = this.LastProcessedDateTime;
            expando.CompletedDateTime = this.CompletedDateTime;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is WorkflowActivity )
            {
                var workflowActivity = (WorkflowActivity)model;
                this.WorkflowId = workflowActivity.WorkflowId;
                this.ActivityTypeId = workflowActivity.ActivityTypeId;
                this.ActivatedDateTime = workflowActivity.ActivatedDateTime;
                this.LastProcessedDateTime = workflowActivity.LastProcessedDateTime;
                this.CompletedDateTime = workflowActivity.CompletedDateTime;
                this.Id = workflowActivity.Id;
                this.Guid = workflowActivity.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is WorkflowActivity )
            {
                var workflowActivity = (WorkflowActivity)model;
                workflowActivity.WorkflowId = this.WorkflowId;
                workflowActivity.ActivityTypeId = this.ActivityTypeId;
                workflowActivity.ActivatedDateTime = this.ActivatedDateTime;
                workflowActivity.LastProcessedDateTime = this.LastProcessedDateTime;
                workflowActivity.CompletedDateTime = this.CompletedDateTime;
                workflowActivity.Id = this.Id;
                workflowActivity.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class WorkflowActivityDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowActivity ToModel( this WorkflowActivityDto value )
        {
            WorkflowActivity result = new WorkflowActivity();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowActivity> ToModel( this List<WorkflowActivityDto> value )
        {
            List<WorkflowActivity> result = new List<WorkflowActivity>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowActivityDto> ToDto( this List<WorkflowActivity> value )
        {
            List<WorkflowActivityDto> result = new List<WorkflowActivityDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowActivityDto ToDto( this WorkflowActivity value )
        {
            return new WorkflowActivityDto( value );
        }

    }
}