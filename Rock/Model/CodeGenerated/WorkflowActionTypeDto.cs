//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for WorkflowActionType object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class WorkflowActionTypeDto : DtoSecured<WorkflowActionTypeDto>
    {
        /// <summary />
        [DataMember]
        public int ActivityTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public int EntityTypeId { get; set; }

        /// <summary />
        [DataMember]
        public bool IsActionCompletedOnSuccess { get; set; }

        /// <summary />
        [DataMember]
        public bool IsActivityCompletedOnSuccess { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public WorkflowActionTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="workflowActionType"></param>
        public WorkflowActionTypeDto ( WorkflowActionType workflowActionType )
        {
            CopyFromModel( workflowActionType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "ActivityTypeId", this.ActivityTypeId );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "EntityTypeId", this.EntityTypeId );
            dictionary.Add( "IsActionCompletedOnSuccess", this.IsActionCompletedOnSuccess );
            dictionary.Add( "IsActivityCompletedOnSuccess", this.IsActivityCompletedOnSuccess );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.ActivityTypeId = this.ActivityTypeId;
            expando.Name = this.Name;
            expando.Order = this.Order;
            expando.EntityTypeId = this.EntityTypeId;
            expando.IsActionCompletedOnSuccess = this.IsActionCompletedOnSuccess;
            expando.IsActivityCompletedOnSuccess = this.IsActivityCompletedOnSuccess;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is WorkflowActionType )
            {
                var workflowActionType = (WorkflowActionType)model;
                this.ActivityTypeId = workflowActionType.ActivityTypeId;
                this.Name = workflowActionType.Name;
                this.Order = workflowActionType.Order;
                this.EntityTypeId = workflowActionType.EntityTypeId;
                this.IsActionCompletedOnSuccess = workflowActionType.IsActionCompletedOnSuccess;
                this.IsActivityCompletedOnSuccess = workflowActionType.IsActivityCompletedOnSuccess;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is WorkflowActionType )
            {
                var workflowActionType = (WorkflowActionType)model;
                workflowActionType.ActivityTypeId = this.ActivityTypeId;
                workflowActionType.Name = this.Name;
                workflowActionType.Order = this.Order;
                workflowActionType.EntityTypeId = this.EntityTypeId;
                workflowActionType.IsActionCompletedOnSuccess = this.IsActionCompletedOnSuccess;
                workflowActionType.IsActivityCompletedOnSuccess = this.IsActivityCompletedOnSuccess;
            }
        }

    }


    /// <summary>
    /// WorkflowActionType Extension Methods
    /// </summary>
    public static class WorkflowActionTypeExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowActionType ToModel( this WorkflowActionTypeDto value )
        {
            WorkflowActionType result = new WorkflowActionType();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowActionType> ToModel( this List<WorkflowActionTypeDto> value )
        {
            List<WorkflowActionType> result = new List<WorkflowActionType>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowActionTypeDto> ToDto( this List<WorkflowActionType> value )
        {
            List<WorkflowActionTypeDto> result = new List<WorkflowActionTypeDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowActionTypeDto ToDto( this WorkflowActionType value )
        {
            return new WorkflowActionTypeDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this WorkflowActionType value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<WorkflowActionType> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this WorkflowActionType value, bool deep = false )
        {
            dynamic dynamicWorkflowActionType = new WorkflowActionTypeDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicWorkflowActionType;
            }

            dynamicWorkflowActionType.ActivityType = value.ActivityType.ToDynamic();
            dynamicWorkflowActionType.EntityType = value.EntityType.ToDynamic();

            return dynamicWorkflowActionType;
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this WorkflowActionType value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        new WorkflowActivityTypeDto().FromDynamic( dict["ActivityType"] ).CopyToModel(value.ActivityType);
                        new EntityTypeDto().FromDynamic( dict["EntityType"] ).CopyToModel(value.EntityType);

                    }
                }
            }
        }

    }
}