//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for ServiceJob object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class ServiceJobDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public bool? IsActive { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public string Assemby { get; set; }

        /// <summary />
        [DataMember]
        public string Class { get; set; }

        /// <summary />
        [DataMember]
        public string CronExpression { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastSuccessfulRun { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastRunDate { get; set; }

        /// <summary />
        [DataMember]
        public int? LastRunDuration { get; set; }

        /// <summary />
        [DataMember]
        public string LastStatus { get; set; }

        /// <summary />
        [DataMember]
        public string LastStatusMessage { get; set; }

        /// <summary />
        [DataMember]
        public string LastRunSchedulerName { get; set; }

        /// <summary />
        [DataMember]
        public string NotificationEmails { get; set; }

        /// <summary />
        [DataMember]
        public JobNotificationStatus NotificationStatus { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public ServiceJobDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="serviceJob"></param>
        public ServiceJobDto ( ServiceJob serviceJob )
        {
            CopyFromModel( serviceJob );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "IsActive", this.IsActive );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "Assemby", this.Assemby );
            dictionary.Add( "Class", this.Class );
            dictionary.Add( "CronExpression", this.CronExpression );
            dictionary.Add( "LastSuccessfulRun", this.LastSuccessfulRun );
            dictionary.Add( "LastRunDate", this.LastRunDate );
            dictionary.Add( "LastRunDuration", this.LastRunDuration );
            dictionary.Add( "LastStatus", this.LastStatus );
            dictionary.Add( "LastStatusMessage", this.LastStatusMessage );
            dictionary.Add( "LastRunSchedulerName", this.LastRunSchedulerName );
            dictionary.Add( "NotificationEmails", this.NotificationEmails );
            dictionary.Add( "NotificationStatus", this.NotificationStatus );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.IsActive = this.IsActive;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.Assemby = this.Assemby;
            expando.Class = this.Class;
            expando.CronExpression = this.CronExpression;
            expando.LastSuccessfulRun = this.LastSuccessfulRun;
            expando.LastRunDate = this.LastRunDate;
            expando.LastRunDuration = this.LastRunDuration;
            expando.LastStatus = this.LastStatus;
            expando.LastStatusMessage = this.LastStatusMessage;
            expando.LastRunSchedulerName = this.LastRunSchedulerName;
            expando.NotificationEmails = this.NotificationEmails;
            expando.NotificationStatus = this.NotificationStatus;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is ServiceJob )
            {
                var serviceJob = (ServiceJob)model;
                this.IsSystem = serviceJob.IsSystem;
                this.IsActive = serviceJob.IsActive;
                this.Name = serviceJob.Name;
                this.Description = serviceJob.Description;
                this.Assemby = serviceJob.Assemby;
                this.Class = serviceJob.Class;
                this.CronExpression = serviceJob.CronExpression;
                this.LastSuccessfulRun = serviceJob.LastSuccessfulRun;
                this.LastRunDate = serviceJob.LastRunDate;
                this.LastRunDuration = serviceJob.LastRunDuration;
                this.LastStatus = serviceJob.LastStatus;
                this.LastStatusMessage = serviceJob.LastStatusMessage;
                this.LastRunSchedulerName = serviceJob.LastRunSchedulerName;
                this.NotificationEmails = serviceJob.NotificationEmails;
                this.NotificationStatus = serviceJob.NotificationStatus;
                this.Id = serviceJob.Id;
                this.Guid = serviceJob.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is ServiceJob )
            {
                var serviceJob = (ServiceJob)model;
                serviceJob.IsSystem = this.IsSystem;
                serviceJob.IsActive = this.IsActive;
                serviceJob.Name = this.Name;
                serviceJob.Description = this.Description;
                serviceJob.Assemby = this.Assemby;
                serviceJob.Class = this.Class;
                serviceJob.CronExpression = this.CronExpression;
                serviceJob.LastSuccessfulRun = this.LastSuccessfulRun;
                serviceJob.LastRunDate = this.LastRunDate;
                serviceJob.LastRunDuration = this.LastRunDuration;
                serviceJob.LastStatus = this.LastStatus;
                serviceJob.LastStatusMessage = this.LastStatusMessage;
                serviceJob.LastRunSchedulerName = this.LastRunSchedulerName;
                serviceJob.NotificationEmails = this.NotificationEmails;
                serviceJob.NotificationStatus = this.NotificationStatus;
                serviceJob.Id = this.Id;
                serviceJob.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class ServiceJobDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ServiceJob ToModel( this ServiceJobDto value )
        {
            ServiceJob result = new ServiceJob();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<ServiceJob> ToModel( this List<ServiceJobDto> value )
        {
            List<ServiceJob> result = new List<ServiceJob>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<ServiceJobDto> ToDto( this List<ServiceJob> value )
        {
            List<ServiceJobDto> result = new List<ServiceJobDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ServiceJobDto ToDto( this ServiceJob value )
        {
            return new ServiceJobDto( value );
        }

    }
}