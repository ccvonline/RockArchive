//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for ServiceJob object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class ServiceJobDto : DtoSecured<ServiceJobDto>
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public bool? IsActive { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public string Assembly { get; set; }

        /// <summary />
        [DataMember]
        public string Class { get; set; }

        /// <summary />
        [DataMember]
        public string CronExpression { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastSuccessfulRunDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastRunDateTime { get; set; }

        /// <summary />
        [DataMember]
        public int? LastRunDurationSeconds { get; set; }

        /// <summary />
        [DataMember]
        public string LastStatus { get; set; }

        /// <summary />
        [DataMember]
        public string LastStatusMessage { get; set; }

        /// <summary />
        [DataMember]
        public string LastRunSchedulerName { get; set; }

        /// <summary />
        [DataMember]
        public string NotificationEmails { get; set; }

        /// <summary />
        [DataMember]
        public JobNotificationStatus NotificationStatus { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public ServiceJobDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="serviceJob"></param>
        public ServiceJobDto ( ServiceJob serviceJob )
        {
            CopyFromModel( serviceJob );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "IsActive", this.IsActive );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "Assembly", this.Assembly );
            dictionary.Add( "Class", this.Class );
            dictionary.Add( "CronExpression", this.CronExpression );
            dictionary.Add( "LastSuccessfulRunDateTime", this.LastSuccessfulRunDateTime );
            dictionary.Add( "LastRunDateTime", this.LastRunDateTime );
            dictionary.Add( "LastRunDurationSeconds", this.LastRunDurationSeconds );
            dictionary.Add( "LastStatus", this.LastStatus );
            dictionary.Add( "LastStatusMessage", this.LastStatusMessage );
            dictionary.Add( "LastRunSchedulerName", this.LastRunSchedulerName );
            dictionary.Add( "NotificationEmails", this.NotificationEmails );
            dictionary.Add( "NotificationStatus", this.NotificationStatus );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.IsActive = this.IsActive;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.Assembly = this.Assembly;
            expando.Class = this.Class;
            expando.CronExpression = this.CronExpression;
            expando.LastSuccessfulRunDateTime = this.LastSuccessfulRunDateTime;
            expando.LastRunDateTime = this.LastRunDateTime;
            expando.LastRunDurationSeconds = this.LastRunDurationSeconds;
            expando.LastStatus = this.LastStatus;
            expando.LastStatusMessage = this.LastStatusMessage;
            expando.LastRunSchedulerName = this.LastRunSchedulerName;
            expando.NotificationEmails = this.NotificationEmails;
            expando.NotificationStatus = this.NotificationStatus;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is ServiceJob )
            {
                var serviceJob = (ServiceJob)model;
                this.IsSystem = serviceJob.IsSystem;
                this.IsActive = serviceJob.IsActive;
                this.Name = serviceJob.Name;
                this.Description = serviceJob.Description;
                this.Assembly = serviceJob.Assembly;
                this.Class = serviceJob.Class;
                this.CronExpression = serviceJob.CronExpression;
                this.LastSuccessfulRunDateTime = serviceJob.LastSuccessfulRunDateTime;
                this.LastRunDateTime = serviceJob.LastRunDateTime;
                this.LastRunDurationSeconds = serviceJob.LastRunDurationSeconds;
                this.LastStatus = serviceJob.LastStatus;
                this.LastStatusMessage = serviceJob.LastStatusMessage;
                this.LastRunSchedulerName = serviceJob.LastRunSchedulerName;
                this.NotificationEmails = serviceJob.NotificationEmails;
                this.NotificationStatus = serviceJob.NotificationStatus;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is ServiceJob )
            {
                var serviceJob = (ServiceJob)model;
                serviceJob.IsSystem = this.IsSystem;
                serviceJob.IsActive = this.IsActive;
                serviceJob.Name = this.Name;
                serviceJob.Description = this.Description;
                serviceJob.Assembly = this.Assembly;
                serviceJob.Class = this.Class;
                serviceJob.CronExpression = this.CronExpression;
                serviceJob.LastSuccessfulRunDateTime = this.LastSuccessfulRunDateTime;
                serviceJob.LastRunDateTime = this.LastRunDateTime;
                serviceJob.LastRunDurationSeconds = this.LastRunDurationSeconds;
                serviceJob.LastStatus = this.LastStatus;
                serviceJob.LastStatusMessage = this.LastStatusMessage;
                serviceJob.LastRunSchedulerName = this.LastRunSchedulerName;
                serviceJob.NotificationEmails = this.NotificationEmails;
                serviceJob.NotificationStatus = this.NotificationStatus;
            }
        }

    }


    /// <summary>
    /// ServiceJob Extension Methods
    /// </summary>
    public static class ServiceJobExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ServiceJob ToModel( this ServiceJobDto value )
        {
            ServiceJob result = new ServiceJob();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<ServiceJob> ToModel( this List<ServiceJobDto> value )
        {
            List<ServiceJob> result = new List<ServiceJob>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<ServiceJobDto> ToDto( this List<ServiceJob> value )
        {
            List<ServiceJobDto> result = new List<ServiceJobDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ServiceJobDto ToDto( this ServiceJob value )
        {
            return new ServiceJobDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this ServiceJob value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<ServiceJob> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this ServiceJob value, bool deep = false )
        {
            dynamic dynamicServiceJob = new ServiceJobDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicServiceJob;
            }


            return dynamicServiceJob;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this ServiceJob value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this ServiceJob value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                    }
                }
            }
        }

    }
}