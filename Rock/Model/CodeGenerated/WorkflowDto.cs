//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Workflow object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class WorkflowDto : DtoSecured<WorkflowDto>
    {
        /// <summary />
        [DataMember]
        public int WorkflowTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public string Status { get; set; }

        /// <summary />
        [DataMember]
        public bool IsProcessing { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? ActivatedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastProcessedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? CompletedDateTime { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public WorkflowDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="workflow"></param>
        public WorkflowDto ( Workflow workflow )
        {
            CopyFromModel( workflow );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "WorkflowTypeId", this.WorkflowTypeId );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "Status", this.Status );
            dictionary.Add( "IsProcessing", this.IsProcessing );
            dictionary.Add( "ActivatedDateTime", this.ActivatedDateTime );
            dictionary.Add( "LastProcessedDateTime", this.LastProcessedDateTime );
            dictionary.Add( "CompletedDateTime", this.CompletedDateTime );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.WorkflowTypeId = this.WorkflowTypeId;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.Status = this.Status;
            expando.IsProcessing = this.IsProcessing;
            expando.ActivatedDateTime = this.ActivatedDateTime;
            expando.LastProcessedDateTime = this.LastProcessedDateTime;
            expando.CompletedDateTime = this.CompletedDateTime;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is Workflow )
            {
                var workflow = (Workflow)model;
                this.WorkflowTypeId = workflow.WorkflowTypeId;
                this.Name = workflow.Name;
                this.Description = workflow.Description;
                this.Status = workflow.Status;
                this.IsProcessing = workflow.IsProcessing;
                this.ActivatedDateTime = workflow.ActivatedDateTime;
                this.LastProcessedDateTime = workflow.LastProcessedDateTime;
                this.CompletedDateTime = workflow.CompletedDateTime;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is Workflow )
            {
                var workflow = (Workflow)model;
                workflow.WorkflowTypeId = this.WorkflowTypeId;
                workflow.Name = this.Name;
                workflow.Description = this.Description;
                workflow.Status = this.Status;
                workflow.IsProcessing = this.IsProcessing;
                workflow.ActivatedDateTime = this.ActivatedDateTime;
                workflow.LastProcessedDateTime = this.LastProcessedDateTime;
                workflow.CompletedDateTime = this.CompletedDateTime;
            }
        }

    }


    /// <summary>
    /// Workflow Extension Methods
    /// </summary>
    public static class WorkflowExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Workflow ToModel( this WorkflowDto value )
        {
            Workflow result = new Workflow();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Workflow> ToModel( this List<WorkflowDto> value )
        {
            List<Workflow> result = new List<Workflow>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowDto> ToDto( this List<Workflow> value )
        {
            List<WorkflowDto> result = new List<WorkflowDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowDto ToDto( this Workflow value )
        {
            return new WorkflowDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this Workflow value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<Workflow> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this Workflow value, bool deep = false )
        {
            dynamic dynamicWorkflow = new WorkflowDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicWorkflow;
            }


            if (value.WorkflowType != null)
            {
                dynamicWorkflow.WorkflowType = value.WorkflowType.ToDynamic();
            }

            if (value.Activities != null)
            {
                dynamicWorkflow.Activities = value.Activities.ToDynamic();
            }

            if (value.LogEntries != null)
            {
                dynamicWorkflow.LogEntries = value.LogEntries.ToDynamic();
            }

            return dynamicWorkflow;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this Workflow value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this Workflow value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        // WorkflowType
                        if (dict.ContainsKey("WorkflowType"))
                        {
                            value.WorkflowType = new WorkflowType();
                            new WorkflowTypeDto().FromDynamic( dict["WorkflowType"] ).CopyToModel(value.WorkflowType);
                        }

                        // Activities
                        if (dict.ContainsKey("Activities"))
                        {
                            var ActivitiesList = dict["Activities"] as List<object>;
                            if (ActivitiesList != null)
                            {
                                value.Activities = new List<WorkflowActivity>();
                                foreach(object childObj in ActivitiesList)
                                {
                                    var WorkflowActivity = new WorkflowActivity();
                                    new WorkflowActivityDto().FromDynamic(childObj).CopyToModel(WorkflowActivity);
                                    value.Activities.Add(WorkflowActivity);
                                }
                            }
                        }

                        // LogEntries
                        if (dict.ContainsKey("LogEntries"))
                        {
                            var LogEntriesList = dict["LogEntries"] as List<object>;
                            if (LogEntriesList != null)
                            {
                                value.LogEntries = new List<WorkflowLog>();
                                foreach(object childObj in LogEntriesList)
                                {
                                    var WorkflowLog = new WorkflowLog();
                                    new WorkflowLogDto().FromDynamic(childObj).CopyToModel(WorkflowLog);
                                    value.LogEntries.Add(WorkflowLog);
                                }
                            }
                        }

                    }
                }
            }
        }

    }
}