//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for WorkflowType object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class WorkflowTypeDto : DtoSecured<WorkflowTypeDto>
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public bool? IsActive { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public int? CategoryId { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public int? FileId { get; set; }

        /// <summary />
        [DataMember]
        public string WorkTerm { get; set; }

        /// <summary />
        [DataMember]
        public int? ProcessingIntervalSeconds { get; set; }

        /// <summary />
        [DataMember]
        public bool IsPersisted { get; set; }

        /// <summary />
        [DataMember]
        public WorkflowLoggingLevel LoggingLevel { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public WorkflowTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="workflowType"></param>
        public WorkflowTypeDto ( WorkflowType workflowType )
        {
            CopyFromModel( workflowType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "IsActive", this.IsActive );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "CategoryId", this.CategoryId );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "FileId", this.FileId );
            dictionary.Add( "WorkTerm", this.WorkTerm );
            dictionary.Add( "ProcessingIntervalSeconds", this.ProcessingIntervalSeconds );
            dictionary.Add( "IsPersisted", this.IsPersisted );
            dictionary.Add( "LoggingLevel", this.LoggingLevel );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.IsActive = this.IsActive;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.CategoryId = this.CategoryId;
            expando.Order = this.Order;
            expando.FileId = this.FileId;
            expando.WorkTerm = this.WorkTerm;
            expando.ProcessingIntervalSeconds = this.ProcessingIntervalSeconds;
            expando.IsPersisted = this.IsPersisted;
            expando.LoggingLevel = this.LoggingLevel;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is WorkflowType )
            {
                var workflowType = (WorkflowType)model;
                this.IsSystem = workflowType.IsSystem;
                this.IsActive = workflowType.IsActive;
                this.Name = workflowType.Name;
                this.Description = workflowType.Description;
                this.CategoryId = workflowType.CategoryId;
                this.Order = workflowType.Order;
                this.FileId = workflowType.FileId;
                this.WorkTerm = workflowType.WorkTerm;
                this.ProcessingIntervalSeconds = workflowType.ProcessingIntervalSeconds;
                this.IsPersisted = workflowType.IsPersisted;
                this.LoggingLevel = workflowType.LoggingLevel;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is WorkflowType )
            {
                var workflowType = (WorkflowType)model;
                workflowType.IsSystem = this.IsSystem;
                workflowType.IsActive = this.IsActive;
                workflowType.Name = this.Name;
                workflowType.Description = this.Description;
                workflowType.CategoryId = this.CategoryId;
                workflowType.Order = this.Order;
                workflowType.FileId = this.FileId;
                workflowType.WorkTerm = this.WorkTerm;
                workflowType.ProcessingIntervalSeconds = this.ProcessingIntervalSeconds;
                workflowType.IsPersisted = this.IsPersisted;
                workflowType.LoggingLevel = this.LoggingLevel;
            }
        }

    }


    /// <summary>
    /// WorkflowType Extension Methods
    /// </summary>
    public static class WorkflowTypeExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowType ToModel( this WorkflowTypeDto value )
        {
            WorkflowType result = new WorkflowType();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowType> ToModel( this List<WorkflowTypeDto> value )
        {
            List<WorkflowType> result = new List<WorkflowType>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowTypeDto> ToDto( this List<WorkflowType> value )
        {
            List<WorkflowTypeDto> result = new List<WorkflowTypeDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowTypeDto ToDto( this WorkflowType value )
        {
            return new WorkflowTypeDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this WorkflowType value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<WorkflowType> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this WorkflowType value, bool deep = false )
        {
            dynamic dynamicWorkflowType = new WorkflowTypeDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicWorkflowType;
            }

            dynamicWorkflowType.Category = value.Category.ToDynamic();
            dynamicWorkflowType.File = value.File.ToDynamic();
            dynamicWorkflowType.ActivityTypes = value.ActivityTypes.ToDynamic();

            return dynamicWorkflowType;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this Page value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this WorkflowType value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {
                        new CategoryDto().FromDynamic( dict["Category"] ).CopyToModel(value.Category);
                        new BinaryFileDto().FromDynamic( dict["File"] ).CopyToModel(value.File);

                        // ActivityTypes
                        var ActivityTypesList = dict["ActivityTypes"] as List<object>;
                        if (ActivityTypesList != null)
                        {
                            value.ActivityTypes = new List<WorkflowActivityType>();
                            foreach(object childObj in ActivityTypesList)
                            {
                                var WorkflowActivityType = new WorkflowActivityType();
                                new WorkflowActivityTypeDto().FromDynamic(childObj).CopyToModel(WorkflowActivityType);
                                value.ActivityTypes.Add(WorkflowActivityType);
                            }
                        }

                    }
                }
            }
        }

    }
}