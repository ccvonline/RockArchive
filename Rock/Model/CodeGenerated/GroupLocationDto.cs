//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for GroupLocation object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class GroupLocationDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public int GroupId { get; set; }

        /// <summary />
        [DataMember]
        public int LocationId { get; set; }

        /// <summary />
        [DataMember]
        public int? LocationTypeId { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public GroupLocationDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="groupLocation"></param>
        public GroupLocationDto ( GroupLocation groupLocation )
        {
            CopyFromModel( groupLocation );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "GroupId", this.GroupId );
            dictionary.Add( "LocationId", this.LocationId );
            dictionary.Add( "LocationTypeId", this.LocationTypeId );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.GroupId = this.GroupId;
            expando.LocationId = this.LocationId;
            expando.LocationTypeId = this.LocationTypeId;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is GroupLocation )
            {
                var groupLocation = (GroupLocation)model;
                this.GroupId = groupLocation.GroupId;
                this.LocationId = groupLocation.LocationId;
                this.LocationTypeId = groupLocation.LocationTypeId;
                this.Id = groupLocation.Id;
                this.Guid = groupLocation.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is GroupLocation )
            {
                var groupLocation = (GroupLocation)model;
                groupLocation.GroupId = this.GroupId;
                groupLocation.LocationId = this.LocationId;
                groupLocation.LocationTypeId = this.LocationTypeId;
                groupLocation.Id = this.Id;
                groupLocation.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class GroupLocationDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static GroupLocation ToModel( this GroupLocationDto value )
        {
            GroupLocation result = new GroupLocation();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<GroupLocation> ToModel( this List<GroupLocationDto> value )
        {
            List<GroupLocation> result = new List<GroupLocation>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<GroupLocationDto> ToDto( this List<GroupLocation> value )
        {
            List<GroupLocationDto> result = new List<GroupLocationDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static GroupLocationDto ToDto( this GroupLocation value )
        {
            return new GroupLocationDto( value );
        }

    }
}