//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Group object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class GroupDto : DtoSecured<GroupDto>
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int? ParentGroupId { get; set; }

        /// <summary />
        [DataMember]
        public int GroupTypeId { get; set; }

        /// <summary />
        [DataMember]
        public int? CampusId { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public bool IsSecurityRole { get; set; }

        /// <summary />
        [DataMember]
        public bool IsActive { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public GroupDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="group"></param>
        public GroupDto ( Group group )
        {
            CopyFromModel( group );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "ParentGroupId", this.ParentGroupId );
            dictionary.Add( "GroupTypeId", this.GroupTypeId );
            dictionary.Add( "CampusId", this.CampusId );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "IsSecurityRole", this.IsSecurityRole );
            dictionary.Add( "IsActive", this.IsActive );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.ParentGroupId = this.ParentGroupId;
            expando.GroupTypeId = this.GroupTypeId;
            expando.CampusId = this.CampusId;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.IsSecurityRole = this.IsSecurityRole;
            expando.IsActive = this.IsActive;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is Group )
            {
                var group = (Group)model;
                this.IsSystem = group.IsSystem;
                this.ParentGroupId = group.ParentGroupId;
                this.GroupTypeId = group.GroupTypeId;
                this.CampusId = group.CampusId;
                this.Name = group.Name;
                this.Description = group.Description;
                this.IsSecurityRole = group.IsSecurityRole;
                this.IsActive = group.IsActive;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is Group )
            {
                var group = (Group)model;
                group.IsSystem = this.IsSystem;
                group.ParentGroupId = this.ParentGroupId;
                group.GroupTypeId = this.GroupTypeId;
                group.CampusId = this.CampusId;
                group.Name = this.Name;
                group.Description = this.Description;
                group.IsSecurityRole = this.IsSecurityRole;
                group.IsActive = this.IsActive;
            }
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class GroupDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Group ToModel( this GroupDto value )
        {
            Group result = new Group();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Group> ToModel( this List<GroupDto> value )
        {
            List<Group> result = new List<Group>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<GroupDto> ToDto( this List<Group> value )
        {
            List<GroupDto> result = new List<GroupDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static GroupDto ToDto( this Group value )
        {
            return new GroupDto( value );
        }

    }
}