//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// WorkflowType Service class
    /// </summary>
    public partial class WorkflowTypeService : Service<WorkflowType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTypeService"/> class
        /// </summary>
        public WorkflowTypeService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTypeService"/> class
        /// </summary>
        public WorkflowTypeService(IRepository<WorkflowType> repository) : base(repository)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( WorkflowType item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class WorkflowTypeExtension
    {
        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowType Clone( this WorkflowType entity )
        {
            var newEntity = new WorkflowType();

            newEntity.IsSystem = entity.IsSystem;
            newEntity.IsActive = entity.IsActive;
            newEntity.Name = entity.Name;
            newEntity.Description = entity.Description;
            newEntity.CategoryId = entity.CategoryId;
            newEntity.Order = entity.Order;
            newEntity.FileId = entity.FileId;
            newEntity.WorkTerm = entity.WorkTerm;
            newEntity.ProcessingIntervalSeconds = entity.ProcessingIntervalSeconds;
            newEntity.IsPersisted = entity.IsPersisted;
            newEntity.LoggingLevel = entity.LoggingLevel;
            newEntity.Id = entity.Id;
            newEntity.Guid = entity.Guid;

            return newEntity;
        }

    }
}