//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;
using System.Data.Spatial;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Location object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class LocationDto : DtoSecured<LocationDto>
    {
        /// <summary />
        [DataMember]
        public int? ParentLocationId { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public bool IsActive { get; set; }

        /// <summary />
        [DataMember]
        public DbGeography LocationPoint { get; set; }

        /// <summary />
        [DataMember]
        public DbGeography Perimeter { get; set; }

        /// <summary />
        [DataMember]
        public int? LocationTypeValueId { get; set; }

        /// <summary />
        [DataMember]
        public string Street1 { get; set; }

        /// <summary />
        [DataMember]
        public string Street2 { get; set; }

        /// <summary />
        [DataMember]
        public string City { get; set; }

        /// <summary />
        [DataMember]
        public string State { get; set; }

        /// <summary />
        [DataMember]
        public string Country { get; set; }

        /// <summary />
        [DataMember]
        public string Zip { get; set; }

        /// <summary />
        [DataMember]
        public string FullAddress { get; set; }

        /// <summary />
        [DataMember]
        public string AssessorParcelId { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? StandardizeAttemptedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public string StandardizeAttemptedServiceType { get; set; }

        /// <summary />
        [DataMember]
        public string StandardizeAttemptedResult { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? StandardizedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? GeocodeAttemptedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public string GeocodeAttemptedServiceType { get; set; }

        /// <summary />
        [DataMember]
        public string GeocodeAttemptedResult { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? GeocodedDateTime { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public LocationDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="location"></param>
        public LocationDto ( Location location )
        {
            CopyFromModel( location );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "ParentLocationId", this.ParentLocationId );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "IsActive", this.IsActive );
            dictionary.Add( "LocationPoint", this.LocationPoint );
            dictionary.Add( "Perimeter", this.Perimeter );
            dictionary.Add( "LocationTypeValueId", this.LocationTypeValueId );
            dictionary.Add( "Street1", this.Street1 );
            dictionary.Add( "Street2", this.Street2 );
            dictionary.Add( "City", this.City );
            dictionary.Add( "State", this.State );
            dictionary.Add( "Country", this.Country );
            dictionary.Add( "Zip", this.Zip );
            dictionary.Add( "FullAddress", this.FullAddress );
            dictionary.Add( "AssessorParcelId", this.AssessorParcelId );
            dictionary.Add( "StandardizeAttemptedDateTime", this.StandardizeAttemptedDateTime );
            dictionary.Add( "StandardizeAttemptedServiceType", this.StandardizeAttemptedServiceType );
            dictionary.Add( "StandardizeAttemptedResult", this.StandardizeAttemptedResult );
            dictionary.Add( "StandardizedDateTime", this.StandardizedDateTime );
            dictionary.Add( "GeocodeAttemptedDateTime", this.GeocodeAttemptedDateTime );
            dictionary.Add( "GeocodeAttemptedServiceType", this.GeocodeAttemptedServiceType );
            dictionary.Add( "GeocodeAttemptedResult", this.GeocodeAttemptedResult );
            dictionary.Add( "GeocodedDateTime", this.GeocodedDateTime );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.ParentLocationId = this.ParentLocationId;
            expando.Name = this.Name;
            expando.IsActive = this.IsActive;
            expando.LocationPoint = this.LocationPoint;
            expando.Perimeter = this.Perimeter;
            expando.LocationTypeValueId = this.LocationTypeValueId;
            expando.Street1 = this.Street1;
            expando.Street2 = this.Street2;
            expando.City = this.City;
            expando.State = this.State;
            expando.Country = this.Country;
            expando.Zip = this.Zip;
            expando.FullAddress = this.FullAddress;
            expando.AssessorParcelId = this.AssessorParcelId;
            expando.StandardizeAttemptedDateTime = this.StandardizeAttemptedDateTime;
            expando.StandardizeAttemptedServiceType = this.StandardizeAttemptedServiceType;
            expando.StandardizeAttemptedResult = this.StandardizeAttemptedResult;
            expando.StandardizedDateTime = this.StandardizedDateTime;
            expando.GeocodeAttemptedDateTime = this.GeocodeAttemptedDateTime;
            expando.GeocodeAttemptedServiceType = this.GeocodeAttemptedServiceType;
            expando.GeocodeAttemptedResult = this.GeocodeAttemptedResult;
            expando.GeocodedDateTime = this.GeocodedDateTime;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is Location )
            {
                var location = (Location)model;
                this.ParentLocationId = location.ParentLocationId;
                this.Name = location.Name;
                this.IsActive = location.IsActive;
                this.LocationPoint = location.LocationPoint;
                this.Perimeter = location.Perimeter;
                this.LocationTypeValueId = location.LocationTypeValueId;
                this.Street1 = location.Street1;
                this.Street2 = location.Street2;
                this.City = location.City;
                this.State = location.State;
                this.Country = location.Country;
                this.Zip = location.Zip;
                this.FullAddress = location.FullAddress;
                this.AssessorParcelId = location.AssessorParcelId;
                this.StandardizeAttemptedDateTime = location.StandardizeAttemptedDateTime;
                this.StandardizeAttemptedServiceType = location.StandardizeAttemptedServiceType;
                this.StandardizeAttemptedResult = location.StandardizeAttemptedResult;
                this.StandardizedDateTime = location.StandardizedDateTime;
                this.GeocodeAttemptedDateTime = location.GeocodeAttemptedDateTime;
                this.GeocodeAttemptedServiceType = location.GeocodeAttemptedServiceType;
                this.GeocodeAttemptedResult = location.GeocodeAttemptedResult;
                this.GeocodedDateTime = location.GeocodedDateTime;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is Location )
            {
                var location = (Location)model;
                location.ParentLocationId = this.ParentLocationId;
                location.Name = this.Name;
                location.IsActive = this.IsActive;
                location.LocationPoint = this.LocationPoint;
                location.Perimeter = this.Perimeter;
                location.LocationTypeValueId = this.LocationTypeValueId;
                location.Street1 = this.Street1;
                location.Street2 = this.Street2;
                location.City = this.City;
                location.State = this.State;
                location.Country = this.Country;
                location.Zip = this.Zip;
                location.FullAddress = this.FullAddress;
                location.AssessorParcelId = this.AssessorParcelId;
                location.StandardizeAttemptedDateTime = this.StandardizeAttemptedDateTime;
                location.StandardizeAttemptedServiceType = this.StandardizeAttemptedServiceType;
                location.StandardizeAttemptedResult = this.StandardizeAttemptedResult;
                location.StandardizedDateTime = this.StandardizedDateTime;
                location.GeocodeAttemptedDateTime = this.GeocodeAttemptedDateTime;
                location.GeocodeAttemptedServiceType = this.GeocodeAttemptedServiceType;
                location.GeocodeAttemptedResult = this.GeocodeAttemptedResult;
                location.GeocodedDateTime = this.GeocodedDateTime;
            }
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class LocationDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Location ToModel( this LocationDto value )
        {
            Location result = new Location();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Location> ToModel( this List<LocationDto> value )
        {
            List<Location> result = new List<Location>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<LocationDto> ToDto( this List<Location> value )
        {
            List<LocationDto> result = new List<LocationDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static LocationDto ToDto( this Location value )
        {
            return new LocationDto( value );
        }

    }
}