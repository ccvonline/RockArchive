//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Schedule object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class ScheduleDto : DtoSecured<ScheduleDto>
    {
        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public ScheduleFrequency Frequency { get; set; }

        /// <summary />
        [DataMember]
        public string FrequencyQualifier { get; set; }

        /// <summary />
        [DataMember]
        public DateTime StartTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime EndTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? CheckInStartTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? CheckInEndTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTimeOffset? EffectiveStartDate { get; set; }

        /// <summary />
        [DataMember]
        public DateTimeOffset? EffectiveEndDate { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public ScheduleDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="schedule"></param>
        public ScheduleDto ( Schedule schedule )
        {
            CopyFromModel( schedule );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Frequency", this.Frequency );
            dictionary.Add( "FrequencyQualifier", this.FrequencyQualifier );
            dictionary.Add( "StartTime", this.StartTime );
            dictionary.Add( "EndTime", this.EndTime );
            dictionary.Add( "CheckInStartTime", this.CheckInStartTime );
            dictionary.Add( "CheckInEndTime", this.CheckInEndTime );
            dictionary.Add( "EffectiveStartDate", this.EffectiveStartDate );
            dictionary.Add( "EffectiveEndDate", this.EffectiveEndDate );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.Name = this.Name;
            expando.Frequency = this.Frequency;
            expando.FrequencyQualifier = this.FrequencyQualifier;
            expando.StartTime = this.StartTime;
            expando.EndTime = this.EndTime;
            expando.CheckInStartTime = this.CheckInStartTime;
            expando.CheckInEndTime = this.CheckInEndTime;
            expando.EffectiveStartDate = this.EffectiveStartDate;
            expando.EffectiveEndDate = this.EffectiveEndDate;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is Schedule )
            {
                var schedule = (Schedule)model;
                this.Name = schedule.Name;
                this.Frequency = schedule.Frequency;
                this.FrequencyQualifier = schedule.FrequencyQualifier;
                this.StartTime = schedule.StartTime;
                this.EndTime = schedule.EndTime;
                this.CheckInStartTime = schedule.CheckInStartTime;
                this.CheckInEndTime = schedule.CheckInEndTime;
                this.EffectiveStartDate = schedule.EffectiveStartDate;
                this.EffectiveEndDate = schedule.EffectiveEndDate;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is Schedule )
            {
                var schedule = (Schedule)model;
                schedule.Name = this.Name;
                schedule.Frequency = this.Frequency;
                schedule.FrequencyQualifier = this.FrequencyQualifier;
                schedule.StartTime = this.StartTime;
                schedule.EndTime = this.EndTime;
                schedule.CheckInStartTime = this.CheckInStartTime;
                schedule.CheckInEndTime = this.CheckInEndTime;
                schedule.EffectiveStartDate = this.EffectiveStartDate;
                schedule.EffectiveEndDate = this.EffectiveEndDate;
            }
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class ScheduleDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Schedule ToModel( this ScheduleDto value )
        {
            Schedule result = new Schedule();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Schedule> ToModel( this List<ScheduleDto> value )
        {
            List<Schedule> result = new List<Schedule>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<ScheduleDto> ToDto( this List<Schedule> value )
        {
            List<ScheduleDto> result = new List<ScheduleDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ScheduleDto ToDto( this Schedule value )
        {
            return new ScheduleDto( value );
        }

    }
}