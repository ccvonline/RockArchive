//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for FinancialTransaction object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class FinancialTransactionDto : DtoSecured<FinancialTransactionDto>
    {
        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? TransactionDate { get; set; }

        /// <summary />
        [DataMember]
        public string Entity { get; set; }

        /// <summary />
        [DataMember]
        public int? EntityId { get; set; }

        /// <summary />
        [DataMember]
        public int? BatchId { get; set; }

        /// <summary />
        [DataMember]
        public int? CurrencyTypeId { get; set; }

        /// <summary />
        [DataMember]
        public int? CreditCardTypeId { get; set; }

        /// <summary />
        [DataMember]
        public decimal Amount { get; set; }

        /// <summary />
        [DataMember]
        public int? RefundTransactionId { get; set; }

        /// <summary />
        [DataMember]
        public int? TransactionImageId { get; set; }

        /// <summary />
        [DataMember]
        public string TransactionCode { get; set; }

        /// <summary />
        [DataMember]
        public int? GatewayId { get; set; }

        /// <summary />
        [DataMember]
        public int? SourceTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string Summary { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public FinancialTransactionDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="financialTransaction"></param>
        public FinancialTransactionDto ( FinancialTransaction financialTransaction )
        {
            CopyFromModel( financialTransaction );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "TransactionDate", this.TransactionDate );
            dictionary.Add( "Entity", this.Entity );
            dictionary.Add( "EntityId", this.EntityId );
            dictionary.Add( "BatchId", this.BatchId );
            dictionary.Add( "CurrencyTypeId", this.CurrencyTypeId );
            dictionary.Add( "CreditCardTypeId", this.CreditCardTypeId );
            dictionary.Add( "Amount", this.Amount );
            dictionary.Add( "RefundTransactionId", this.RefundTransactionId );
            dictionary.Add( "TransactionImageId", this.TransactionImageId );
            dictionary.Add( "TransactionCode", this.TransactionCode );
            dictionary.Add( "GatewayId", this.GatewayId );
            dictionary.Add( "SourceTypeId", this.SourceTypeId );
            dictionary.Add( "Summary", this.Summary );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.Description = this.Description;
            expando.TransactionDate = this.TransactionDate;
            expando.Entity = this.Entity;
            expando.EntityId = this.EntityId;
            expando.BatchId = this.BatchId;
            expando.CurrencyTypeId = this.CurrencyTypeId;
            expando.CreditCardTypeId = this.CreditCardTypeId;
            expando.Amount = this.Amount;
            expando.RefundTransactionId = this.RefundTransactionId;
            expando.TransactionImageId = this.TransactionImageId;
            expando.TransactionCode = this.TransactionCode;
            expando.GatewayId = this.GatewayId;
            expando.SourceTypeId = this.SourceTypeId;
            expando.Summary = this.Summary;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is FinancialTransaction )
            {
                var financialTransaction = (FinancialTransaction)model;
                this.Description = financialTransaction.Description;
                this.TransactionDate = financialTransaction.TransactionDate;
                this.Entity = financialTransaction.Entity;
                this.EntityId = financialTransaction.EntityId;
                this.BatchId = financialTransaction.BatchId;
                this.CurrencyTypeId = financialTransaction.CurrencyTypeId;
                this.CreditCardTypeId = financialTransaction.CreditCardTypeId;
                this.Amount = financialTransaction.Amount;
                this.RefundTransactionId = financialTransaction.RefundTransactionId;
                this.TransactionImageId = financialTransaction.TransactionImageId;
                this.TransactionCode = financialTransaction.TransactionCode;
                this.GatewayId = financialTransaction.GatewayId;
                this.SourceTypeId = financialTransaction.SourceTypeId;
                this.Summary = financialTransaction.Summary;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is FinancialTransaction )
            {
                var financialTransaction = (FinancialTransaction)model;
                financialTransaction.Description = this.Description;
                financialTransaction.TransactionDate = this.TransactionDate;
                financialTransaction.Entity = this.Entity;
                financialTransaction.EntityId = this.EntityId;
                financialTransaction.BatchId = this.BatchId;
                financialTransaction.CurrencyTypeId = this.CurrencyTypeId;
                financialTransaction.CreditCardTypeId = this.CreditCardTypeId;
                financialTransaction.Amount = this.Amount;
                financialTransaction.RefundTransactionId = this.RefundTransactionId;
                financialTransaction.TransactionImageId = this.TransactionImageId;
                financialTransaction.TransactionCode = this.TransactionCode;
                financialTransaction.GatewayId = this.GatewayId;
                financialTransaction.SourceTypeId = this.SourceTypeId;
                financialTransaction.Summary = this.Summary;
            }
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class FinancialTransactionDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static FinancialTransaction ToModel( this FinancialTransactionDto value )
        {
            FinancialTransaction result = new FinancialTransaction();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<FinancialTransaction> ToModel( this List<FinancialTransactionDto> value )
        {
            List<FinancialTransaction> result = new List<FinancialTransaction>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<FinancialTransactionDto> ToDto( this List<FinancialTransaction> value )
        {
            List<FinancialTransactionDto> result = new List<FinancialTransactionDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static FinancialTransactionDto ToDto( this FinancialTransaction value )
        {
            return new FinancialTransactionDto( value );
        }

    }
}