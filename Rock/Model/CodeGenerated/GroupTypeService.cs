//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// GroupType Service class
    /// </summary>
    public partial class GroupTypeService : Service<GroupType>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupTypeService"/> class
        /// </summary>
        public GroupTypeService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupTypeService"/> class
        /// </summary>
        public GroupTypeService(IRepository<GroupType> repository) : base(repository)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( GroupType item, out string errorMessage )
        {
            errorMessage = string.Empty;
 
            if ( new Service<Group>().Queryable().Any( a => a.GroupTypeId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", GroupType.FriendlyTypeName, Group.FriendlyTypeName );
                return false;
            }  
            
            // ignoring GroupTypeAssociation,GroupTypeId 
            
            // ignoring GroupTypeAssociation,ChildGroupTypeId 
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static class GroupTypeExtensionMethods
    {
        /// <summary>
        /// Copies all the entity properties from another GroupType entity
        /// </summary>
        public static void CopyPropertiesFrom( this GroupType target, GroupType source )
        {
            target.IsSystem = source.IsSystem;
            target.Name = source.Name;
            target.Description = source.Description;
            target.GroupTerm = source.GroupTerm;
            target.GroupMemberTerm = source.GroupMemberTerm;
            target.DefaultGroupRoleId = source.DefaultGroupRoleId;
            target.AllowMultipleLocations = source.AllowMultipleLocations;
            target.ShowInGroupList = source.ShowInGroupList;
            target.IconSmallFileId = source.IconSmallFileId;
            target.IconLargeFileId = source.IconLargeFileId;
            target.IconCssClass = source.IconCssClass;
            target.TakesAttendance = source.TakesAttendance;
            target.AttendanceRule = source.AttendanceRule;
            target.AttendancePrintTo = source.AttendancePrintTo;
            target.Id = source.Id;
            target.Guid = source.Guid;

        }
    }
}
