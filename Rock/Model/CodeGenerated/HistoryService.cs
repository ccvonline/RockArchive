//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// History Service class
    /// </summary>
    public partial class HistoryService : Service<History>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryService"/> class
        /// </summary>
        public HistoryService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryService"/> class
        /// </summary>
        /// <param name="repository">The repository.</param>
        public HistoryService(IRepository<History> repository) : base(repository)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HistoryService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public HistoryService(RockContext context) : base(context)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( History item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class HistoryExtensionMethods
    {
        /// <summary>
        /// Clones this History object to a new History object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static History Clone( this History source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as History;
            }
            else
            {
                var target = new History();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Copies the properties from another History object to this History object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this History target, History source )
        {
            target.IsSystem = source.IsSystem;
            target.EntityTypeId = source.EntityTypeId;
            target.CategoryId = source.CategoryId;
            target.EntityId = source.EntityId;
            target.Caption = source.Caption;
            target.Summary = source.Summary;
            target.RelatedEntityTypeId = source.RelatedEntityTypeId;
            target.RelatedEntityId = source.RelatedEntityId;
            target.CreatedByPersonId = source.CreatedByPersonId;
            target.CreationDateTime = source.CreationDateTime;
            target.Id = source.Id;
            target.Guid = source.Guid;

        }
    }
}
