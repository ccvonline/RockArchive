//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// EmailTemplate Service class
    /// </summary>
    public partial class EmailTemplateService : Service<EmailTemplate>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailTemplateService"/> class
        /// </summary>
        public EmailTemplateService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailTemplateService"/> class
        /// </summary>
        public EmailTemplateService(IRepository<EmailTemplate> repository) : base(repository)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( EmailTemplate item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static class EmailTemplateExtensionMethods
    {
        /// <summary>
        /// Copies all the entity properties from another EmailTemplate entity
        /// </summary>
        public static void CopyPropertiesFrom( this EmailTemplate target, EmailTemplate source )
        {
            target.IsSystem = source.IsSystem;
            target.PersonId = source.PersonId;
            target.Category = source.Category;
            target.Title = source.Title;
            target.From = source.From;
            target.To = source.To;
            target.Cc = source.Cc;
            target.Bcc = source.Bcc;
            target.Subject = source.Subject;
            target.Body = source.Body;
            target.Id = source.Id;
            target.Guid = source.Guid;

        }
    }
}
