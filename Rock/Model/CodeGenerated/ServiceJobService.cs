//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// ServiceJob Service class
    /// </summary>
    public partial class ServiceJobService : Service<ServiceJob>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceJobService"/> class
        /// </summary>
        public ServiceJobService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceJobService"/> class
        /// </summary>
        public ServiceJobService(IRepository<ServiceJob> repository) : base(repository)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( ServiceJob item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class ServiceJobExtension
    {
        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static ServiceJob Clone( this ServiceJob entity )
        {
            var newEntity = new ServiceJob();

            newEntity.IsSystem = entity.IsSystem;
            newEntity.IsActive = entity.IsActive;
            newEntity.Name = entity.Name;
            newEntity.Description = entity.Description;
            newEntity.Assembly = entity.Assembly;
            newEntity.Class = entity.Class;
            newEntity.CronExpression = entity.CronExpression;
            newEntity.LastSuccessfulRunDateTime = entity.LastSuccessfulRunDateTime;
            newEntity.LastRunDateTime = entity.LastRunDateTime;
            newEntity.LastRunDurationSeconds = entity.LastRunDurationSeconds;
            newEntity.LastStatus = entity.LastStatus;
            newEntity.LastStatusMessage = entity.LastStatusMessage;
            newEntity.LastRunSchedulerName = entity.LastRunSchedulerName;
            newEntity.NotificationEmails = entity.NotificationEmails;
            newEntity.NotificationStatus = entity.NotificationStatus;
            newEntity.Id = entity.Id;
            newEntity.Guid = entity.Guid;

            return newEntity;
        }

    }
}