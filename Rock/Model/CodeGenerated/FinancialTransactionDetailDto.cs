//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for FinancialTransactionDetail object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class FinancialTransactionDetailDto : DtoSecured<FinancialTransactionDetailDto>
    {
        /// <summary />
        [DataMember]
        public int? TransactionId { get; set; }

        /// <summary />
        [DataMember]
        public string Entity { get; set; }

        /// <summary />
        [DataMember]
        public string EntityId { get; set; }

        /// <summary />
        [DataMember]
        public decimal Amount { get; set; }

        /// <summary />
        [DataMember]
        public string Summary { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public FinancialTransactionDetailDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="financialTransactionDetail"></param>
        public FinancialTransactionDetailDto ( FinancialTransactionDetail financialTransactionDetail )
        {
            CopyFromModel( financialTransactionDetail );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "TransactionId", this.TransactionId );
            dictionary.Add( "Entity", this.Entity );
            dictionary.Add( "EntityId", this.EntityId );
            dictionary.Add( "Amount", this.Amount );
            dictionary.Add( "Summary", this.Summary );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.TransactionId = this.TransactionId;
            expando.Entity = this.Entity;
            expando.EntityId = this.EntityId;
            expando.Amount = this.Amount;
            expando.Summary = this.Summary;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is FinancialTransactionDetail )
            {
                var financialTransactionDetail = (FinancialTransactionDetail)model;
                this.TransactionId = financialTransactionDetail.TransactionId;
                this.Entity = financialTransactionDetail.Entity;
                this.EntityId = financialTransactionDetail.EntityId;
                this.Amount = financialTransactionDetail.Amount;
                this.Summary = financialTransactionDetail.Summary;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is FinancialTransactionDetail )
            {
                var financialTransactionDetail = (FinancialTransactionDetail)model;
                financialTransactionDetail.TransactionId = this.TransactionId;
                financialTransactionDetail.Entity = this.Entity;
                financialTransactionDetail.EntityId = this.EntityId;
                financialTransactionDetail.Amount = this.Amount;
                financialTransactionDetail.Summary = this.Summary;
            }
        }

    }


    /// <summary>
    /// FinancialTransactionDetail Extension Methods
    /// </summary>
    public static class FinancialTransactionDetailExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static FinancialTransactionDetail ToModel( this FinancialTransactionDetailDto value )
        {
            FinancialTransactionDetail result = new FinancialTransactionDetail();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<FinancialTransactionDetail> ToModel( this List<FinancialTransactionDetailDto> value )
        {
            List<FinancialTransactionDetail> result = new List<FinancialTransactionDetail>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<FinancialTransactionDetailDto> ToDto( this List<FinancialTransactionDetail> value )
        {
            List<FinancialTransactionDetailDto> result = new List<FinancialTransactionDetailDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static FinancialTransactionDetailDto ToDto( this FinancialTransactionDetail value )
        {
            return new FinancialTransactionDetailDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this FinancialTransactionDetail value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<FinancialTransactionDetail> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this FinancialTransactionDetail value, bool deep = false )
        {
            dynamic dynamicFinancialTransactionDetail = new FinancialTransactionDetailDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicFinancialTransactionDetail;
            }

            dynamicFinancialTransactionDetail.Transaction = value.Transaction.ToDynamic();

            return dynamicFinancialTransactionDetail;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this Page value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this FinancialTransactionDetail value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {
                        new FinancialTransactionDto().FromDynamic( dict["Transaction"] ).CopyToModel(value.Transaction);

                    }
                }
            }
        }

    }
}