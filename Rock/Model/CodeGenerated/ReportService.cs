//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright 2013 by the Spark Development Network
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//
using System;
using System.Data.Entity;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Report Service class
    /// </summary>
    public partial class ReportService : Service<Report>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public ReportService(RockContext context) : base(context)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( Report item, out string errorMessage )
        {
            errorMessage = string.Empty;
            return true;
        }

        /// <summary>
        /// Create a new non-persisted Report using an existing Report as a template. 
        /// </summary>
        /// <param name="reportId">The identifier of a Report to use as a template for the new Report.</param>
        /// <returns></returns>
        public Report GetNewFromTemplate( int reportId )
        {
            var existingReport = this.Queryable()
                                     .AsNoTracking()
                                     .Include( x => x.ReportFields )
                                     .FirstOrDefault( x => x.Id == reportId );

            if ( existingReport == null )
            {
                throw new Exception( string.Format( "GetNewFromTemplate method failed. Template Report ID \"{0}\" could not be found.", reportId ) );
            }

            // Deep-clone the Report and reset the properties that connect it to the permanent store.
            var newReport = (Report)( existingReport.Clone( true ) );

            newReport.Id = 0;
            newReport.Guid = Guid.NewGuid();
            newReport.ForeignId = null;

            // Reset the Report Field properties.
            foreach ( var field in newReport.ReportFields )
            {
                field.Id = 0;
                field.Guid = Guid.NewGuid();
                field.ForeignId = null;

                field.ReportId = 0;
            }

            return newReport;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class ReportExtensionMethods
    {
        /// <summary>
        /// Clones this Report object to a new Report object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static Report Clone( this Report source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as Report;
            }
            else
            {
                var target = new Report();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Copies the properties from another Report object to this Report object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this Report target, Report source )
        {
            target.Id = source.Id;
            target.CategoryId = source.CategoryId;
            target.DataViewId = source.DataViewId;
            target.Description = source.Description;
            target.EntityTypeId = source.EntityTypeId;
            target.FetchTop = source.FetchTop;
            target.IsSystem = source.IsSystem;
            target.Name = source.Name;
            target.CreatedDateTime = source.CreatedDateTime;
            target.ModifiedDateTime = source.ModifiedDateTime;
            target.CreatedByPersonAliasId = source.CreatedByPersonAliasId;
            target.ModifiedByPersonAliasId = source.ModifiedByPersonAliasId;
            target.Guid = source.Guid;
            target.ForeignId = source.ForeignId;

        }
    }
}
