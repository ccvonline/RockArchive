//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for GroupType object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class GroupTypeDto : DtoSecured<GroupTypeDto>
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public int? DefaultGroupRoleId { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public GroupTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="groupType"></param>
        public GroupTypeDto ( GroupType groupType )
        {
            CopyFromModel( groupType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "DefaultGroupRoleId", this.DefaultGroupRoleId );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.DefaultGroupRoleId = this.DefaultGroupRoleId;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is GroupType )
            {
                var groupType = (GroupType)model;
                this.IsSystem = groupType.IsSystem;
                this.Name = groupType.Name;
                this.Description = groupType.Description;
                this.DefaultGroupRoleId = groupType.DefaultGroupRoleId;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is GroupType )
            {
                var groupType = (GroupType)model;
                groupType.IsSystem = this.IsSystem;
                groupType.Name = this.Name;
                groupType.Description = this.Description;
                groupType.DefaultGroupRoleId = this.DefaultGroupRoleId;
            }
        }

    }


    /// <summary>
    /// GroupType Extension Methods
    /// </summary>
    public static class GroupTypeExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static GroupType ToModel( this GroupTypeDto value )
        {
            GroupType result = new GroupType();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<GroupType> ToModel( this List<GroupTypeDto> value )
        {
            List<GroupType> result = new List<GroupType>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<GroupTypeDto> ToDto( this List<GroupType> value )
        {
            List<GroupTypeDto> result = new List<GroupTypeDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static GroupTypeDto ToDto( this GroupType value )
        {
            return new GroupTypeDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this GroupType value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<GroupType> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this GroupType value, bool deep = false )
        {
            dynamic dynamicGroupType = new GroupTypeDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicGroupType;
            }


            if (value.Groups != null)
            {
                dynamicGroupType.Groups = value.Groups.ToDynamic();
            }

            if (value.ChildGroupTypes != null)
            {
                dynamicGroupType.ChildGroupTypes = value.ChildGroupTypes.ToDynamic();
            }

            if (value.ParentGroupTypes != null)
            {
                dynamicGroupType.ParentGroupTypes = value.ParentGroupTypes.ToDynamic();
            }

            if (value.Roles != null)
            {
                dynamicGroupType.Roles = value.Roles.ToDynamic();
            }

            if (value.DefaultGroupRole != null)
            {
                dynamicGroupType.DefaultGroupRole = value.DefaultGroupRole.ToDynamic();
            }

            return dynamicGroupType;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this GroupType value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this GroupType value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        // Groups
                        if (dict.ContainsKey("Groups"))
                        {
                            var GroupsList = dict["Groups"] as List<object>;
                            if (GroupsList != null)
                            {
                                value.Groups = new List<Group>();
                                foreach(object childObj in GroupsList)
                                {
                                    var Group = new Group();
                                    new GroupDto().FromDynamic(childObj).CopyToModel(Group);
                                    value.Groups.Add(Group);
                                }
                            }
                        }

                        // ChildGroupTypes
                        if (dict.ContainsKey("ChildGroupTypes"))
                        {
                            var ChildGroupTypesList = dict["ChildGroupTypes"] as List<object>;
                            if (ChildGroupTypesList != null)
                            {
                                value.ChildGroupTypes = new List<GroupType>();
                                foreach(object childObj in ChildGroupTypesList)
                                {
                                    var GroupType = new GroupType();
                                    new GroupTypeDto().FromDynamic(childObj).CopyToModel(GroupType);
                                    value.ChildGroupTypes.Add(GroupType);
                                }
                            }
                        }

                        // ParentGroupTypes
                        if (dict.ContainsKey("ParentGroupTypes"))
                        {
                            var ParentGroupTypesList = dict["ParentGroupTypes"] as List<object>;
                            if (ParentGroupTypesList != null)
                            {
                                value.ParentGroupTypes = new List<GroupType>();
                                foreach(object childObj in ParentGroupTypesList)
                                {
                                    var GroupType = new GroupType();
                                    new GroupTypeDto().FromDynamic(childObj).CopyToModel(GroupType);
                                    value.ParentGroupTypes.Add(GroupType);
                                }
                            }
                        }

                        // Roles
                        if (dict.ContainsKey("Roles"))
                        {
                            var RolesList = dict["Roles"] as List<object>;
                            if (RolesList != null)
                            {
                                value.Roles = new List<GroupRole>();
                                foreach(object childObj in RolesList)
                                {
                                    var GroupRole = new GroupRole();
                                    new GroupRoleDto().FromDynamic(childObj).CopyToModel(GroupRole);
                                    value.Roles.Add(GroupRole);
                                }
                            }
                        }

                        // DefaultGroupRole
                        if (dict.ContainsKey("DefaultGroupRole"))
                        {
                            value.DefaultGroupRole = new GroupRole();
                            new GroupRoleDto().FromDynamic( dict["DefaultGroupRole"] ).CopyToModel(value.DefaultGroupRole);
                        }

                    }
                }
            }
        }

    }
}