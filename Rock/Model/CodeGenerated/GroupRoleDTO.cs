//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for GroupRole object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class GroupRoleDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int? GroupTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public int? SortOrder { get; set; }

        /// <summary />
        [DataMember]
        public int? MaxCount { get; set; }

        /// <summary />
        [DataMember]
        public int? MinCount { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public GroupRoleDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="groupRole"></param>
        public GroupRoleDto ( GroupRole groupRole )
        {
            CopyFromModel( groupRole );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "GroupTypeId", this.GroupTypeId );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "SortOrder", this.SortOrder );
            dictionary.Add( "MaxCount", this.MaxCount );
            dictionary.Add( "MinCount", this.MinCount );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.GroupTypeId = this.GroupTypeId;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.SortOrder = this.SortOrder;
            expando.MaxCount = this.MaxCount;
            expando.MinCount = this.MinCount;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is GroupRole )
            {
                var groupRole = (GroupRole)model;
                this.IsSystem = groupRole.IsSystem;
                this.GroupTypeId = groupRole.GroupTypeId;
                this.Name = groupRole.Name;
                this.Description = groupRole.Description;
                this.SortOrder = groupRole.SortOrder;
                this.MaxCount = groupRole.MaxCount;
                this.MinCount = groupRole.MinCount;
                this.Id = groupRole.Id;
                this.Guid = groupRole.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is GroupRole )
            {
                var groupRole = (GroupRole)model;
                groupRole.IsSystem = this.IsSystem;
                groupRole.GroupTypeId = this.GroupTypeId;
                groupRole.Name = this.Name;
                groupRole.Description = this.Description;
                groupRole.SortOrder = this.SortOrder;
                groupRole.MaxCount = this.MaxCount;
                groupRole.MinCount = this.MinCount;
                groupRole.Id = this.Id;
                groupRole.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class GroupRoleDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static GroupRole ToModel( this GroupRoleDto value )
        {
            GroupRole result = new GroupRole();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<GroupRole> ToModel( this List<GroupRoleDto> value )
        {
            List<GroupRole> result = new List<GroupRole>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<GroupRoleDto> ToDto( this List<GroupRole> value )
        {
            List<GroupRoleDto> result = new List<GroupRoleDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static GroupRoleDto ToDto( this GroupRole value )
        {
            return new GroupRoleDto( value );
        }

    }
}