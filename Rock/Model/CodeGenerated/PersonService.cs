//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Person Service class
    /// </summary>
    public partial class PersonService : Service<Person>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonService"/> class
        /// </summary>
        public PersonService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonService"/> class
        /// </summary>
        public PersonService(IRepository<Person> repository) : base(repository)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( Person item, out string errorMessage )
        {
            errorMessage = string.Empty;
 
            if ( new Service<HtmlContent>().Queryable().Any( a => a.ApprovedByPersonId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", Person.FriendlyTypeName, HtmlContent.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<MarketingCampaign>().Queryable().Any( a => a.ContactPersonId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", Person.FriendlyTypeName, MarketingCampaign.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<PersonAccount>().Queryable().Any( a => a.PersonId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", Person.FriendlyTypeName, PersonAccount.FriendlyTypeName );
                return false;
            }  
            
            // ignoring PersonViewed,ViewerPersonId 
            
            // ignoring PersonViewed,TargetPersonId 
 
            if ( new Service<PhoneNumber>().Queryable().Any( a => a.PersonId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", Person.FriendlyTypeName, PhoneNumber.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<Pledge>().Queryable().Any( a => a.PersonId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", Person.FriendlyTypeName, Pledge.FriendlyTypeName );
                return false;
            }  
 
            if ( new Service<Tag>().Queryable().Any( a => a.OwnerId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", Person.FriendlyTypeName, Tag.FriendlyTypeName );
                return false;
            }  
            return true;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class PersonExtension
    {
        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Person Clone( this Person entity )
        {
            var newEntity = new Person();

            newEntity.IsSystem = entity.IsSystem;
            newEntity.RecordTypeValueId = entity.RecordTypeValueId;
            newEntity.RecordStatusValueId = entity.RecordStatusValueId;
            newEntity.RecordStatusReasonValueId = entity.RecordStatusReasonValueId;
            newEntity.PersonStatusValueId = entity.PersonStatusValueId;
            newEntity.TitleValueId = entity.TitleValueId;
            newEntity.GivenName = entity.GivenName;
            newEntity.NickName = entity.NickName;
            newEntity.LastName = entity.LastName;
            newEntity.SuffixValueId = entity.SuffixValueId;
            newEntity.PhotoId = entity.PhotoId;
            newEntity.BirthDay = entity.BirthDay;
            newEntity.BirthMonth = entity.BirthMonth;
            newEntity.BirthYear = entity.BirthYear;
            newEntity.Gender = entity.Gender;
            newEntity.MaritalStatusValueId = entity.MaritalStatusValueId;
            newEntity.AnniversaryDate = entity.AnniversaryDate;
            newEntity.GraduationDate = entity.GraduationDate;
            newEntity.Email = entity.Email;
            newEntity.IsEmailActive = entity.IsEmailActive;
            newEntity.EmailNote = entity.EmailNote;
            newEntity.DoNotEmail = entity.DoNotEmail;
            newEntity.SystemNote = entity.SystemNote;
            newEntity.ViewedCount = entity.ViewedCount;
            newEntity.Id = entity.Id;
            newEntity.Guid = entity.Guid;

            return newEntity;
        }

    }
}