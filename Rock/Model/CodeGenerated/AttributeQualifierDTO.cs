//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for AttributeQualifier object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class AttributeQualifierDto : Dto
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int AttributeId { get; set; }

        /// <summary />
        [DataMember]
        public string Key { get; set; }

        /// <summary />
        [DataMember]
        public string Value { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public AttributeQualifierDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="attributeQualifier"></param>
        public AttributeQualifierDto ( AttributeQualifier attributeQualifier )
        {
            CopyFromModel( attributeQualifier );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "AttributeId", this.AttributeId );
            dictionary.Add( "Key", this.Key );
            dictionary.Add( "Value", this.Value );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.AttributeId = this.AttributeId;
            expando.Key = this.Key;
            expando.Value = this.Value;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is AttributeQualifier )
            {
                var attributeQualifier = (AttributeQualifier)model;
                this.IsSystem = attributeQualifier.IsSystem;
                this.AttributeId = attributeQualifier.AttributeId;
                this.Key = attributeQualifier.Key;
                this.Value = attributeQualifier.Value;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is AttributeQualifier )
            {
                var attributeQualifier = (AttributeQualifier)model;
                attributeQualifier.IsSystem = this.IsSystem;
                attributeQualifier.AttributeId = this.AttributeId;
                attributeQualifier.Key = this.Key;
                attributeQualifier.Value = this.Value;
            }
        }

    }


    /// <summary>
    /// AttributeQualifier Extension Methods
    /// </summary>
    public static class AttributeQualifierExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static AttributeQualifier ToModel( this AttributeQualifierDto value )
        {
            AttributeQualifier result = new AttributeQualifier();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<AttributeQualifier> ToModel( this List<AttributeQualifierDto> value )
        {
            List<AttributeQualifier> result = new List<AttributeQualifier>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<AttributeQualifierDto> ToDto( this List<AttributeQualifier> value )
        {
            List<AttributeQualifierDto> result = new List<AttributeQualifierDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static AttributeQualifierDto ToDto( this AttributeQualifier value )
        {
            return new AttributeQualifierDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this AttributeQualifier value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<AttributeQualifier> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this AttributeQualifier value, bool deep = false )
        {
            dynamic dynamicAttributeQualifier = new AttributeQualifierDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicAttributeQualifier;
            }

            dynamicAttributeQualifier.Attribute = value.Attribute.ToDynamic();

            return dynamicAttributeQualifier;
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this AttributeQualifier value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        new AttributeDto().FromDynamic( dict["Attribute"] ).CopyToModel(value.Attribute);

                    }
                }
            }
        }

    }
}