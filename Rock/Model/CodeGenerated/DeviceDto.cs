//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;
using System.Data.Spatial;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Device object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class DeviceDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public DbGeography GeoPoint { get; set; }

        /// <summary />
        [DataMember]
        public DbGeography GeoFence { get; set; }

        /// <summary />
        [DataMember]
        public int DeviceTypeValueId { get; set; }

        /// <summary />
        [DataMember]
        public string IPAddress { get; set; }

        /// <summary />
        [DataMember]
        public int? PrinterId { get; set; }

        /// <summary />
        [DataMember]
        public PrintFrom PrintFrom { get; set; }

        /// <summary />
        [DataMember]
        public PrintTo PrintToOverride { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public DeviceDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="device"></param>
        public DeviceDto ( Device device )
        {
            CopyFromModel( device );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "GeoPoint", this.GeoPoint );
            dictionary.Add( "GeoFence", this.GeoFence );
            dictionary.Add( "DeviceTypeValueId", this.DeviceTypeValueId );
            dictionary.Add( "IPAddress", this.IPAddress );
            dictionary.Add( "PrinterId", this.PrinterId );
            dictionary.Add( "PrintFrom", this.PrintFrom );
            dictionary.Add( "PrintToOverride", this.PrintToOverride );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.GeoPoint = this.GeoPoint;
            expando.GeoFence = this.GeoFence;
            expando.DeviceTypeValueId = this.DeviceTypeValueId;
            expando.IPAddress = this.IPAddress;
            expando.PrinterId = this.PrinterId;
            expando.PrintFrom = this.PrintFrom;
            expando.PrintToOverride = this.PrintToOverride;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is Device )
            {
                var device = (Device)model;
                this.Name = device.Name;
                this.Description = device.Description;
                this.GeoPoint = device.GeoPoint;
                this.GeoFence = device.GeoFence;
                this.DeviceTypeValueId = device.DeviceTypeValueId;
                this.IPAddress = device.IPAddress;
                this.PrinterId = device.PrinterId;
                this.PrintFrom = device.PrintFrom;
                this.PrintToOverride = device.PrintToOverride;
                this.Id = device.Id;
                this.Guid = device.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is Device )
            {
                var device = (Device)model;
                device.Name = this.Name;
                device.Description = this.Description;
                device.GeoPoint = this.GeoPoint;
                device.GeoFence = this.GeoFence;
                device.DeviceTypeValueId = this.DeviceTypeValueId;
                device.IPAddress = this.IPAddress;
                device.PrinterId = this.PrinterId;
                device.PrintFrom = this.PrintFrom;
                device.PrintToOverride = this.PrintToOverride;
                device.Id = this.Id;
                device.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class DeviceDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Device ToModel( this DeviceDto value )
        {
            Device result = new Device();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Device> ToModel( this List<DeviceDto> value )
        {
            List<Device> result = new List<Device>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<DeviceDto> ToDto( this List<Device> value )
        {
            List<DeviceDto> result = new List<DeviceDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static DeviceDto ToDto( this Device value )
        {
            return new DeviceDto( value );
        }

    }
}