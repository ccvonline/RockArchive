//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for MarketingCampaign object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class MarketingCampaignDto : DtoSecured<MarketingCampaignDto>
    {
        /// <summary />
        [DataMember]
        public string Title { get; set; }

        /// <summary />
        [DataMember]
        public int? ContactPersonId { get; set; }

        /// <summary />
        [DataMember]
        public string ContactEmail { get; set; }

        /// <summary />
        [DataMember]
        public string ContactPhoneNumber { get; set; }

        /// <summary />
        [DataMember]
        public string ContactFullName { get; set; }

        /// <summary />
        [DataMember]
        public int? EventGroupId { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public MarketingCampaignDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="marketingCampaign"></param>
        public MarketingCampaignDto ( MarketingCampaign marketingCampaign )
        {
            CopyFromModel( marketingCampaign );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "Title", this.Title );
            dictionary.Add( "ContactPersonId", this.ContactPersonId );
            dictionary.Add( "ContactEmail", this.ContactEmail );
            dictionary.Add( "ContactPhoneNumber", this.ContactPhoneNumber );
            dictionary.Add( "ContactFullName", this.ContactFullName );
            dictionary.Add( "EventGroupId", this.EventGroupId );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.Title = this.Title;
            expando.ContactPersonId = this.ContactPersonId;
            expando.ContactEmail = this.ContactEmail;
            expando.ContactPhoneNumber = this.ContactPhoneNumber;
            expando.ContactFullName = this.ContactFullName;
            expando.EventGroupId = this.EventGroupId;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is MarketingCampaign )
            {
                var marketingCampaign = (MarketingCampaign)model;
                this.Title = marketingCampaign.Title;
                this.ContactPersonId = marketingCampaign.ContactPersonId;
                this.ContactEmail = marketingCampaign.ContactEmail;
                this.ContactPhoneNumber = marketingCampaign.ContactPhoneNumber;
                this.ContactFullName = marketingCampaign.ContactFullName;
                this.EventGroupId = marketingCampaign.EventGroupId;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is MarketingCampaign )
            {
                var marketingCampaign = (MarketingCampaign)model;
                marketingCampaign.Title = this.Title;
                marketingCampaign.ContactPersonId = this.ContactPersonId;
                marketingCampaign.ContactEmail = this.ContactEmail;
                marketingCampaign.ContactPhoneNumber = this.ContactPhoneNumber;
                marketingCampaign.ContactFullName = this.ContactFullName;
                marketingCampaign.EventGroupId = this.EventGroupId;
            }
        }

    }


    /// <summary>
    /// MarketingCampaign Extension Methods
    /// </summary>
    public static class MarketingCampaignExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static MarketingCampaign ToModel( this MarketingCampaignDto value )
        {
            MarketingCampaign result = new MarketingCampaign();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<MarketingCampaign> ToModel( this List<MarketingCampaignDto> value )
        {
            List<MarketingCampaign> result = new List<MarketingCampaign>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<MarketingCampaignDto> ToDto( this List<MarketingCampaign> value )
        {
            List<MarketingCampaignDto> result = new List<MarketingCampaignDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static MarketingCampaignDto ToDto( this MarketingCampaign value )
        {
            return new MarketingCampaignDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this MarketingCampaign value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<MarketingCampaign> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this MarketingCampaign value, bool deep = false )
        {
            dynamic dynamicMarketingCampaign = new MarketingCampaignDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicMarketingCampaign;
            }


            if (value.ContactPerson != null)
            {
                dynamicMarketingCampaign.ContactPerson = value.ContactPerson.ToDynamic();
            }

            if (value.EventGroup != null)
            {
                dynamicMarketingCampaign.EventGroup = value.EventGroup.ToDynamic();
            }

            if (value.MarketingCampaignAds != null)
            {
                dynamicMarketingCampaign.MarketingCampaignAds = value.MarketingCampaignAds.ToDynamic();
            }

            if (value.MarketingCampaignAudiences != null)
            {
                dynamicMarketingCampaign.MarketingCampaignAudiences = value.MarketingCampaignAudiences.ToDynamic();
            }

            if (value.MarketingCampaignCampuses != null)
            {
                dynamicMarketingCampaign.MarketingCampaignCampuses = value.MarketingCampaignCampuses.ToDynamic();
            }

            return dynamicMarketingCampaign;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this MarketingCampaign value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this MarketingCampaign value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        // ContactPerson
                        if (dict.ContainsKey("ContactPerson"))
                        {
                            value.ContactPerson = new Person();
                            new PersonDto().FromDynamic( dict["ContactPerson"] ).CopyToModel(value.ContactPerson);
                        }

                        // EventGroup
                        if (dict.ContainsKey("EventGroup"))
                        {
                            value.EventGroup = new Group();
                            new GroupDto().FromDynamic( dict["EventGroup"] ).CopyToModel(value.EventGroup);
                        }

                        // MarketingCampaignAds
                        if (dict.ContainsKey("MarketingCampaignAds"))
                        {
                            var MarketingCampaignAdsList = dict["MarketingCampaignAds"] as List<object>;
                            if (MarketingCampaignAdsList != null)
                            {
                                value.MarketingCampaignAds = new List<MarketingCampaignAd>();
                                foreach(object childObj in MarketingCampaignAdsList)
                                {
                                    var MarketingCampaignAd = new MarketingCampaignAd();
                                    new MarketingCampaignAdDto().FromDynamic(childObj).CopyToModel(MarketingCampaignAd);
                                    value.MarketingCampaignAds.Add(MarketingCampaignAd);
                                }
                            }
                        }

                        // MarketingCampaignAudiences
                        if (dict.ContainsKey("MarketingCampaignAudiences"))
                        {
                            var MarketingCampaignAudiencesList = dict["MarketingCampaignAudiences"] as List<object>;
                            if (MarketingCampaignAudiencesList != null)
                            {
                                value.MarketingCampaignAudiences = new List<MarketingCampaignAudience>();
                                foreach(object childObj in MarketingCampaignAudiencesList)
                                {
                                    var MarketingCampaignAudience = new MarketingCampaignAudience();
                                    new MarketingCampaignAudienceDto().FromDynamic(childObj).CopyToModel(MarketingCampaignAudience);
                                    value.MarketingCampaignAudiences.Add(MarketingCampaignAudience);
                                }
                            }
                        }

                        // MarketingCampaignCampuses
                        if (dict.ContainsKey("MarketingCampaignCampuses"))
                        {
                            var MarketingCampaignCampusesList = dict["MarketingCampaignCampuses"] as List<object>;
                            if (MarketingCampaignCampusesList != null)
                            {
                                value.MarketingCampaignCampuses = new List<MarketingCampaignCampus>();
                                foreach(object childObj in MarketingCampaignCampusesList)
                                {
                                    var MarketingCampaignCampus = new MarketingCampaignCampus();
                                    new MarketingCampaignCampusDto().FromDynamic(childObj).CopyToModel(MarketingCampaignCampus);
                                    value.MarketingCampaignCampuses.Add(MarketingCampaignCampus);
                                }
                            }
                        }

                    }
                }
            }
        }

    }
}