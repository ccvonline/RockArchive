//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for PersonViewed object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class PersonViewedDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public int? ViewerPersonId { get; set; }

        /// <summary />
        [DataMember]
        public int? TargetPersonId { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? ViewDateTime { get; set; }

        /// <summary />
        [DataMember]
        public string IpAddress { get; set; }

        /// <summary />
        [DataMember]
        public string Source { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public PersonViewedDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="personViewed"></param>
        public PersonViewedDto ( PersonViewed personViewed )
        {
            CopyFromModel( personViewed );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "ViewerPersonId", this.ViewerPersonId );
            dictionary.Add( "TargetPersonId", this.TargetPersonId );
            dictionary.Add( "ViewDateTime", this.ViewDateTime );
            dictionary.Add( "IpAddress", this.IpAddress );
            dictionary.Add( "Source", this.Source );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.ViewerPersonId = this.ViewerPersonId;
            expando.TargetPersonId = this.TargetPersonId;
            expando.ViewDateTime = this.ViewDateTime;
            expando.IpAddress = this.IpAddress;
            expando.Source = this.Source;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is PersonViewed )
            {
                var personViewed = (PersonViewed)model;
                this.ViewerPersonId = personViewed.ViewerPersonId;
                this.TargetPersonId = personViewed.TargetPersonId;
                this.ViewDateTime = personViewed.ViewDateTime;
                this.IpAddress = personViewed.IpAddress;
                this.Source = personViewed.Source;
                this.Id = personViewed.Id;
                this.Guid = personViewed.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is PersonViewed )
            {
                var personViewed = (PersonViewed)model;
                personViewed.ViewerPersonId = this.ViewerPersonId;
                personViewed.TargetPersonId = this.TargetPersonId;
                personViewed.ViewDateTime = this.ViewDateTime;
                personViewed.IpAddress = this.IpAddress;
                personViewed.Source = this.Source;
                personViewed.Id = this.Id;
                personViewed.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class PersonViewedDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static PersonViewed ToModel( this PersonViewedDto value )
        {
            PersonViewed result = new PersonViewed();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<PersonViewed> ToModel( this List<PersonViewedDto> value )
        {
            List<PersonViewed> result = new List<PersonViewed>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<PersonViewedDto> ToDto( this List<PersonViewed> value )
        {
            List<PersonViewedDto> result = new List<PersonViewedDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static PersonViewedDto ToDto( this PersonViewed value )
        {
            return new PersonViewedDto( value );
        }

    }
}