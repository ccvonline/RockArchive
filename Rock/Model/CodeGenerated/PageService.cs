//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Page Service class
    /// </summary>
    public partial class PageService : Service<Page>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageService"/> class
        /// </summary>
        public PageService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PageService"/> class
        /// </summary>
        /// <param name="repository">The repository.</param>
        public PageService(IRepository<Page> repository) : base(repository)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PageService"/> class
        /// </summary>
        /// <param name="context">The context.</param>
        public PageService(RockContext context) : base(context)
        {
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( Page item, out string errorMessage )
        {
            errorMessage = string.Empty;
 
            if ( new Service<Page>().Queryable().Any( a => a.ParentPageId == item.Id ) )
            {
                errorMessage = string.Format( "This {0} is assigned to a {1}.", Page.FriendlyTypeName, Page.FriendlyTypeName );
                return false;
            }  
            
            // ignoring Site,DefaultPageId 
            
            // ignoring Site,LoginPageId 
            
            // ignoring Site,RegistrationPageId 
            return true;
        }
    }

    /// <summary>
    /// Generated Extension Methods
    /// </summary>
    public static partial class PageExtensionMethods
    {
        /// <summary>
        /// Clones this Page object to a new Page object
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="deepCopy">if set to <c>true</c> a deep copy is made. If false, only the basic entity properties are copied.</param>
        /// <returns></returns>
        public static Page Clone( this Page source, bool deepCopy )
        {
            if (deepCopy)
            {
                return source.Clone() as Page;
            }
            else
            {
                var target = new Page();
                target.CopyPropertiesFrom( source );
                return target;
            }
        }

        /// <summary>
        /// Copies the properties from another Page object to this Page object
        /// </summary>
        /// <param name="target">The target.</param>
        /// <param name="source">The source.</param>
        public static void CopyPropertiesFrom( this Page target, Page source )
        {
            target.Name = source.Name;
            target.ParentPageId = source.ParentPageId;
            target.Title = source.Title;
            target.IsSystem = source.IsSystem;
            target.LayoutId = source.LayoutId;
            target.RequiresEncryption = source.RequiresEncryption;
            target.EnableViewState = source.EnableViewState;
            target.PageDisplayTitle = source.PageDisplayTitle;
            target.PageDisplayBreadCrumb = source.PageDisplayBreadCrumb;
            target.PageDisplayIcon = source.PageDisplayIcon;
            target.PageDisplayDescription = source.PageDisplayDescription;
            target.DisplayInNavWhen = source.DisplayInNavWhen;
            target.MenuDisplayDescription = source.MenuDisplayDescription;
            target.MenuDisplayIcon = source.MenuDisplayIcon;
            target.MenuDisplayChildPages = source.MenuDisplayChildPages;
            target.BreadCrumbDisplayName = source.BreadCrumbDisplayName;
            target.BreadCrumbDisplayIcon = source.BreadCrumbDisplayIcon;
            target.Order = source.Order;
            target.OutputCacheDuration = source.OutputCacheDuration;
            target.Description = source.Description;
            target.IconFileId = source.IconFileId;
            target.IconCssClass = source.IconCssClass;
            target.IncludeAdminFooter = source.IncludeAdminFooter;
            target.Id = source.Id;
            target.Guid = source.Guid;

        }
    }
}
