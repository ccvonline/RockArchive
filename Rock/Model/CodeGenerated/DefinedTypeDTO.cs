//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for DefinedType object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class DefinedTypeDto : DtoSecured<DefinedTypeDto>
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int? FieldTypeId { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public string Category { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public DefinedTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="definedType"></param>
        public DefinedTypeDto ( DefinedType definedType )
        {
            CopyFromModel( definedType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "FieldTypeId", this.FieldTypeId );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "Category", this.Category );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.FieldTypeId = this.FieldTypeId;
            expando.Order = this.Order;
            expando.Category = this.Category;
            expando.Name = this.Name;
            expando.Description = this.Description;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is DefinedType )
            {
                var definedType = (DefinedType)model;
                this.IsSystem = definedType.IsSystem;
                this.FieldTypeId = definedType.FieldTypeId;
                this.Order = definedType.Order;
                this.Category = definedType.Category;
                this.Name = definedType.Name;
                this.Description = definedType.Description;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is DefinedType )
            {
                var definedType = (DefinedType)model;
                definedType.IsSystem = this.IsSystem;
                definedType.FieldTypeId = this.FieldTypeId;
                definedType.Order = this.Order;
                definedType.Category = this.Category;
                definedType.Name = this.Name;
                definedType.Description = this.Description;
            }
        }

    }


    /// <summary>
    /// DefinedType Extension Methods
    /// </summary>
    public static class DefinedTypeExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static DefinedType ToModel( this DefinedTypeDto value )
        {
            DefinedType result = new DefinedType();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<DefinedType> ToModel( this List<DefinedTypeDto> value )
        {
            List<DefinedType> result = new List<DefinedType>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<DefinedTypeDto> ToDto( this List<DefinedType> value )
        {
            List<DefinedTypeDto> result = new List<DefinedTypeDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static DefinedTypeDto ToDto( this DefinedType value )
        {
            return new DefinedTypeDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this DefinedType value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<DefinedType> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this DefinedType value, bool deep = false )
        {
            dynamic dynamicDefinedType = new DefinedTypeDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicDefinedType;
            }

            dynamicDefinedType.DefinedValues = value.DefinedValues.ToDynamic();
            dynamicDefinedType.FieldType = value.FieldType.ToDynamic();

            return dynamicDefinedType;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this Page value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this DefinedType value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        // DefinedValues
                        var DefinedValuesList = dict["DefinedValues"] as List<object>;
                        if (DefinedValuesList != null)
                        {
                            value.DefinedValues = new List<DefinedValue>();
                            foreach(object childObj in DefinedValuesList)
                            {
                                var DefinedValue = new DefinedValue();
                                new DefinedValueDto().FromDynamic(childObj).CopyToModel(DefinedValue);
                                value.DefinedValues.Add(DefinedValue);
                            }
                        }
                        new FieldTypeDto().FromDynamic( dict["FieldType"] ).CopyToModel(value.FieldType);

                    }
                }
            }
        }

    }
}