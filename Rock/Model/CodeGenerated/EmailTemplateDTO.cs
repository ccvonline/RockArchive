//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for EmailTemplate object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class EmailTemplateDto : DtoSecured<EmailTemplateDto>
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int? PersonId { get; set; }

        /// <summary />
        [DataMember]
        public string Category { get; set; }

        /// <summary />
        [DataMember]
        public string Title { get; set; }

        /// <summary />
        [DataMember]
        public string From { get; set; }

        /// <summary />
        [DataMember]
        public string To { get; set; }

        /// <summary />
        [DataMember]
        public string Cc { get; set; }

        /// <summary />
        [DataMember]
        public string Bcc { get; set; }

        /// <summary />
        [DataMember]
        public string Subject { get; set; }

        /// <summary />
        [DataMember]
        public string Body { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public EmailTemplateDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="emailTemplate"></param>
        public EmailTemplateDto ( EmailTemplate emailTemplate )
        {
            CopyFromModel( emailTemplate );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "PersonId", this.PersonId );
            dictionary.Add( "Category", this.Category );
            dictionary.Add( "Title", this.Title );
            dictionary.Add( "From", this.From );
            dictionary.Add( "To", this.To );
            dictionary.Add( "Cc", this.Cc );
            dictionary.Add( "Bcc", this.Bcc );
            dictionary.Add( "Subject", this.Subject );
            dictionary.Add( "Body", this.Body );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.PersonId = this.PersonId;
            expando.Category = this.Category;
            expando.Title = this.Title;
            expando.From = this.From;
            expando.To = this.To;
            expando.Cc = this.Cc;
            expando.Bcc = this.Bcc;
            expando.Subject = this.Subject;
            expando.Body = this.Body;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is EmailTemplate )
            {
                var emailTemplate = (EmailTemplate)model;
                this.IsSystem = emailTemplate.IsSystem;
                this.PersonId = emailTemplate.PersonId;
                this.Category = emailTemplate.Category;
                this.Title = emailTemplate.Title;
                this.From = emailTemplate.From;
                this.To = emailTemplate.To;
                this.Cc = emailTemplate.Cc;
                this.Bcc = emailTemplate.Bcc;
                this.Subject = emailTemplate.Subject;
                this.Body = emailTemplate.Body;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is EmailTemplate )
            {
                var emailTemplate = (EmailTemplate)model;
                emailTemplate.IsSystem = this.IsSystem;
                emailTemplate.PersonId = this.PersonId;
                emailTemplate.Category = this.Category;
                emailTemplate.Title = this.Title;
                emailTemplate.From = this.From;
                emailTemplate.To = this.To;
                emailTemplate.Cc = this.Cc;
                emailTemplate.Bcc = this.Bcc;
                emailTemplate.Subject = this.Subject;
                emailTemplate.Body = this.Body;
            }
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class EmailTemplateDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static EmailTemplate ToModel( this EmailTemplateDto value )
        {
            EmailTemplate result = new EmailTemplate();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<EmailTemplate> ToModel( this List<EmailTemplateDto> value )
        {
            List<EmailTemplate> result = new List<EmailTemplate>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<EmailTemplateDto> ToDto( this List<EmailTemplate> value )
        {
            List<EmailTemplateDto> result = new List<EmailTemplateDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static EmailTemplateDto ToDto( this EmailTemplate value )
        {
            return new EmailTemplateDto( value );
        }

    }
}