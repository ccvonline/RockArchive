//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Metric object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class MetricDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public bool Type { get; set; }

        /// <summary />
        [DataMember]
        public string Category { get; set; }

        /// <summary />
        [DataMember]
        public string Title { get; set; }

        /// <summary />
        [DataMember]
        public string Subtitle { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public int? MinValue { get; set; }

        /// <summary />
        [DataMember]
        public int? MaxValue { get; set; }

        /// <summary />
        [DataMember]
        public int? CollectionFrequencyValueId { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastCollected { get; set; }

        /// <summary />
        [DataMember]
        public string Source { get; set; }

        /// <summary />
        [DataMember]
        public string SourceSQL { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public MetricDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="metric"></param>
        public MetricDto ( Metric metric )
        {
            CopyFromModel( metric );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "Type", this.Type );
            dictionary.Add( "Category", this.Category );
            dictionary.Add( "Title", this.Title );
            dictionary.Add( "Subtitle", this.Subtitle );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "MinValue", this.MinValue );
            dictionary.Add( "MaxValue", this.MaxValue );
            dictionary.Add( "CollectionFrequencyValueId", this.CollectionFrequencyValueId );
            dictionary.Add( "LastCollected", this.LastCollected );
            dictionary.Add( "Source", this.Source );
            dictionary.Add( "SourceSQL", this.SourceSQL );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.Type = this.Type;
            expando.Category = this.Category;
            expando.Title = this.Title;
            expando.Subtitle = this.Subtitle;
            expando.Description = this.Description;
            expando.MinValue = this.MinValue;
            expando.MaxValue = this.MaxValue;
            expando.CollectionFrequencyValueId = this.CollectionFrequencyValueId;
            expando.LastCollected = this.LastCollected;
            expando.Source = this.Source;
            expando.SourceSQL = this.SourceSQL;
            expando.Order = this.Order;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is Metric )
            {
                var metric = (Metric)model;
                this.IsSystem = metric.IsSystem;
                this.Type = metric.Type;
                this.Category = metric.Category;
                this.Title = metric.Title;
                this.Subtitle = metric.Subtitle;
                this.Description = metric.Description;
                this.MinValue = metric.MinValue;
                this.MaxValue = metric.MaxValue;
                this.CollectionFrequencyValueId = metric.CollectionFrequencyValueId;
                this.LastCollected = metric.LastCollected;
                this.Source = metric.Source;
                this.SourceSQL = metric.SourceSQL;
                this.Order = metric.Order;
                this.Id = metric.Id;
                this.Guid = metric.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is Metric )
            {
                var metric = (Metric)model;
                metric.IsSystem = this.IsSystem;
                metric.Type = this.Type;
                metric.Category = this.Category;
                metric.Title = this.Title;
                metric.Subtitle = this.Subtitle;
                metric.Description = this.Description;
                metric.MinValue = this.MinValue;
                metric.MaxValue = this.MaxValue;
                metric.CollectionFrequencyValueId = this.CollectionFrequencyValueId;
                metric.LastCollected = this.LastCollected;
                metric.Source = this.Source;
                metric.SourceSQL = this.SourceSQL;
                metric.Order = this.Order;
                metric.Id = this.Id;
                metric.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class MetricDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Metric ToModel( this MetricDto value )
        {
            Metric result = new Metric();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Metric> ToModel( this List<MetricDto> value )
        {
            List<Metric> result = new List<Metric>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<MetricDto> ToDto( this List<Metric> value )
        {
            List<MetricDto> result = new List<MetricDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static MetricDto ToDto( this Metric value )
        {
            return new MetricDto( value );
        }

    }
}