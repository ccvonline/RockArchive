//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Attendance object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class AttendanceDto : DtoSecured<AttendanceDto>
    {
        /// <summary />
        [DataMember]
        public int? LocationId { get; set; }

        /// <summary />
        [DataMember]
        public int? ScheduleId { get; set; }

        /// <summary />
        [DataMember]
        public int? GroupId { get; set; }

        /// <summary />
        [DataMember]
        public int? PersonId { get; set; }

        /// <summary />
        [DataMember]
        public int? QualifierValueId { get; set; }

        /// <summary />
        [DataMember]
        public DateTime StartDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? EndDateTime { get; set; }

        /// <summary />
        [DataMember]
        public bool DidAttend { get; set; }

        /// <summary />
        [DataMember]
        public string SecurityCode { get; set; }

        /// <summary />
        [DataMember]
        public string Note { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public AttendanceDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="attendance"></param>
        public AttendanceDto ( Attendance attendance )
        {
            CopyFromModel( attendance );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "LocationId", this.LocationId );
            dictionary.Add( "ScheduleId", this.ScheduleId );
            dictionary.Add( "GroupId", this.GroupId );
            dictionary.Add( "PersonId", this.PersonId );
            dictionary.Add( "QualifierValueId", this.QualifierValueId );
            dictionary.Add( "StartDateTime", this.StartDateTime );
            dictionary.Add( "EndDateTime", this.EndDateTime );
            dictionary.Add( "DidAttend", this.DidAttend );
            dictionary.Add( "SecurityCode", this.SecurityCode );
            dictionary.Add( "Note", this.Note );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.LocationId = this.LocationId;
            expando.ScheduleId = this.ScheduleId;
            expando.GroupId = this.GroupId;
            expando.PersonId = this.PersonId;
            expando.QualifierValueId = this.QualifierValueId;
            expando.StartDateTime = this.StartDateTime;
            expando.EndDateTime = this.EndDateTime;
            expando.DidAttend = this.DidAttend;
            expando.SecurityCode = this.SecurityCode;
            expando.Note = this.Note;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is Attendance )
            {
                var attendance = (Attendance)model;
                this.LocationId = attendance.LocationId;
                this.ScheduleId = attendance.ScheduleId;
                this.GroupId = attendance.GroupId;
                this.PersonId = attendance.PersonId;
                this.QualifierValueId = attendance.QualifierValueId;
                this.StartDateTime = attendance.StartDateTime;
                this.EndDateTime = attendance.EndDateTime;
                this.DidAttend = attendance.DidAttend;
                this.SecurityCode = attendance.SecurityCode;
                this.Note = attendance.Note;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is Attendance )
            {
                var attendance = (Attendance)model;
                attendance.LocationId = this.LocationId;
                attendance.ScheduleId = this.ScheduleId;
                attendance.GroupId = this.GroupId;
                attendance.PersonId = this.PersonId;
                attendance.QualifierValueId = this.QualifierValueId;
                attendance.StartDateTime = this.StartDateTime;
                attendance.EndDateTime = this.EndDateTime;
                attendance.DidAttend = this.DidAttend;
                attendance.SecurityCode = this.SecurityCode;
                attendance.Note = this.Note;
            }
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class AttendanceDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Attendance ToModel( this AttendanceDto value )
        {
            Attendance result = new Attendance();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Attendance> ToModel( this List<AttendanceDto> value )
        {
            List<Attendance> result = new List<Attendance>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<AttendanceDto> ToDto( this List<Attendance> value )
        {
            List<AttendanceDto> result = new List<AttendanceDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static AttendanceDto ToDto( this Attendance value )
        {
            return new AttendanceDto( value );
        }

    }
}