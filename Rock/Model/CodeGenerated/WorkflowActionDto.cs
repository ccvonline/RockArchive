//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for WorkflowAction object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class WorkflowActionDto : DtoSecured<WorkflowActionDto>
    {
        /// <summary />
        [DataMember]
        public int ActivityId { get; set; }

        /// <summary />
        [DataMember]
        public int ActionTypeId { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastProcessedDateTime { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? CompletedDateTime { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public WorkflowActionDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="workflowAction"></param>
        public WorkflowActionDto ( WorkflowAction workflowAction )
        {
            CopyFromModel( workflowAction );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "ActivityId", this.ActivityId );
            dictionary.Add( "ActionTypeId", this.ActionTypeId );
            dictionary.Add( "LastProcessedDateTime", this.LastProcessedDateTime );
            dictionary.Add( "CompletedDateTime", this.CompletedDateTime );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.ActivityId = this.ActivityId;
            expando.ActionTypeId = this.ActionTypeId;
            expando.LastProcessedDateTime = this.LastProcessedDateTime;
            expando.CompletedDateTime = this.CompletedDateTime;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is WorkflowAction )
            {
                var workflowAction = (WorkflowAction)model;
                this.ActivityId = workflowAction.ActivityId;
                this.ActionTypeId = workflowAction.ActionTypeId;
                this.LastProcessedDateTime = workflowAction.LastProcessedDateTime;
                this.CompletedDateTime = workflowAction.CompletedDateTime;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is WorkflowAction )
            {
                var workflowAction = (WorkflowAction)model;
                workflowAction.ActivityId = this.ActivityId;
                workflowAction.ActionTypeId = this.ActionTypeId;
                workflowAction.LastProcessedDateTime = this.LastProcessedDateTime;
                workflowAction.CompletedDateTime = this.CompletedDateTime;
            }
        }

    }


    /// <summary>
    /// WorkflowAction Extension Methods
    /// </summary>
    public static class WorkflowActionExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowAction ToModel( this WorkflowActionDto value )
        {
            WorkflowAction result = new WorkflowAction();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowAction> ToModel( this List<WorkflowActionDto> value )
        {
            List<WorkflowAction> result = new List<WorkflowAction>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<WorkflowActionDto> ToDto( this List<WorkflowAction> value )
        {
            List<WorkflowActionDto> result = new List<WorkflowActionDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static WorkflowActionDto ToDto( this WorkflowAction value )
        {
            return new WorkflowActionDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this WorkflowAction value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<WorkflowAction> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this WorkflowAction value, bool deep = false )
        {
            dynamic dynamicWorkflowAction = new WorkflowActionDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicWorkflowAction;
            }


            if (value.Activity != null)
            {
                dynamicWorkflowAction.Activity = value.Activity.ToDynamic();
            }

            if (value.ActionType != null)
            {
                dynamicWorkflowAction.ActionType = value.ActionType.ToDynamic();
            }

            return dynamicWorkflowAction;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this WorkflowAction value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this WorkflowAction value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        // Activity
                        if (dict.ContainsKey("Activity"))
                        {
                            value.Activity = new WorkflowActivity();
                            new WorkflowActivityDto().FromDynamic( dict["Activity"] ).CopyToModel(value.Activity);
                        }

                        // ActionType
                        if (dict.ContainsKey("ActionType"))
                        {
                            value.ActionType = new WorkflowActionType();
                            new WorkflowActionTypeDto().FromDynamic( dict["ActionType"] ).CopyToModel(value.ActionType);
                        }

                    }
                }
            }
        }

    }
}