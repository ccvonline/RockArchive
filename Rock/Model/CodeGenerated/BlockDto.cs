//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Model
{
    /// <summary>
    /// Data Transfer Object for Block object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class BlockDto : DtoSecured<BlockDto>
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int? PageId { get; set; }

        /// <summary />
        [DataMember]
        public string Layout { get; set; }

        /// <summary />
        [DataMember]
        public int BlockTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string Zone { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public int OutputCacheDuration { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public BlockDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="block"></param>
        public BlockDto ( Block block )
        {
            CopyFromModel( block );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public override Dictionary<string, object> ToDictionary()
        {
            var dictionary = base.ToDictionary();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "PageId", this.PageId );
            dictionary.Add( "Layout", this.Layout );
            dictionary.Add( "BlockTypeId", this.BlockTypeId );
            dictionary.Add( "Zone", this.Zone );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "OutputCacheDuration", this.OutputCacheDuration );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public override dynamic ToDynamic()
        {
            dynamic expando = base.ToDynamic();
            expando.IsSystem = this.IsSystem;
            expando.PageId = this.PageId;
            expando.Layout = this.Layout;
            expando.BlockTypeId = this.BlockTypeId;
            expando.Zone = this.Zone;
            expando.Order = this.Order;
            expando.Name = this.Name;
            expando.OutputCacheDuration = this.OutputCacheDuration;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyFromModel( IEntity model )
        {
            base.CopyFromModel( model );

            if ( model is Block )
            {
                var block = (Block)model;
                this.IsSystem = block.IsSystem;
                this.PageId = block.PageId;
                this.Layout = block.Layout;
                this.BlockTypeId = block.BlockTypeId;
                this.Zone = block.Zone;
                this.Order = block.Order;
                this.Name = block.Name;
                this.OutputCacheDuration = block.OutputCacheDuration;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public override void CopyToModel ( IEntity model )
        {
            base.CopyToModel( model );

            if ( model is Block )
            {
                var block = (Block)model;
                block.IsSystem = this.IsSystem;
                block.PageId = this.PageId;
                block.Layout = this.Layout;
                block.BlockTypeId = this.BlockTypeId;
                block.Zone = this.Zone;
                block.Order = this.Order;
                block.Name = this.Name;
                block.OutputCacheDuration = this.OutputCacheDuration;
            }
        }

    }


    /// <summary>
    /// Block Extension Methods
    /// </summary>
    public static class BlockExtensions
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Block ToModel( this BlockDto value )
        {
            Block result = new Block();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Block> ToModel( this List<BlockDto> value )
        {
            List<Block> result = new List<Block>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<BlockDto> ToDto( this List<Block> value )
        {
            List<BlockDto> result = new List<BlockDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static BlockDto ToDto( this Block value )
        {
            return new BlockDto( value );
        }

        /// <summary>
        /// To the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static string ToJson( this Block value, bool deep = false )
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject( ToDynamic( value, deep ) );
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="values">The values.</param>
        /// <returns></returns>
        public static List<dynamic> ToDynamic( this ICollection<Block> values )
        {
            var dynamicList = new List<dynamic>();
            foreach ( var value in values )
            {
                dynamicList.Add( value.ToDynamic( true ) );
            }
            return dynamicList;
        }

        /// <summary>
        /// To the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        /// <returns></returns>
        public static dynamic ToDynamic( this Block value, bool deep = false )
        {
            dynamic dynamicBlock = new BlockDto( value ).ToDynamic();

            if ( !deep )
            {
                return dynamicBlock;
            }


            if (value.BlockType != null)
            {
                dynamicBlock.BlockType = value.BlockType.ToDynamic();
            }

            return dynamicBlock;
        }

        /// <summary>
        /// Froms the json.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="json">The json.</param>
        public static void FromJson( this Block value, string json )
        {
            //Newtonsoft.Json.JsonConvert.PopulateObject( json, value );
            var obj = Newtonsoft.Json.JsonConvert.DeserializeObject( json, typeof( ExpandoObject ) );
            value.FromDynamic( obj, true );
        }

        /// <summary>
        /// Froms the dynamic.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <param name="obj">The obj.</param>
        /// <param name="deep">if set to <c>true</c> [deep].</param>
        public static void FromDynamic( this Block value, object obj, bool deep = false )
        {
            new PageDto().FromDynamic(obj).CopyToModel(value);

            if (deep)
            {
                var expando = obj as ExpandoObject;
                if (obj != null)
                {
                    var dict = obj as IDictionary<string, object>;
                    if (dict != null)
                    {

                        // BlockType
                        if (dict.ContainsKey("BlockType"))
                        {
                            value.BlockType = new BlockType();
                            new BlockTypeDto().FromDynamic( dict["BlockType"] ).CopyToModel(value.BlockType);
                        }

                    }
                }
            }
        }

    }
}