//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ComponentModel.Composition;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace Rock.REST.Util
{
	/// <summary>
	/// REST WCF service for Jobs
	/// </summary>
    [Export(typeof(IService))]
    [ExportMetadata("RouteName", "Util/Job")]
	[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]
    public partial class JobService : IJobService, IService
    {
		/// <summary>
		/// Gets a Job object
		/// </summary>
		[WebGet( UriTemplate = "{id}" )]
        public Rock.Util.DTO.Job Get( string id )
        {
            var currentUser = Rock.CMS.UserRepository.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
				Rock.Util.Job Job = JobRepository.Get( int.Parse( id ) );
				if ( Job.Authorized( "View", currentUser ) )
					return Job.DataTransferObject;
				else
					throw new WebFaultException<string>( "Not Authorized to View this Job", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Gets a Job object
		/// </summary>
		[WebGet( UriTemplate = "{id}/{apiKey}" )]
        public Rock.Util.DTO.Job ApiGet( string id, string apiKey )
        {
            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				Rock.CMS.UserRepository userRepository = new Rock.CMS.UserRepository();
                Rock.CMS.User user = userRepository.AsQueryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
					Rock.Util.Job Job = JobRepository.Get( int.Parse( id ) );
					if ( Job.Authorized( "View", user ) )
						return Job.DataTransferObject;
					else
						throw new WebFaultException<string>( "Not Authorized to View this Job", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Updates a Job object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}" )]
        public void UpdateJob( string id, Rock.Util.DTO.Job Job )
        {
            var currentUser = Rock.CMS.UserRepository.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
				Rock.Util.Job existingJob = JobRepository.Get( int.Parse( id ) );
				if ( existingJob.Authorized( "Edit", currentUser ) )
				{
					uow.objectContext.Entry(existingJob).CurrentValues.SetValues(Job);
					
					if (existingJob.IsValid)
						JobRepository.Save( existingJob, currentUser.PersonId );
					else
						throw new WebFaultException<string>( existingJob.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this Job", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Updates a Job object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}/{apiKey}" )]
        public void ApiUpdateJob( string id, string apiKey, Rock.Util.DTO.Job Job )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserRepository userRepository = new Rock.CMS.UserRepository();
                Rock.CMS.User user = userRepository.AsQueryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
					Rock.Util.Job existingJob = JobRepository.Get( int.Parse( id ) );
					if ( existingJob.Authorized( "Edit", user ) )
					{
						uow.objectContext.Entry(existingJob).CurrentValues.SetValues(Job);
					
						if (existingJob.IsValid)
							JobRepository.Save( existingJob, user.PersonId );
						else
							throw new WebFaultException<string>( existingJob.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this Job", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Creates a new Job object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "" )]
        public void CreateJob( Rock.Util.DTO.Job Job )
        {
            var currentUser = Rock.CMS.UserRepository.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
				Rock.Util.Job existingJob = new Rock.Util.Job();
				JobRepository.Add( existingJob, currentUser.PersonId );
				uow.objectContext.Entry(existingJob).CurrentValues.SetValues(Job);

				if (existingJob.IsValid)
					JobRepository.Save( existingJob, currentUser.PersonId );
				else
					throw new WebFaultException<string>( existingJob.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
            }
        }

		/// <summary>
		/// Creates a new Job object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "{apiKey}" )]
        public void ApiCreateJob( string apiKey, Rock.Util.DTO.Job Job )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserRepository userRepository = new Rock.CMS.UserRepository();
                Rock.CMS.User user = userRepository.AsQueryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
					Rock.Util.Job existingJob = new Rock.Util.Job();
					JobRepository.Add( existingJob, user.PersonId );
					uow.objectContext.Entry(existingJob).CurrentValues.SetValues(Job);

					if (existingJob.IsValid)
						JobRepository.Save( existingJob, user.PersonId );
					else
						throw new WebFaultException<string>( existingJob.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a Job object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}" )]
        public void DeleteJob( string id )
        {
            var currentUser = Rock.CMS.UserRepository.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
				Rock.Util.Job Job = JobRepository.Get( int.Parse( id ) );
				if ( Job.Authorized( "Edit", currentUser ) )
				{
					JobRepository.Delete( Job, currentUser.PersonId );
					JobRepository.Save( Job, currentUser.PersonId );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this Job", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a Job object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}/{apiKey}" )]
        public void ApiDeleteJob( string id, string apiKey )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserRepository userRepository = new Rock.CMS.UserRepository();
                Rock.CMS.User user = userRepository.AsQueryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock.Util.JobRepository JobRepository = new Rock.Util.JobRepository();
					Rock.Util.Job Job = JobRepository.Get( int.Parse( id ) );
					if ( Job.Authorized( "Edit", user ) )
					{
						JobRepository.Delete( Job, user.PersonId );
						JobRepository.Save( Job, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this Job", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

    }
}
