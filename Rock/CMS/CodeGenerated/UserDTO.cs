//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Cms
{
    /// <summary>
    /// Data Transfer Object for User object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class UserDto : IDto
    {
        /// <summary />
        [DataMember]
        public AuthenticationServiceType ServiceType { get; set; }

        /// <summary />
        [DataMember]
        public string ServiceName { get; set; }

        /// <summary />
        [DataMember]
        public string UserName { get; set; }

        /// <summary />
        [DataMember]
        public string Password { get; set; }

        /// <summary />
        [DataMember]
        public bool? IsConfirmed { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastActivityDate { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastLoginDate { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastPasswordChangedDate { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? CreationDate { get; set; }

        /// <summary />
        [DataMember]
        public bool? IsOnLine { get; set; }

        /// <summary />
        [DataMember]
        public bool? IsLockedOut { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? LastLockedOutDate { get; set; }

        /// <summary />
        [DataMember]
        public int? FailedPasswordAttemptCount { get; set; }

        /// <summary />
        [DataMember]
        public DateTime? FailedPasswordAttemptWindowStart { get; set; }

        /// <summary />
        [DataMember]
        public string ApiKey { get; set; }

        /// <summary />
        [DataMember]
        public int? PersonId { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public UserDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="user"></param>
        public UserDto ( User user )
        {
            CopyFromModel( user );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "ServiceType", this.ServiceType );
            dictionary.Add( "ServiceName", this.ServiceName );
            dictionary.Add( "UserName", this.UserName );
            dictionary.Add( "Password", this.Password );
            dictionary.Add( "IsConfirmed", this.IsConfirmed );
            dictionary.Add( "LastActivityDate", this.LastActivityDate );
            dictionary.Add( "LastLoginDate", this.LastLoginDate );
            dictionary.Add( "LastPasswordChangedDate", this.LastPasswordChangedDate );
            dictionary.Add( "CreationDate", this.CreationDate );
            dictionary.Add( "IsOnLine", this.IsOnLine );
            dictionary.Add( "IsLockedOut", this.IsLockedOut );
            dictionary.Add( "LastLockedOutDate", this.LastLockedOutDate );
            dictionary.Add( "FailedPasswordAttemptCount", this.FailedPasswordAttemptCount );
            dictionary.Add( "FailedPasswordAttemptWindowStart", this.FailedPasswordAttemptWindowStart );
            dictionary.Add( "ApiKey", this.ApiKey );
            dictionary.Add( "PersonId", this.PersonId );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.ServiceType = this.ServiceType;
            expando.ServiceName = this.ServiceName;
            expando.UserName = this.UserName;
            expando.Password = this.Password;
            expando.IsConfirmed = this.IsConfirmed;
            expando.LastActivityDate = this.LastActivityDate;
            expando.LastLoginDate = this.LastLoginDate;
            expando.LastPasswordChangedDate = this.LastPasswordChangedDate;
            expando.CreationDate = this.CreationDate;
            expando.IsOnLine = this.IsOnLine;
            expando.IsLockedOut = this.IsLockedOut;
            expando.LastLockedOutDate = this.LastLockedOutDate;
            expando.FailedPasswordAttemptCount = this.FailedPasswordAttemptCount;
            expando.FailedPasswordAttemptWindowStart = this.FailedPasswordAttemptWindowStart;
            expando.ApiKey = this.ApiKey;
            expando.PersonId = this.PersonId;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is User )
            {
                var user = (User)model;
                this.ServiceType = user.ServiceType;
                this.ServiceName = user.ServiceName;
                this.UserName = user.UserName;
                this.Password = user.Password;
                this.IsConfirmed = user.IsConfirmed;
                this.LastActivityDate = user.LastActivityDate;
                this.LastLoginDate = user.LastLoginDate;
                this.LastPasswordChangedDate = user.LastPasswordChangedDate;
                this.CreationDate = user.CreationDate;
                this.IsOnLine = user.IsOnLine;
                this.IsLockedOut = user.IsLockedOut;
                this.LastLockedOutDate = user.LastLockedOutDate;
                this.FailedPasswordAttemptCount = user.FailedPasswordAttemptCount;
                this.FailedPasswordAttemptWindowStart = user.FailedPasswordAttemptWindowStart;
                this.ApiKey = user.ApiKey;
                this.PersonId = user.PersonId;
                this.Id = user.Id;
                this.Guid = user.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is User )
            {
                var user = (User)model;
                user.ServiceType = this.ServiceType;
                user.ServiceName = this.ServiceName;
                user.UserName = this.UserName;
                user.Password = this.Password;
                user.IsConfirmed = this.IsConfirmed;
                user.LastActivityDate = this.LastActivityDate;
                user.LastLoginDate = this.LastLoginDate;
                user.LastPasswordChangedDate = this.LastPasswordChangedDate;
                user.CreationDate = this.CreationDate;
                user.IsOnLine = this.IsOnLine;
                user.IsLockedOut = this.IsLockedOut;
                user.LastLockedOutDate = this.LastLockedOutDate;
                user.FailedPasswordAttemptCount = this.FailedPasswordAttemptCount;
                user.FailedPasswordAttemptWindowStart = this.FailedPasswordAttemptWindowStart;
                user.ApiKey = this.ApiKey;
                user.PersonId = this.PersonId;
                user.Id = this.Id;
                user.Guid = this.Guid;
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class UserDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static User ToModel( this UserDto value )
        {
            User result = new User();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<User> ToModel( this List<UserDto> value )
        {
            List<User> result = new List<User>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<UserDto> ToDto( this List<User> value )
        {
            List<UserDto> result = new List<UserDto>();
            value.ForEach( a => result.Add( new UserDto( a ) ) );
            return result;
        }
    }
}