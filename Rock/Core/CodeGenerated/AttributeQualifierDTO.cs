//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Core
{
    /// <summary>
    /// Data Transfer Object for AttributeQualifier object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class AttributeQualifierDto : IDto
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int AttributeId { get; set; }

        /// <summary />
        [DataMember]
        public string Key { get; set; }

        /// <summary />
        [DataMember]
        public string Value { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public AttributeQualifierDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="attributeQualifier"></param>
        public AttributeQualifierDto ( AttributeQualifier attributeQualifier )
        {
            CopyFromModel( attributeQualifier );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "AttributeId", this.AttributeId );
            dictionary.Add( "Key", this.Key );
            dictionary.Add( "Value", this.Value );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.AttributeId = this.AttributeId;
            expando.Key = this.Key;
            expando.Value = this.Value;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is AttributeQualifier )
            {
                var attributeQualifier = (AttributeQualifier)model;
                this.IsSystem = attributeQualifier.IsSystem;
                this.AttributeId = attributeQualifier.AttributeId;
                this.Key = attributeQualifier.Key;
                this.Value = attributeQualifier.Value;
                this.Id = attributeQualifier.Id;
                this.Guid = attributeQualifier.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is AttributeQualifier )
            {
                var attributeQualifier = (AttributeQualifier)model;
                attributeQualifier.IsSystem = this.IsSystem;
                attributeQualifier.AttributeId = this.AttributeId;
                attributeQualifier.Key = this.Key;
                attributeQualifier.Value = this.Value;
                attributeQualifier.Id = this.Id;
                attributeQualifier.Guid = this.Guid;
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class AttributeQualifierDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static AttributeQualifier ToModel( this AttributeQualifierDto value )
        {
            AttributeQualifier result = new AttributeQualifier();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<AttributeQualifier> ToModel( this List<AttributeQualifierDto> value )
        {
            List<AttributeQualifier> result = new List<AttributeQualifier>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<AttributeQualifierDto> ToDto( this List<AttributeQualifier> value )
        {
            List<AttributeQualifierDto> result = new List<AttributeQualifierDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static AttributeQualifierDto ToDto( this AttributeQualifier value )
        {
            return new AttributeQualifierDto( value );
        }

    }
}