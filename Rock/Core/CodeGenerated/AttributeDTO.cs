//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Core
{
    /// <summary>
    /// Data Transfer Object for Attribute object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class AttributeDto : IDto
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int FieldTypeId { get; set; }

        /// <summary />
        [DataMember]
        public int? EntityTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string EntityTypeQualifierColumn { get; set; }

        /// <summary />
        [DataMember]
        public string EntityTypeQualifierValue { get; set; }

        /// <summary />
        [DataMember]
        public string Key { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Category { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public bool IsGridColumn { get; set; }

        /// <summary />
        [DataMember]
        public string DefaultValue { get; set; }

        /// <summary />
        [DataMember]
        public bool IsMultiValue { get; set; }

        /// <summary />
        [DataMember]
        public bool IsRequired { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public AttributeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="attribute"></param>
        public AttributeDto ( Attribute attribute )
        {
            CopyFromModel( attribute );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "FieldTypeId", this.FieldTypeId );
            dictionary.Add( "EntityTypeId", this.EntityTypeId );
            dictionary.Add( "EntityTypeQualifierColumn", this.EntityTypeQualifierColumn );
            dictionary.Add( "EntityTypeQualifierValue", this.EntityTypeQualifierValue );
            dictionary.Add( "Key", this.Key );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Category", this.Category );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "IsGridColumn", this.IsGridColumn );
            dictionary.Add( "DefaultValue", this.DefaultValue );
            dictionary.Add( "IsMultiValue", this.IsMultiValue );
            dictionary.Add( "IsRequired", this.IsRequired );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.FieldTypeId = this.FieldTypeId;
            expando.EntityTypeId = this.EntityTypeId;
            expando.EntityTypeQualifierColumn = this.EntityTypeQualifierColumn;
            expando.EntityTypeQualifierValue = this.EntityTypeQualifierValue;
            expando.Key = this.Key;
            expando.Name = this.Name;
            expando.Category = this.Category;
            expando.Description = this.Description;
            expando.Order = this.Order;
            expando.IsGridColumn = this.IsGridColumn;
            expando.DefaultValue = this.DefaultValue;
            expando.IsMultiValue = this.IsMultiValue;
            expando.IsRequired = this.IsRequired;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is Attribute )
            {
                var attribute = (Attribute)model;
                this.IsSystem = attribute.IsSystem;
                this.FieldTypeId = attribute.FieldTypeId;
                this.EntityTypeId = attribute.EntityTypeId;
                this.EntityTypeQualifierColumn = attribute.EntityTypeQualifierColumn;
                this.EntityTypeQualifierValue = attribute.EntityTypeQualifierValue;
                this.Key = attribute.Key;
                this.Name = attribute.Name;
                this.Category = attribute.Category;
                this.Description = attribute.Description;
                this.Order = attribute.Order;
                this.IsGridColumn = attribute.IsGridColumn;
                this.DefaultValue = attribute.DefaultValue;
                this.IsMultiValue = attribute.IsMultiValue;
                this.IsRequired = attribute.IsRequired;
                this.Id = attribute.Id;
                this.Guid = attribute.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is Attribute )
            {
                var attribute = (Attribute)model;
                attribute.IsSystem = this.IsSystem;
                attribute.FieldTypeId = this.FieldTypeId;
                attribute.EntityTypeId = this.EntityTypeId;
                attribute.EntityTypeQualifierColumn = this.EntityTypeQualifierColumn;
                attribute.EntityTypeQualifierValue = this.EntityTypeQualifierValue;
                attribute.Key = this.Key;
                attribute.Name = this.Name;
                attribute.Category = this.Category;
                attribute.Description = this.Description;
                attribute.Order = this.Order;
                attribute.IsGridColumn = this.IsGridColumn;
                attribute.DefaultValue = this.DefaultValue;
                attribute.IsMultiValue = this.IsMultiValue;
                attribute.IsRequired = this.IsRequired;
                attribute.Id = this.Id;
                attribute.Guid = this.Guid;
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class AttributeDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static Attribute ToModel( this AttributeDto value )
        {
            Attribute result = new Attribute();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<Attribute> ToModel( this List<AttributeDto> value )
        {
            List<Attribute> result = new List<Attribute>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<AttributeDto> ToDto( this List<Attribute> value )
        {
            List<AttributeDto> result = new List<AttributeDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static AttributeDto ToDto( this Attribute value )
        {
            return new AttributeDto( value );
        }

    }
}