//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Core
{
    /// <summary>
    /// Data Transfer Object for EntityTypeWorkflowTrigger object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class EntityTypeWorkflowTriggerDto : IDto, DotLiquid.ILiquidizable
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int EntityTypeId { get; set; }

        /// <summary />
        [DataMember]
        public string EntityTypeQualifierColumn { get; set; }

        /// <summary />
        [DataMember]
        public string EntityTypeQualifierValue { get; set; }

        /// <summary />
        [DataMember]
        public int WorkflowTypeId { get; set; }

        /// <summary />
        [DataMember]
        public EntityTriggerType EntityTriggerType { get; set; }

        /// <summary />
        [DataMember]
        public string WorkflowName { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public EntityTypeWorkflowTriggerDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="entityTypeWorkflowTrigger"></param>
        public EntityTypeWorkflowTriggerDto ( EntityTypeWorkflowTrigger entityTypeWorkflowTrigger )
        {
            CopyFromModel( entityTypeWorkflowTrigger );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "EntityTypeId", this.EntityTypeId );
            dictionary.Add( "EntityTypeQualifierColumn", this.EntityTypeQualifierColumn );
            dictionary.Add( "EntityTypeQualifierValue", this.EntityTypeQualifierValue );
            dictionary.Add( "WorkflowTypeId", this.WorkflowTypeId );
            dictionary.Add( "EntityTriggerType", this.EntityTriggerType );
            dictionary.Add( "WorkflowName", this.WorkflowName );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.EntityTypeId = this.EntityTypeId;
            expando.EntityTypeQualifierColumn = this.EntityTypeQualifierColumn;
            expando.EntityTypeQualifierValue = this.EntityTypeQualifierValue;
            expando.WorkflowTypeId = this.WorkflowTypeId;
            expando.EntityTriggerType = this.EntityTriggerType;
            expando.WorkflowName = this.WorkflowName;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is EntityTypeWorkflowTrigger )
            {
                var entityTypeWorkflowTrigger = (EntityTypeWorkflowTrigger)model;
                this.IsSystem = entityTypeWorkflowTrigger.IsSystem;
                this.EntityTypeId = entityTypeWorkflowTrigger.EntityTypeId;
                this.EntityTypeQualifierColumn = entityTypeWorkflowTrigger.EntityTypeQualifierColumn;
                this.EntityTypeQualifierValue = entityTypeWorkflowTrigger.EntityTypeQualifierValue;
                this.WorkflowTypeId = entityTypeWorkflowTrigger.WorkflowTypeId;
                this.EntityTriggerType = entityTypeWorkflowTrigger.EntityTriggerType;
                this.WorkflowName = entityTypeWorkflowTrigger.WorkflowName;
                this.Id = entityTypeWorkflowTrigger.Id;
                this.Guid = entityTypeWorkflowTrigger.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is EntityTypeWorkflowTrigger )
            {
                var entityTypeWorkflowTrigger = (EntityTypeWorkflowTrigger)model;
                entityTypeWorkflowTrigger.IsSystem = this.IsSystem;
                entityTypeWorkflowTrigger.EntityTypeId = this.EntityTypeId;
                entityTypeWorkflowTrigger.EntityTypeQualifierColumn = this.EntityTypeQualifierColumn;
                entityTypeWorkflowTrigger.EntityTypeQualifierValue = this.EntityTypeQualifierValue;
                entityTypeWorkflowTrigger.WorkflowTypeId = this.WorkflowTypeId;
                entityTypeWorkflowTrigger.EntityTriggerType = this.EntityTriggerType;
                entityTypeWorkflowTrigger.WorkflowName = this.WorkflowName;
                entityTypeWorkflowTrigger.Id = this.Id;
                entityTypeWorkflowTrigger.Guid = this.Guid;
            }
        }

        /// <summary>
        /// Converts to liquidizable object for dotLiquid templating
        /// </summary>
        /// <returns></returns>
        public object ToLiquid()
        {
            return this.ToDictionary();
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public static class EntityTypeWorkflowTriggerDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static EntityTypeWorkflowTrigger ToModel( this EntityTypeWorkflowTriggerDto value )
        {
            EntityTypeWorkflowTrigger result = new EntityTypeWorkflowTrigger();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<EntityTypeWorkflowTrigger> ToModel( this List<EntityTypeWorkflowTriggerDto> value )
        {
            List<EntityTypeWorkflowTrigger> result = new List<EntityTypeWorkflowTrigger>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<EntityTypeWorkflowTriggerDto> ToDto( this List<EntityTypeWorkflowTrigger> value )
        {
            List<EntityTypeWorkflowTriggerDto> result = new List<EntityTypeWorkflowTriggerDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static EntityTypeWorkflowTriggerDto ToDto( this EntityTypeWorkflowTrigger value )
        {
            return new EntityTypeWorkflowTriggerDto( value );
        }

    }
}