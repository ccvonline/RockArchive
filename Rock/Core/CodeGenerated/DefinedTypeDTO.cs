//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Core
{
    /// <summary>
    /// Data Transfer Object for DefinedType object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class DefinedTypeDto : IDto
    {
        /// <summary />
        [DataMember]
        public bool IsSystem { get; set; }

        /// <summary />
        [DataMember]
        public int? FieldTypeId { get; set; }

        /// <summary />
        [DataMember]
        public int Order { get; set; }

        /// <summary />
        [DataMember]
        public string Category { get; set; }

        /// <summary />
        [DataMember]
        public string Name { get; set; }

        /// <summary />
        [DataMember]
        public string Description { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public DefinedTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="definedType"></param>
        public DefinedTypeDto ( DefinedType definedType )
        {
            CopyFromModel( definedType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "FieldTypeId", this.FieldTypeId );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "Category", this.Category );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.FieldTypeId = this.FieldTypeId;
            expando.Order = this.Order;
            expando.Category = this.Category;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is DefinedType )
            {
                var definedType = (DefinedType)model;
                this.IsSystem = definedType.IsSystem;
                this.FieldTypeId = definedType.FieldTypeId;
                this.Order = definedType.Order;
                this.Category = definedType.Category;
                this.Name = definedType.Name;
                this.Description = definedType.Description;
                this.Id = definedType.Id;
                this.Guid = definedType.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is DefinedType )
            {
                var definedType = (DefinedType)model;
                definedType.IsSystem = this.IsSystem;
                definedType.FieldTypeId = this.FieldTypeId;
                definedType.Order = this.Order;
                definedType.Category = this.Category;
                definedType.Name = this.Name;
                definedType.Description = this.Description;
                definedType.Id = this.Id;
                definedType.Guid = this.Guid;
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class DefinedTypeDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static DefinedType ToModel( this DefinedTypeDto value )
        {
            DefinedType result = new DefinedType();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<DefinedType> ToModel( this List<DefinedTypeDto> value )
        {
            List<DefinedType> result = new List<DefinedType>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<DefinedTypeDto> ToDto( this List<DefinedType> value )
        {
            List<DefinedTypeDto> result = new List<DefinedTypeDto>();
            value.ForEach( a => result.Add( new DefinedTypeDto( a ) ) );
            return result;
        }
    }
}