<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly name="System.Data" #>
<#@ Assembly name="System.Data.Entity.Design" #>
<#@ Assembly name="System.Xml.dll" #>
<#@ Assembly name="Microsoft.SqlServer.SqlEnum" #>
<#@ Assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ Assembly name="Microsoft.SqlServer.Smo" #>
<#@ Assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#@ import namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
 
<#
	// Uncomment this line to debug the template generation
	// System.Diagnostics.Debugger.Launch();
	
	// Database properties
    string databaseName = "RockChMS";
	
	// Get Connection String from Web.Config
	string path = Host.ResolvePath("");
	path = path.Replace("Rock\\T4", "RockWeb") + "\\web.ConnectionStrings.config";
	XmlDocument configDoc = new XmlDocument();
	configDoc.Load(path);
	XmlNode node = configDoc.SelectSingleNode("/connectionStrings/add[@name=\"RockContext\"]");
	string connString = node.Attributes.GetNamedItem("connectionString").Value;

	// Connect to database and create the Server and Database objects
	SqlConnection oneSqlConnection = new SqlConnection(connString);
    ServerConnection oneServerConnection = new ServerConnection(oneSqlConnection);
    Server oneServer = new Server(oneServerConnection);
    Database oneDatabase = oneServer.Databases[databaseName];
	
	PluralizationService pls = PluralizationService.CreateService (new CultureInfo("en-US"));

	string relativeOutputFilePath = "";
	
	// When looping through the tables, keep track of the model entities created
	// and the namespaces used so that they can be used when creating the context 
	// class
	Dictionary<string, string> entities = new Dictionary<string, string>();
	List<string> namespaces = new List<string>();
	List<string> processedM2MTables = new List<string>();
	
	// Loop through each non-system table in the database
	foreach (Table oneTable in oneDatabase.Tables)
	{
		string Namespace = TemplateHelper.Namespace(oneTable.Name);
		string Entity = TemplateHelper.Entity(oneTable.Name);
		string EntityVar = Entity.Substring(0,1).ToLower() + Entity.Substring(1);
		string QualifiedEntity = "Rock." + Namespace + "." + Entity;

		if (!oneTable.IsSystemObject && !TemplateHelper.Many2Many(oneTable) && !oneTable.Name.StartsWith("-"))
		{
			// Save list of primary keys so that the get[Entity] method in the 
			// service layer class can be created correctly
			List<Column> primaryKeys = new List<Column>();
			
			// Save namespace from the table name.
			if (!namespaces.Contains(Namespace))
				namespaces.Add(Namespace);
			
			// Save entity name from the table name
			entities.Add(QualifiedEntity, Entity);
			
			// If namespace exists, create generated files in a subfolder
			string projectSubFolder = Namespace != "" ? Namespace + @"\" : "";
			
			// Text for appending namespace to project namespace
			string projectNamespace = Namespace != "" ? "." + Namespace : "";

			string baseClass = "ModelWithAttributes";
			if (Entity == "Attribute" ||
				Entity == "AttributeQualifier" ||
				Entity == "AttributeValue" ||
				Entity == "FieldType")
				baseClass = "Model";
			
			// Read any existing partial class to find property attributes that have been defined in a comment class
			string partialFilePath = @"..\..\" + projectSubFolder + Entity + ".Partial.cs";
			Dictionary<int, string> partialClassLines = TemplateHelper.readTextFile(Host, partialFilePath);
			
			// Redirect the template output to a stringbuilder object rather than being automatically
			// written to a cs file.  This is so output files can be created manually
		    GenerationEnvironment = new System.Text.StringBuilder();
			
			Column created = oneTable.Columns["CreatedDateTime"];
			Column modified = oneTable.Columns["ModifiedDateTime"];
			Column createdById = oneTable.Columns["CreatedByPersonId"];
			Column modifiedById = oneTable.Columns["ModifiedByPersonId"];
			
			string iAuditable = "";
			if (created != null && created.Nullable && created.DataType.ToString() == "datetime" &&
				modified != null && modified.Nullable && modified.DataType.ToString() == "datetime" &&
				createdById != null && createdById.Nullable && createdById.DataType.ToString() == "int" &&
				modifiedById != null && modifiedById.Nullable && modifiedById.DataType.ToString() == "int")
				iAuditable = ", IAuditable";

			Column orderCol = oneTable.Columns["Order"];
			string iOrdered = "";
			if (orderCol != null && !orderCol.Nullable && orderCol.DataType.ToString() == "int")
				iOrdered = ", IOrdered";
			
// Generate POCO model
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.Entity.ModelConfiguration;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock<#= projectNamespace #>
{
    /// <summary>
    /// <#= TemplateHelper.SplitCase( Entity ) #> POCO Entity.
    /// </summary>
    [Table( "<#= oneTable.Name #>" )]
    public partial class <#= Entity #> : <#= baseClass #><<#= Entity #>><#= iAuditable #><#= iOrdered #>
    {
<#
			// Keep track of any foreign key relationship that a table has to itself, and any 
			// many-to-many relationship. These need to be defined explicitely in the model's 
			// Configuration class
			List<string> specialReferences  = new List<string>();
			
			/// Keep track of columns for the dto object
			List<string> DTOProperties = new List<string>();
			List<string> DTOConstructs = new List<string>();

			// Write the properties for each column in the table
			foreach(Column column in oneTable.Columns)
			{
				if (column.Name != "Id" && column.Name != "Guid")
				{
					// Get the column description
					string colDesc = "";
					ExtendedProperty descProperty = column.ExtendedProperties["MS_Description"];
					if (descProperty != null)
						colDesc = descProperty.Value.ToString();

					string xmlComments = "/// <summary>\n" +
									"\t\t/// Gets or sets the " + TemplateHelper.SplitCase(column.Name) +".\n" +
									"\t\t/// </summary>\n" +
									"\t\t/// <value>\n" +
									"\t\t/// " + TemplateHelper.ColumnDescription(column).Replace("\n","\n\t\t/// ") + ".\n" +
									"\t\t/// </value>";
#>
		<#= xmlComments #>
<#
					// Add the [Key] attribute for all primary key columns
					if (column.InPrimaryKey)
					{
						primaryKeys.Add(column);
					
						if (column.Name != "Id")
						{
#>
		[Key]
<#
						}
					}
				
					// If the column is a varchar with a specific length, add the [MaxLength]
					// validation attribute
					if ((column.DataType.ToString() == "varchar" || column.DataType.ToString() == "nvarchar") && column.DataType.MaximumLength > 0)
					{
#>
		[MaxLength( <#= column.DataType.MaximumLength.ToString() #> )]
<#
					}

					string property = "";
					
					bool isEnum = false;

					if (column.DataType.ToString() == "int")
					{
						// Check for enumeration in the description property in the format enum[NameOfEnum]
						var r = new Regex( @"(?<=Enum\[).*(?=])", RegexOptions.IgnoreCase);
						var match = r.Match(colDesc);
						
						if (match.Success)
						{
							string enumName = match.Value;
									
							property = 
							"internal " + TemplateHelper.ConvertDataType(column) + " " + column.Name + "Internal { get; set; }\n\n" +
							"\t\t" + xmlComments +
							"\n\t\t[NotMapped]\n" +
							"\t\tpublic " + enumName + " " + column.Name + "\n" +
							"\t\t{\n" +
							"\t\t\tget { return (" + enumName + ")this." + column.Name + "Internal; }\n" +
							"\t\t\tset { this." + column.Name + "Internal = (int)value; }\n" + 
							"\t\t}";

							isEnum = true;
							DTOProperties.Add(xmlComments + "\n\t\tpublic " + TemplateHelper.ConvertDataType(column) + " " + column.Name + " { get; set; }\n");

							specialReferences.Add(string.Format(
								"this.Property( p => p.{0}Internal ).HasColumnName( \"{0}\" );", column.Name));
						}	
						
					}
						
					if (property == "")
						property = "public " + TemplateHelper.ConvertDataType(column) + " " + column.Name + " { get; set; }";
						
					List<string> attributes = TemplateHelper.getAttributes(partialClassLines, property);
					foreach(string attribute in attributes)
					{
#>
		<#= attribute #>
<#
					}

					if (!isEnum)
					{
						DTOProperties.Add(xmlComments + "\n\t\tpublic " + TemplateHelper.ConvertDataType(column) + " " + column.Name + " { get; set; }\n");
						DTOConstructs.Add(string.Format("dto.{0} = this.{0};", column.Name));
					}
					else
					{
						DTOConstructs.Add(string.Format("dto.{0} = this.{0}Internal;", column.Name));
					}
#>
		[DataMember]
		<#= property #>
		
<#
				}
			}
#>
		/// <summary>
        /// Gets a Data Transfer Object (lightweight) version of this object.
        /// </summary>
        /// <value>
        /// A <see cref="Rock<#= projectNamespace #>.DTO.<#= Entity #>"/> object.
        /// </value>
		public Rock<#= projectNamespace #>.DTO.<#= Entity #> DataTransferObject
		{
			get 
			{ 
				Rock<#= projectNamespace #>.DTO.<#= Entity #> dto = new Rock<#= projectNamespace #>.DTO.<#= Entity #>();
				dto.Id = this.Id;
				dto.Guid = this.Guid;
<#
			foreach(string DTOConstruct in DTOConstructs)
			{
#>
				<#= DTOConstruct #>
<#
			}
#>
				return dto; 
			}
		}

        /// <summary>
        /// Gets the auth entity.
        /// </summary>
		[NotMapped]
		public override string AuthEntity { get { return "<#= Namespace #>.<#= Entity #>"; } }
<#
			// Process any related child table relationships 
			System.Data.DataTable dt = oneTable.EnumForeignKeys();
			foreach(System.Data.DataRow row in dt.Rows)
			{
				string relatedTableName = row["Table_Name"].ToString();
				string relatedEntity = TemplateHelper.Entity(relatedTableName);		
				string relatedNamespace = TemplateHelper.Namespace(relatedTableName);
				string fkName = row["Name"].ToString();
				string propertyName = relatedEntity;
				
				if (!fkName.ToLower().Contains("nomodel"))
				{
					Table relatedTable = oneDatabase.Tables[relatedTableName];
					if (TemplateHelper.Many2Many(relatedTable))
					{
						ForeignKey parentForeignKey = relatedTable.ForeignKeys[fkName];
						string parentKeyColumn = parentForeignKey.Columns[0].Name;
						string parentPropertyName = "";
						if (parentKeyColumn.EndsWith( "Guid" ))
							parentPropertyName = parentKeyColumn.Substring( 0, parentKeyColumn.Length - 4 );
						else
							parentPropertyName = parentKeyColumn.Substring( 0, parentKeyColumn.Length - 2 );
						
						foreach(ForeignKey childForeignKey in relatedTable.ForeignKeys)
							if (childForeignKey.Name != fkName)
							{
								Table childTable = oneDatabase.Tables[childForeignKey.ReferencedTable];							
								relatedEntity = TemplateHelper.Entity(childTable.Name);
								relatedNamespace = TemplateHelper.Namespace(childTable.Name);
								string childKeyColumn = childForeignKey.Columns[0].Name;
								if (childKeyColumn.EndsWith( "Guid" ))
									propertyName = childKeyColumn.Substring( 0, childKeyColumn.Length - 4 );
								else
									propertyName = childKeyColumn.Substring( 0, childKeyColumn.Length - 2 );

								if (!processedM2MTables.Contains(relatedTable.Name))
								{
									specialReferences.Add(string.Format(
										"this.HasMany( p => p.{0} ).WithMany( c => c.{1} ).Map( m => {{ m.MapLeftKey(\"{2}\"); m.MapRightKey(\"{3}\"); m.ToTable(\"{4}\" ); }} );",
										pls.Pluralize(propertyName),
										pls.Pluralize(parentPropertyName), 
										childKeyColumn, parentKeyColumn, 
										relatedTable.Name));
										
									processedM2MTables.Add(relatedTable.Name);
								}
							}
					}

					if (relatedNamespace == Namespace)
						relatedNamespace = "";
					else
						relatedNamespace += ".";
				
#>
        
		/// <summary>
        /// Gets or sets the <#= TemplateHelper.SplitCase(pls.Pluralize(propertyName)) #>.
        /// </summary>
        /// <value>
        /// Collection of <#= TemplateHelper.SplitCase(pls.Pluralize(propertyName)) #>.
        /// </value>
		public virtual ICollection<<#= relatedNamespace #><#= relatedEntity #>> <#= pls.Pluralize(propertyName) #> { get; set; }
<#	
				}
			}
			
			// Process foreign key relationships (Parent tables)
			foreach(ForeignKey foreignKey in oneTable.ForeignKeys)
			{
				string relatedEntity = TemplateHelper.Entity(foreignKey.ReferencedTable);
				
				string relatedNamespace = TemplateHelper.Namespace(foreignKey.ReferencedTable);
				if (relatedNamespace == Namespace)
					relatedNamespace = "";
				else
					relatedNamespace += ".";
				
				string propertyName = relatedEntity;
				
				if ( foreignKey.Columns.Count == 1 &&
					(foreignKey.Columns[0].Name.EndsWith( "Guid" ) || (foreignKey.Columns[0].Name.EndsWith( "Id" ))))
				{
					string colName = foreignKey.Columns[0].Name;

					// Strip the trailing 'Id' from the column name to use as the property name
					if (colName.EndsWith( "Guid" ))
						propertyName = colName.Substring( 0, colName.Length - 4 );
					else
						propertyName = colName.Substring( 0, colName.Length - 2 );
					
					string relationshipType = oneTable.Columns[colName].Nullable ? "Optional" : "Required";
					string deleteCascade = ((bool)(foreignKey.DeleteAction == ForeignKeyAction.Cascade)).ToString().ToLower();
					
					// Create the configuration text to be added in the model's configuration class
					if (foreignKey.Name.ToLower().Contains("nomodel"))
						specialReferences.Add(string.Format(
							"this.Has{0}( p => p.{1} ).WithMany().HasForeignKey( p => p.{2} ).WillCascadeOnDelete({3});",
							relationshipType, propertyName, colName, deleteCascade ));
					else
						specialReferences.Add(string.Format(
							"this.Has{0}( p => p.{1} ).WithMany( p => p.{2} ).HasForeignKey( p => p.{3} ).WillCascadeOnDelete({4});",
							relationshipType, propertyName, pls.Pluralize( Entity), colName, deleteCascade ) );
				}
#>
        
		/// <summary>
        /// Gets or sets the <#= TemplateHelper.SplitCase(propertyName) #>.
        /// </summary>
        /// <value>
        /// A <see cref="<#= relatedNamespace #><#= relatedEntity #>"/> object.
        /// </value>
		public virtual <#= relatedNamespace #><#= relatedEntity #> <#= propertyName #> { get; set; }
<#
			}

			// Create the Get[Entity] method based on the table's (entity's) 
			// primary keys
			if (primaryKeys.Count > 0)
			{
				StringBuilder parameters = new StringBuilder();
				StringBuilder vars = new StringBuilder();
				
				foreach(Column column in primaryKeys)
				{
					parameters.AppendFormat("{0}{1} {2}{3}",
						parameters.Length > 0 ? ", " : "",
						TemplateHelper.ConvertDataType(column),
						column.Name.Substring(0,1).ToLower(),
						column.Name.Substring(1));
					
					vars.AppendFormat("{0}{1}{2}",
						vars.Length > 0 ? ", " : "",
						column.Name.Substring(0,1).ToLower(),
						column.Name.Substring(1));
				}
#>

        public static <#= Entity #> Read(<#= parameters #>)
        {
            return new Rock<#= projectNamespace #>.<#= Entity #>Service().Get( <#= vars #> );
        }
<#
			}
#>

    }
    /// <summary>
    /// <#= TemplateHelper.SplitCase( Entity ) #> Configuration class.
    /// </summary>
    public partial class <#= Entity #>Configuration : EntityTypeConfiguration<<#= Entity #>>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= Entity #>Configuration"/> class.
        /// </summary>
        public <#= Entity #>Configuration()
        {
<#
			// If table has a composite primary key, a "HasKey" entry needs to be added to 
			// the models configuration class
			if (primaryKeys.Count > 1)
			{
				StringBuilder hasKeys = new StringBuilder();
				
				foreach(Column column in primaryKeys)
					hasKeys.AppendFormat("{0}k.{1}",
						hasKeys.Length > 0 ? ", " : "",
						column.Name);
#>
			this.HasKey( k => new { <#= hasKeys #> } );
<#
			}
			
			// If table has a one-to-many relationship with itself (heirarchal data) the relationship 
			// needs to be defined explicitly
			foreach(string specialReference in specialReferences)
			{
#>
			<#= specialReference #>
<#
			}
#>
		}
    }
}
<#
			// Write the POCO model
		    relativeOutputFilePath = @"..\..\" + projectSubFolder + Entity + ".cs";
		    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
			
		    GenerationEnvironment = new System.Text.StringBuilder();
			
// Generate DTO Object
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;

namespace Rock<#= projectNamespace #>.DTO
{
    /// <summary>
    /// <#= TemplateHelper.SplitCase( Entity ) #> Data Transfer Object.
    /// </summary>
	/// <remarks>
	/// Data Transfer Objects are a lightweight version of the Entity object that are used
	/// in situations like serializing the object in the REST api
	/// </remarks>
    public partial class <#= Entity #>
    {
        /// <summary>
        /// The Id
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the GUID.
        /// </summary>
        /// <value>
        /// The GUID.
        /// </value>
        public Guid Guid { get; set; }

<#
			foreach(string DTOProperty in DTOProperties)
			{
#>
		<#= DTOProperty #>
<#
			}
#>
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= Entity #>DTO"/> class.
        /// </summary>
		public <#= Entity #>()
		{
		}
	}
}
<#
			// Write the DTO Object
		    relativeOutputFilePath = @"..\..\..\Rock.DataTransferObjects\" + projectSubFolder + Entity + ".cs";
		    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
			
		    GenerationEnvironment = new System.Text.StringBuilder();
			
// Generate Repository Interface
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using Rock.Data;

namespace Rock<#= projectNamespace #>
{
	/// <summary>
	/// Represents a <#= TemplateHelper.SplitCase( Entity ) #> POCO Repository class
	/// </summary>
    public interface I<#= Entity #>Repository : IRepository<<#= QualifiedEntity #>>
    {
    }
}
<#
			// Write the Repository Interface
		    relativeOutputFilePath = @"..\..\" + projectSubFolder + "I" + Entity + "Repository.cs";
		    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
			
		    GenerationEnvironment = new System.Text.StringBuilder();
			
// Generate Repository Entity Framework Class
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using Rock.Data;

namespace Rock<#= projectNamespace #>
{
	/// <summary>
	/// <#= TemplateHelper.SplitCase( Entity ) #> POCO Repository class
	/// </summary>
    public partial class Entity<#= Entity #>Repository : EntityRepository<<#= QualifiedEntity #>>, I<#= Entity #>Repository
    {
    }
}
<#
			// Write the Repository Entity Framework Class
		    relativeOutputFilePath = @"..\..\" + projectSubFolder + "Entity" + Entity + "Repository.cs";
		    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
			
		    GenerationEnvironment = new System.Text.StringBuilder();
			
// Generate the Service Layer Class
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;

using Rock.Data;

namespace Rock<#= projectNamespace #>
{
	/// <summary>
	/// <#= TemplateHelper.SplitCase( Entity ) #> POCO Service Layer class
	/// </summary>
    public partial class <#= Entity #>Service : Service<<#= QualifiedEntity #>>
    {
<#
			foreach(Index index in oneTable.Indexes)
			{
				if (index.IndexKeyType != IndexKeyType.DriPrimaryKey && 
					index.IndexedColumns[0].Name != "CreatedByPersonId" &&
					index.IndexedColumns[0].Name != "ModifiedByPersonId")
				{
					string returnName = index.IsUnique ? Entity : pls.Pluralize( Entity );
					string returnType = index.IsUnique ? QualifiedEntity : string.Format("IEnumerable<{0}>", QualifiedEntity);
					string returnTypeDesc = index.IsUnique ? Entity + " object"  : "An enumerable list of " + Entity + " objects";
					string queryType = index.IsUnique ? "FirstOrDefault" : "Find";
					StringBuilder paramClause = new StringBuilder();
					StringBuilder getClause = new StringBuilder();
					StringBuilder parameters = new StringBuilder();
					StringBuilder linqClause = new StringBuilder();
					
					string orderByClause = string.Empty;
					if (iOrdered != "" && !index.IsUnique)
						orderByClause = ".OrderBy( t => t.Order )";
					
					foreach(IndexedColumn indexColumn in index.IndexedColumns)
					{
						Column column = oneTable.Columns[indexColumn.Name];

						getClause.AppendFormat("{0}{1}",
							getClause.Length > 0 ? "And" : "",
							column.Name);
						
						paramClause.AppendFormat("\n\t\t/// <param name=\"{0}{1}\">{2}.</param>",
							column.Name.Substring(0,1).ToLower(),
							column.Name.Substring(1),
							TemplateHelper.ColumnDescription(column).Replace("\n","\n\t\t/// ") );
							
						parameters.AppendFormat("{0}{1} {2}{3}",
							parameters.Length > 0 ? ", " : "",
							TemplateHelper.ConvertDataType(column),
							column.Name.Substring(0,1).ToLower(),
							column.Name.Substring(1));
						
						linqClause.AppendFormat("{0}{1}",
							linqClause.Length > 0 ? " && " : "",
							TemplateHelper.WhereClause(column));
					}
#>
		/// <summary>
		/// Gets <#= TemplateHelper.SplitCase( returnName ) #> by <#= TemplateHelper.SplitCase(getClause.ToString()) #>
		/// </summary><#= paramClause #>
		/// <returns><#= returnTypeDesc #>.</returns>
	    public <#= returnType #> GetBy<#= getClause #>( <#= parameters #> )
        {
            return Repository.<#= queryType #>( t => <#= linqClause #> )<#= orderByClause #>;
        }
		
<#
				}
			}
#>
    }
}
<#
			// Write the Service Layer Class
		    relativeOutputFilePath = @"..\..\" + projectSubFolder + Entity + "Service.cs";
		    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);

			GenerationEnvironment = new System.Text.StringBuilder();

// Generate the REST Interface Class
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ServiceModel;

namespace Rock.REST<#= projectNamespace #>
{
	/// <summary>
	/// Represents a REST WCF service for <#= pls.Pluralize( Entity ) #>
	/// </summary>
	[ServiceContract]
    public partial interface I<#= Entity #>Service
    {
		/// <summary>
		/// Gets a <#= Entity #> object
		/// </summary>
		[OperationContract]
        Rock.<#= Namespace #>.DTO.<#= Entity #> Get( string id );

		/// <summary>
		/// Gets a <#= Entity #> object
		/// </summary>
		[OperationContract]
        Rock.<#= Namespace #>.DTO.<#= Entity #> ApiGet( string id, string apiKey );

		/// <summary>
		/// Updates a <#= Entity #> object
		/// </summary>
        [OperationContract]
        void Update<#= Entity #>( string id, Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> );

		/// <summary>
		/// Updates a <#= Entity #> object
		/// </summary>
        [OperationContract]
        void ApiUpdate<#= Entity #>( string id, string apiKey, Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> );

		/// <summary>
		/// Creates a new <#= Entity #> object
		/// </summary>
        [OperationContract]
        void Create<#= Entity #>( Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> );

		/// <summary>
		/// Creates a new <#= Entity #> object
		/// </summary>
        [OperationContract]
        void ApiCreate<#= Entity #>( string apiKey, Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> );

		/// <summary>
		/// Deletes a <#= Entity #> object
		/// </summary>
        [OperationContract]
        void Delete<#= Entity #>( string id );

		/// <summary>
		/// Deletes a <#= Entity #> object
		/// </summary>
        [OperationContract]
        void ApiDelete<#= Entity #>( string id, string apiKey );
    }
}
<#
			// Write the REST Interface Classes
		    relativeOutputFilePath = @"..\..\REST\" + projectSubFolder + "I" + Entity + "Service.cs";
		    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);

			GenerationEnvironment = new System.Text.StringBuilder();

// Generate the REST Class
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.ComponentModel.Composition;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace Rock.REST<#= projectNamespace #>
{
	/// <summary>
	/// REST WCF service for <#= pls.Pluralize( Entity ) #>
	/// </summary>
    [Export(typeof(IService))]
    [ExportMetadata("RouteName", "<#= QualifiedEntity.Replace("Rock.", "").Replace(".","/") #>")]
	[AspNetCompatibilityRequirements( RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed )]
    public partial class <#= Entity #>Service : I<#= Entity #>Service, IService
    {
		/// <summary>
		/// Gets a <#= Entity #> object
		/// </summary>
		[WebGet( UriTemplate = "{id}" )]
        public Rock.<#= Namespace #>.DTO.<#= Entity #> Get( string id )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
				<#= QualifiedEntity #> <#= Entity #> = <#= Entity #>Service.Get( int.Parse( id ) );
				if ( <#= Entity #>.Authorized( "View", currentUser ) )
					return <#= Entity #>.DataTransferObject;
				else
					throw new WebFaultException<string>( "Not Authorized to View this <#= Entity #>", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Gets a <#= Entity #> object
		/// </summary>
		[WebGet( UriTemplate = "{id}/{apiKey}" )]
        public Rock.<#= Namespace #>.DTO.<#= Entity #> ApiGet( string id, string apiKey )
        {
            using (Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope())
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
					<#= QualifiedEntity #> <#= Entity #> = <#= Entity #>Service.Get( int.Parse( id ) );
					if ( <#= Entity #>.Authorized( "View", user ) )
						return <#= Entity #>.DataTransferObject;
					else
						throw new WebFaultException<string>( "Not Authorized to View this <#= Entity #>", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }
		
		/// <summary>
		/// Updates a <#= Entity #> object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}" )]
        public void Update<#= Entity #>( string id, Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
				<#= QualifiedEntity #> existing<#= Entity #> = <#= Entity #>Service.Get( int.Parse( id ) );
				if ( existing<#= Entity #>.Authorized( "Edit", currentUser ) )
				{
					uow.objectContext.Entry(existing<#= Entity #>).CurrentValues.SetValues(<#= Entity #>);
					
					if (existing<#= Entity #>.IsValid)
						<#= Entity #>Service.Save( existing<#= Entity #>, currentUser.PersonId );
					else
						throw new WebFaultException<string>( existing<#= Entity #>.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this <#= Entity #>", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Updates a <#= Entity #> object
		/// </summary>
		[WebInvoke( Method = "PUT", UriTemplate = "{id}/{apiKey}" )]
        public void ApiUpdate<#= Entity #>( string id, string apiKey, Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
					<#= QualifiedEntity #> existing<#= Entity #> = <#= Entity #>Service.Get( int.Parse( id ) );
					if ( existing<#= Entity #>.Authorized( "Edit", user ) )
					{
						uow.objectContext.Entry(existing<#= Entity #>).CurrentValues.SetValues(<#= Entity #>);
					
						if (existing<#= Entity #>.IsValid)
							<#= Entity #>Service.Save( existing<#= Entity #>, user.PersonId );
						else
							throw new WebFaultException<string>( existing<#= Entity #>.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this <#= Entity #>", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Creates a new <#= Entity #> object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "" )]
        public void Create<#= Entity #>( Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
				<#= QualifiedEntity #> existing<#= Entity #> = new <#= QualifiedEntity #>();
				<#= Entity #>Service.Add( existing<#= Entity #>, currentUser.PersonId );
				uow.objectContext.Entry(existing<#= Entity #>).CurrentValues.SetValues(<#= Entity #>);

				if (existing<#= Entity #>.IsValid)
					<#= Entity #>Service.Save( existing<#= Entity #>, currentUser.PersonId );
				else
					throw new WebFaultException<string>( existing<#= Entity #>.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
            }
        }

		/// <summary>
		/// Creates a new <#= Entity #> object
		/// </summary>
		[WebInvoke( Method = "POST", UriTemplate = "{apiKey}" )]
        public void ApiCreate<#= Entity #>( string apiKey, Rock.<#= Namespace #>.DTO.<#= Entity #> <#= Entity #> )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
					<#= QualifiedEntity #> existing<#= Entity #> = new <#= QualifiedEntity #>();
					<#= Entity #>Service.Add( existing<#= Entity #>, user.PersonId );
					uow.objectContext.Entry(existing<#= Entity #>).CurrentValues.SetValues(<#= Entity #>);

					if (existing<#= Entity #>.IsValid)
						<#= Entity #>Service.Save( existing<#= Entity #>, user.PersonId );
					else
						throw new WebFaultException<string>( existing<#= Entity #>.ValidationResults.AsDelimited(", "), System.Net.HttpStatusCode.BadRequest );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a <#= Entity #> object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}" )]
        public void Delete<#= Entity #>( string id )
        {
            var currentUser = Rock.CMS.UserService.GetCurrentUser();
            if ( currentUser == null )
                throw new WebFaultException<string>("Must be logged in", System.Net.HttpStatusCode.Forbidden );

            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				uow.objectContext.Configuration.ProxyCreationEnabled = false;
				Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
				<#= QualifiedEntity #> <#= Entity #> = <#= Entity #>Service.Get( int.Parse( id ) );
				if ( <#= Entity #>.Authorized( "Edit", currentUser ) )
				{
					<#= Entity #>Service.Delete( <#= Entity #>, currentUser.PersonId );
					<#= Entity #>Service.Save( <#= Entity #>, currentUser.PersonId );
				}
				else
					throw new WebFaultException<string>( "Not Authorized to Edit this <#= Entity #>", System.Net.HttpStatusCode.Forbidden );
            }
        }

		/// <summary>
		/// Deletes a <#= Entity #> object
		/// </summary>
		[WebInvoke( Method = "DELETE", UriTemplate = "{id}/{apiKey}" )]
        public void ApiDelete<#= Entity #>( string id, string apiKey )
        {
            using ( Rock.Data.UnitOfWorkScope uow = new Rock.Data.UnitOfWorkScope() )
            {
				Rock.CMS.UserService userService = new Rock.CMS.UserService();
                Rock.CMS.User user = userService.Queryable().Where( u => u.ApiKey == apiKey ).FirstOrDefault();

				if (user != null)
				{
					uow.objectContext.Configuration.ProxyCreationEnabled = false;
					Rock<#= projectNamespace #>.<#= Entity #>Service <#= Entity #>Service = new Rock<#= projectNamespace #>.<#= Entity #>Service();
					<#= QualifiedEntity #> <#= Entity #> = <#= Entity #>Service.Get( int.Parse( id ) );
					if ( <#= Entity #>.Authorized( "Edit", user ) )
					{
						<#= Entity #>Service.Delete( <#= Entity #>, user.PersonId );
						<#= Entity #>Service.Save( <#= Entity #>, user.PersonId );
					}
					else
						throw new WebFaultException<string>( "Not Authorized to Edit this <#= Entity #>", System.Net.HttpStatusCode.Forbidden );
				}
				else
					throw new WebFaultException<string>( "Invalid API Key", System.Net.HttpStatusCode.Forbidden );
            }
        }

    }
}
<#
			// Write the REST Class
		    relativeOutputFilePath = @"..\..\REST\" + projectSubFolder + Entity + "Service.cs";
		    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);

			GenerationEnvironment = new System.Text.StringBuilder();
		}
	}
// Generate Repository Entity Framework Class
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;

namespace Rock.Data
{
	/// <summary>
	/// Entity Framework Context
	/// </summary>
    public partial class RockContext : DbContext
    {
<#
		foreach ( KeyValuePair<string, string> entity in entities )
		{
#>
        /// <summary>
        /// Gets or sets the <#= TemplateHelper.SplitCase(pls.Pluralize(entity.Value)) #>.
        /// </summary>
        /// <value>
        /// the <#= TemplateHelper.SplitCase(pls.Pluralize(entity.Value)) #>.
        /// </value>
        public DbSet<<#= entity.Key #>> <#= pls.Pluralize(entity.Value) #> { get; set; }

<#
		}
#>

        /// <summary>
        /// This method is called when the context has been initialized, but
        /// before the model has been locked down and used to initialize the context. 
        /// </summary>
        /// <param name="modelBuilder">The builder that defines the model for the context being created.</param>
        protected override void OnModelCreating( DbModelBuilder modelBuilder )
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();

<#
		foreach ( KeyValuePair<string, string> entity in entities )
		{
#>
            modelBuilder.Configurations.Add( new <#= entity.Key #>Configuration() );
<#
		}
#>
		}
    }
}

<#
	// Write the Entity Framework Context Class
    relativeOutputFilePath = @"..\..\Data\RockContext.cs";
    TemplateHelper.WriteTemplateOutputToFile(relativeOutputFilePath, Host, GenerationEnvironment);
	
	GenerationEnvironment = new System.Text.StringBuilder();
#>


<#+
// Class for template generation helper methods
public class TemplateHelper
{
	// Helper method to write current template contents to a file
    public static void WriteTemplateOutputToFile(
        string relativeOutputFilePath,
        Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host,
        System.Text.StringBuilder GenerationEnvironment)
    {
        string outputPath = System.IO.Path.GetDirectoryName(Host.TemplateFile);
		string outputFilePath = outputPath + relativeOutputFilePath;
		System.IO.FileInfo file = new System.IO.FileInfo(outputFilePath);
		if (!file.Directory.Exists)
			file.Directory.Create();
        System.IO.File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());
    }
	
	// Convert SQL datatypes to C# datatype
	public static string ConvertDataType(Column column)
	{
		string nullModifier = column.Nullable ? "?" : "";

		switch (column.DataType.ToString())
		{
			case "int" : return "int" + nullModifier;
			case "bit" : return "bool" + nullModifier;
			case "varbinary" : return "byte[]";
			case "varchar": return "string";
			case "nvarchar": return "string";
			case "uniqueidentifier": return "Guid" + nullModifier;	
			case "datetime": return "DateTime" + nullModifier;
			case "time": return "DateTime" + nullModifier;
			case "char" : return "string";
			case "text" : return "string";
			case "ntext" : return "string";
			case "float" : return "double";
			default: return column.DataType.ToString();
		}
	}
	
	// Handle Null comparison 
	public static string WhereClause(Column column)
	{
		string columnName = column.Name.Substring(0,1).ToLower() + column.Name.Substring(1);
		
		StringBuilder sb = new StringBuilder();
		sb.AppendFormat("t.{0} == {1}", column.Name, columnName);
		if (column.Nullable)
		{
			sb.Insert(0, "( ");
			sb.AppendFormat(" || ( {1} == null && t.{0} == null ) )", column.Name, columnName);
		}
		return sb.ToString();
	}

	// Get the column description
	public static string ColumnDescription(Column column)
	{
		ExtendedProperty descProperty = column.ExtendedProperties["MS_Description"];
		if (descProperty != null)
			return descProperty.Value.ToString();
		else
			return SplitCase(column.Name);
	}

	// Get namespace from table name.  Namespace will be the text prior to the first
	// uppercase letter in the table name.
	public static string Namespace(string tableName)
	{
		for (int i = 0; i < tableName.Length; i++)
			if (Char.IsUpper(tableName[i]))
			{
				if (i > 0)
				{
					string ns = tableName.Substring(0, i);
					if (ns == "cms")
						return "CMS";
					if (ns == "crm")
						return "CRM";
					
					return ns.Substring(0,1).ToUpper() + ns.Substring(1);
				}
				else
					return "";					
			}
			
		return "";
	}
	
	// Get entity name from table name.  Entity will be the text starting with the 
	// first uppercase letter in the table name.
	public static string Entity(string tableName)
	{
		
		for (int i = 0; i < tableName.Length; i++)
			if (Char.IsUpper(tableName[i]))
				return tableName.Substring(i);
			
		return tableName;
	}
	
	public static bool Many2Many(Table table)
	{
		return (table.Columns.Count == 2 &&
			table.Columns[0].InPrimaryKey &&
			table.Columns[1].InPrimaryKey);
	}
	
	// Reads a text file and loads each line into a dictionary
    public static Dictionary<int, string> readTextFile(
		Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host,
		string relativeFilePath)
    {
        Dictionary<int, string> lines = new Dictionary<int, string>();

        string templatePath = System.IO.Path.GetDirectoryName(Host.TemplateFile);
		
        FileInfo fi = new FileInfo(templatePath + relativeFilePath);
        if (fi.Exists)
        {
            using (StreamReader sr = new StreamReader(fi.FullName))
            {
                int lineNum = 0;
                String line;
                while ((line = sr.ReadLine()) != null)
                    lines.Add(lineNum++, line.Trim());
            }
        }

        return lines;
    }

	// Finds a matching line and returns each previous line that starts with "[" (attributes)
    public static List<string> getAttributes(Dictionary<int, string> lines, string searchLine)
    {
        List<string> attributes = new List<string>();

        foreach (KeyValuePair<int, string> kvp in lines)
        {
            if (kvp.Value == searchLine)
            {
                int i = kvp.Key - 1;
                while (i >= 0 && lines[i].StartsWith("["))
                {
                    attributes.Add(lines[i]);
                    i--;
                }

                break;
            }
        }

        attributes.Reverse();

        return attributes;
    }

	public static string SplitCase(string str)
	{
        return Regex.Replace( Regex.Replace( str, @"(\P{Ll})(\P{Ll}\p{Ll})", "$1 $2" ), @"(\p{Ll})(\P{Ll})", "$1 $2" );
	}

}

#>
