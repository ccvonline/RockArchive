//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;

using Rock.Data;

namespace Rock.CRM
{
	/// <summary>
	/// Person POCO Service class
	/// </summary>
    public partial class PersonService : Service<Rock.CRM.Person>
    {
		/// <summary>
		/// Gets People by Email
		/// </summary>
		/// <param name="email">Email.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetByEmail( string email )
        {
            return Repository.Find( t => ( t.Email == email || ( email == null && t.Email == null ) ) );
        }
		
		/// <summary>
		/// Gets People by Marital Status Id
		/// </summary>
		/// <param name="maritalStatusId">Marital Status Id.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetByMaritalStatusId( int? maritalStatusId )
        {
            return Repository.Find( t => ( t.MaritalStatusId == maritalStatusId || ( maritalStatusId == null && t.MaritalStatusId == null ) ) );
        }
		
		/// <summary>
		/// Gets People by Person Status Id
		/// </summary>
		/// <param name="personStatusId">Person Status Id.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetByPersonStatusId( int? personStatusId )
        {
            return Repository.Find( t => ( t.PersonStatusId == personStatusId || ( personStatusId == null && t.PersonStatusId == null ) ) );
        }
		
		/// <summary>
		/// Gets People by Record Status Id
		/// </summary>
		/// <param name="recordStatusId">Record Status Id.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetByRecordStatusId( int? recordStatusId )
        {
            return Repository.Find( t => ( t.RecordStatusId == recordStatusId || ( recordStatusId == null && t.RecordStatusId == null ) ) );
        }
		
		/// <summary>
		/// Gets People by Record Status Reason Id
		/// </summary>
		/// <param name="recordStatusReasonId">Record Status Reason Id.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetByRecordStatusReasonId( int? recordStatusReasonId )
        {
            return Repository.Find( t => ( t.RecordStatusReasonId == recordStatusReasonId || ( recordStatusReasonId == null && t.RecordStatusReasonId == null ) ) );
        }
		
		/// <summary>
		/// Gets People by Record Type Id
		/// </summary>
		/// <param name="recordTypeId">Record Type Id.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetByRecordTypeId( int? recordTypeId )
        {
            return Repository.Find( t => ( t.RecordTypeId == recordTypeId || ( recordTypeId == null && t.RecordTypeId == null ) ) );
        }
		
		/// <summary>
		/// Gets People by Suffix Id
		/// </summary>
		/// <param name="suffixId">Suffix Id.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetBySuffixId( int? suffixId )
        {
            return Repository.Find( t => ( t.SuffixId == suffixId || ( suffixId == null && t.SuffixId == null ) ) );
        }
		
		/// <summary>
		/// Gets People by Title Id
		/// </summary>
		/// <param name="titleId">Title Id.</param>
		/// <returns>An enumerable list of Person objects.</returns>
	    public IEnumerable<Rock.CRM.Person> GetByTitleId( int? titleId )
        {
            return Repository.Find( t => ( t.TitleId == titleId || ( titleId == null && t.TitleId == null ) ) );
        }

        /// <summary>
        /// Gets a list of people with a matching full name
        /// </summary>
        /// <param name="fullName">The full name.</param>
        /// <returns></returns>
        public IQueryable<Person> GetByFullName( string fullName )
        {
            string firstName = string.Empty;
            string lastName = string.Empty;

            if ( fullName.Contains( ' ' ) )
            {
                firstName = fullName.Substring( 0, fullName.LastIndexOf( ' ' ) );
                lastName = fullName.Substring( fullName.LastIndexOf( ' ' ) + 1 );
            }
            else
                lastName = fullName;

            return Queryable().
                    Where( p => p.LastName.ToLower().StartsWith( lastName.ToLower() ) &&
                        ( p.NickName.ToLower().StartsWith( firstName.ToLower() ) ||
                        p.GivenName.StartsWith( firstName.ToLower() ) ) );
        }

        /// <summary>
        /// Gets the by encrypted ID.
        /// </summary>
        /// <param name="encryptedID">The encrypted ID.</param>
        /// <returns></returns>
        public Person GetByEncryptedID( string encryptedID )
        {
            string identifier = Rock.Security.Encryption.DecryptString( encryptedID );

            string[] idParts = identifier.Split( '|' );
            if ( idParts.Length == 2 )
            {
                Guid personGuid = new Guid( idParts[0] );
                int personId = Int32.Parse( idParts[1] );

                Person person = Queryable().
                    Where( p => p.Guid == personGuid && p.Id == personId ).FirstOrDefault();

                if ( person != null )
                    return person;

                // Check to see if the record was merged
                PersonTrailService personTrailService = new PersonTrailService();
                PersonTrail personTrail = personTrailService.Queryable().
                    Where( p => p.Guid == personGuid && p.Id == personId ).FirstOrDefault();

                if ( personTrail != null )
                    return Get( personTrail.Id, true );
            }

            return null;
        }

        /// <summary>
        /// Gets Person by Id
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="followTrail">if set to <c>true</c> follow the merge trail.</param>
        /// <returns>
        /// Person object.
        /// </returns>
        public Rock.CRM.Person Get( int id, bool followTrail )
        {
            if ( followTrail )
                id = new PersonTrailService().Current( id );

            return Get( id );
        }

        /// <summary>
        /// Gets Person by Guid
        /// </summary>
        /// <param name="publicKey">The public key.</param>
        /// <param name="followTrail">if set to <c>true</c> follow the merge trail</param>
        /// <returns>
        /// Person object.
        /// </returns>
        public Rock.CRM.Person GetByPublicKey( string publicKey, bool followTrail )
        {
            if ( followTrail )
                publicKey = new PersonTrailService().Current( publicKey );

            return GetByPublicKey( publicKey );
        }
    }
}
