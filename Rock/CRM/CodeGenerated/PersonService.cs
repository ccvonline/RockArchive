//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Crm
{
    /// <summary>
    /// Person Service class
    /// </summary>
    public partial class PersonService : Service<Person, PersonDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonService"/> class
        /// </summary>
        public PersonService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonService"/> class
        /// </summary>
        public PersonService(IRepository<Person> repository) : base(repository)
        {
        }

        /// <summary>
        /// Creates a new model
        /// </summary>
        public override Person CreateNew()
        {
            return new Person();
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public override IQueryable<PersonDto> QueryableDto( )
        {
            return QueryableDto( this.Queryable() );
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public IQueryable<PersonDto> QueryableDto( IQueryable<Person> items )
        {
            return items.Select( m => new PersonDto()
                {
                    IsSystem = m.IsSystem,
                    RecordTypeId = m.RecordTypeId,
                    RecordStatusId = m.RecordStatusId,
                    RecordStatusReasonId = m.RecordStatusReasonId,
                    PersonStatusId = m.PersonStatusId,
                    TitleId = m.TitleId,
                    GivenName = m.GivenName,
                    NickName = m.NickName,
                    LastName = m.LastName,
                    SuffixId = m.SuffixId,
                    PhotoId = m.PhotoId,
                    BirthDay = m.BirthDay,
                    BirthMonth = m.BirthMonth,
                    BirthYear = m.BirthYear,
                    Gender = m.Gender,
                    MaritalStatusId = m.MaritalStatusId,
                    AnniversaryDate = m.AnniversaryDate,
                    GraduationDate = m.GraduationDate,
                    Email = m.Email,
                    IsEmailActive = m.IsEmailActive,
                    EmailNote = m.EmailNote,
                    DoNotEmail = m.DoNotEmail,
                    SystemNote = m.SystemNote,
                    ViewedCount = m.ViewedCount,
                    Id = m.Id,
                    Guid = m.Guid,
                });
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( Person item, out string errorMessage )
        {
            errorMessage = string.Empty;
            RockContext context = new RockContext();
            context.Database.Connection.Open();

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from cmsHtmlContent where ApprovedByPersonId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "cmsHtmlContent" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "cmsHtmlContent";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", Person.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from cmsMarketingCampaign where ContactPersonId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "cmsMarketingCampaign" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "cmsMarketingCampaign";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", Person.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from coreTag where OwnerId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "coreTag" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "coreTag";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", Person.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from crmPhoneNumber where PersonId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "crmPhoneNumber" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "crmPhoneNumber";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", Person.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from financialPersonAccountLookup where PersonId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "financialPersonAccountLookup" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "financialPersonAccountLookup";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", Person.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from financialPledge where PersonId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "financialPledge" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "financialPledge";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", Person.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            return true;
        }
    }
}
