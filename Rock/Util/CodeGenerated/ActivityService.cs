//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Util
{
    /// <summary>
    /// Activity Service class
    /// </summary>
    public partial class ActivityService : Service<Activity, ActivityDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityService"/> class
        /// </summary>
        public ActivityService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityService"/> class
        /// </summary>
        public ActivityService(IRepository<Activity> repository) : base(repository)
        {
        }

        /// <summary>
        /// Creates a new model
        /// </summary>
        public override Activity CreateNew()
        {
            return new Activity();
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public override IQueryable<ActivityDto> QueryableDto( )
        {
            return QueryableDto( this.Queryable() );
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public IQueryable<ActivityDto> QueryableDto( IQueryable<Activity> items )
        {
            return items.Select( m => new ActivityDto()
                {
                    WorkflowId = m.WorkflowId,
                    ActivityTypeId = m.ActivityTypeId,
                    ActivatedDateTime = m.ActivatedDateTime,
                    LastProcessedDateTime = m.LastProcessedDateTime,
                    CompletedDateTime = m.CompletedDateTime,
                    Actions = m.Actions,
                    Id = m.Id,
                    Guid = m.Guid,
                });
        }
    }
}
