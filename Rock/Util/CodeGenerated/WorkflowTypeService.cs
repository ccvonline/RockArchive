//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Util
{
    /// <summary>
    /// WorkflowType Service class
    /// </summary>
    public partial class WorkflowTypeService : Service<WorkflowType, WorkflowTypeDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTypeService"/> class
        /// </summary>
        public WorkflowTypeService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTypeService"/> class
        /// </summary>
        public WorkflowTypeService(IRepository<WorkflowType> repository) : base(repository)
        {
        }

        /// <summary>
        /// Creates a new model
        /// </summary>
        public override WorkflowType CreateNew()
        {
            return new WorkflowType();
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public override IQueryable<WorkflowTypeDto> QueryableDto( )
        {
            return QueryableDto( this.Queryable() );
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public IQueryable<WorkflowTypeDto> QueryableDto( IQueryable<WorkflowType> items )
        {
            return items.Select( m => new WorkflowTypeDto()
                {
                    IsSystem = m.IsSystem,
                    IsActive = m.IsActive,
                    Name = m.Name,
                    Description = m.Description,
                    CategoryId = m.CategoryId,
                    Order = m.Order,
                    FileId = m.FileId,
                    WorkTerm = m.WorkTerm,
                    ProcessingIntervalSeconds = m.ProcessingIntervalSeconds,
                    IsPersisted = m.IsPersisted,
                    LoggingLevel = m.LoggingLevel,
                    Id = m.Id,
                    Guid = m.Guid,
                });
        }
    }
}
