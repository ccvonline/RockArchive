//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;

using Rock.Data;

namespace Rock.Util
{
    /// <summary>
    /// Data Transfer Object for WorkflowType object
    /// </summary>
    public partial class WorkflowTypeDto : IDto
    {

#pragma warning disable 1591
        public bool IsSystem { get; set; }
        public bool? IsActive { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public int? CategoryId { get; set; }
        public int Order { get; set; }
        public int? FileId { get; set; }
        public string WorkTerm { get; set; }
        public int? EntryActivityTypeId { get; set; }
        public int? ProcessingIntervalSeconds { get; set; }
        public bool IsPersisted { get; set; }
        public int Id { get; set; }
        public Guid Guid { get; set; }
#pragma warning restore 1591

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public WorkflowTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="workflowType"></param>
        public WorkflowTypeDto ( WorkflowType workflowType )
        {
            CopyFromModel( workflowType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "IsActive", this.IsActive );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "CategoryId", this.CategoryId );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "FileId", this.FileId );
            dictionary.Add( "WorkTerm", this.WorkTerm );
            dictionary.Add( "EntryActivityTypeId", this.EntryActivityTypeId );
            dictionary.Add( "ProcessingIntervalSeconds", this.ProcessingIntervalSeconds );
            dictionary.Add( "IsPersisted", this.IsPersisted );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.IsActive = this.IsActive;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.CategoryId = this.CategoryId;
            expando.Order = this.Order;
            expando.FileId = this.FileId;
            expando.WorkTerm = this.WorkTerm;
            expando.EntryActivityTypeId = this.EntryActivityTypeId;
            expando.ProcessingIntervalSeconds = this.ProcessingIntervalSeconds;
            expando.IsPersisted = this.IsPersisted;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is WorkflowType )
            {
                var workflowType = (WorkflowType)model;
                this.IsSystem = workflowType.IsSystem;
                this.IsActive = workflowType.IsActive;
                this.Name = workflowType.Name;
                this.Description = workflowType.Description;
                this.CategoryId = workflowType.CategoryId;
                this.Order = workflowType.Order;
                this.FileId = workflowType.FileId;
                this.WorkTerm = workflowType.WorkTerm;
                this.EntryActivityTypeId = workflowType.EntryActivityTypeId;
                this.ProcessingIntervalSeconds = workflowType.ProcessingIntervalSeconds;
                this.IsPersisted = workflowType.IsPersisted;
                this.Id = workflowType.Id;
                this.Guid = workflowType.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is WorkflowType )
            {
                var workflowType = (WorkflowType)model;
                workflowType.IsSystem = this.IsSystem;
                workflowType.IsActive = this.IsActive;
                workflowType.Name = this.Name;
                workflowType.Description = this.Description;
                workflowType.CategoryId = this.CategoryId;
                workflowType.Order = this.Order;
                workflowType.FileId = this.FileId;
                workflowType.WorkTerm = this.WorkTerm;
                workflowType.EntryActivityTypeId = this.EntryActivityTypeId;
                workflowType.ProcessingIntervalSeconds = this.ProcessingIntervalSeconds;
                workflowType.IsPersisted = this.IsPersisted;
                workflowType.Id = this.Id;
                workflowType.Guid = this.Guid;
            }
        }
    }
}
