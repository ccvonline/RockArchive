//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;

using Rock.Data;

namespace Rock.Util
{
    /// <summary>
    /// Data Transfer Object for ActivityType object
    /// </summary>
    public partial class ActivityTypeDto : IDto
    {

#pragma warning disable 1591
        public bool? IsActive { get; set; }
        public int WorkflowTypeId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public bool IsActivatedWithWorkflow { get; set; }
        public int Order { get; set; }
        public int Id { get; set; }
        public Guid Guid { get; set; }
#pragma warning restore 1591

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public ActivityTypeDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="activityType"></param>
        public ActivityTypeDto ( ActivityType activityType )
        {
            CopyFromModel( activityType );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsActive", this.IsActive );
            dictionary.Add( "WorkflowTypeId", this.WorkflowTypeId );
            dictionary.Add( "Name", this.Name );
            dictionary.Add( "Description", this.Description );
            dictionary.Add( "IsActivatedWithWorkflow", this.IsActivatedWithWorkflow );
            dictionary.Add( "Order", this.Order );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsActive = this.IsActive;
            expando.WorkflowTypeId = this.WorkflowTypeId;
            expando.Name = this.Name;
            expando.Description = this.Description;
            expando.IsActivatedWithWorkflow = this.IsActivatedWithWorkflow;
            expando.Order = this.Order;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is ActivityType )
            {
                var activityType = (ActivityType)model;
                this.IsActive = activityType.IsActive;
                this.WorkflowTypeId = activityType.WorkflowTypeId;
                this.Name = activityType.Name;
                this.Description = activityType.Description;
                this.IsActivatedWithWorkflow = activityType.IsActivatedWithWorkflow;
                this.Order = activityType.Order;
                this.Id = activityType.Id;
                this.Guid = activityType.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is ActivityType )
            {
                var activityType = (ActivityType)model;
                activityType.IsActive = this.IsActive;
                activityType.WorkflowTypeId = this.WorkflowTypeId;
                activityType.Name = this.Name;
                activityType.Description = this.Description;
                activityType.IsActivatedWithWorkflow = this.IsActivatedWithWorkflow;
                activityType.Order = this.Order;
                activityType.Id = this.Id;
                activityType.Guid = this.Guid;
            }
        }
    }
}
