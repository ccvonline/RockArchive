//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the T4\Model.tt template.
//
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Linq;

using Rock.Data;

namespace Rock.Groups
{
	/// <summary>
	/// Group POCO Service class
	/// </summary>
    public partial class GroupService : Service<Rock.Groups.Group>
    {
		/// <summary>
		/// Gets Groups by Group Type Id
		/// </summary>
		/// <param name="groupTypeId">Group Type Id.</param>
		/// <returns>An enumerable list of Group objects.</returns>
	    public IEnumerable<Rock.Groups.Group> GetByGroupTypeId( int groupTypeId )
        {
            return Repository.Find( t => t.GroupTypeId == groupTypeId );
        }
		
		/// <summary>
		/// Gets Group by Guid
		/// </summary>
		/// <param name="guid">Guid.</param>
		/// <returns>Group object.</returns>
	    public Rock.Groups.Group GetByGuid( Guid guid )
        {
            return Repository.FirstOrDefault( t => t.Guid == guid );
        }
		
		/// <summary>
		/// Gets Groups by Is Security Role
		/// </summary>
		/// <param name="isSecurityRole">Is Security Role.</param>
		/// <returns>An enumerable list of Group objects.</returns>
	    public IEnumerable<Rock.Groups.Group> GetByIsSecurityRole( bool isSecurityRole )
        {
            return Repository.Find( t => t.IsSecurityRole == isSecurityRole );
        }
		
		/// <summary>
		/// Gets Groups by Parent Group Id
		/// </summary>
		/// <param name="parentGroupId">Parent Group Id.</param>
		/// <returns>An enumerable list of Group objects.</returns>
	    public IEnumerable<Rock.Groups.Group> GetByParentGroupId( int? parentGroupId )
        {
            return Repository.Find( t => ( t.ParentGroupId == parentGroupId || ( parentGroupId == null && t.ParentGroupId == null ) ) );
        }
		
		/// <summary>
		/// Gets Groups by Parent Group Id And Name
		/// </summary>
		/// <param name="parentGroupId">Parent Group Id.</param>
		/// <param name="name">Name.</param>
		/// <returns>An enumerable list of Group objects.</returns>
	    public IEnumerable<Rock.Groups.Group> GetByParentGroupIdAndName( int? parentGroupId, string name )
        {
            return Repository.Find( t => ( t.ParentGroupId == parentGroupId || ( parentGroupId == null && t.ParentGroupId == null ) ) && t.Name == name );
        }
		
    }
}
