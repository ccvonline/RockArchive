//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Runtime.Serialization;

using Rock.Data;

namespace Rock.Financial
{
    /// <summary>
    /// Data Transfer Object for TransactionDetail object
    /// </summary>
    [Serializable]
    [DataContract]
    public partial class TransactionDetailDto : IDto
    {
        /// <summary />
        [DataMember]
        public int? TransactionId { get; set; }

        /// <summary />
        [DataMember]
        public string Entity { get; set; }

        /// <summary />
        [DataMember]
        public string EntityId { get; set; }

        /// <summary />
        [DataMember]
        public decimal Amount { get; set; }

        /// <summary />
        [DataMember]
        public string Summary { get; set; }

        /// <summary />
        [DataMember]
        public int Id { get; set; }

        /// <summary />
        [DataMember]
        public Guid Guid { get; set; }

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public TransactionDetailDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="transactionDetail"></param>
        public TransactionDetailDto ( TransactionDetail transactionDetail )
        {
            CopyFromModel( transactionDetail );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "TransactionId", this.TransactionId );
            dictionary.Add( "Entity", this.Entity );
            dictionary.Add( "EntityId", this.EntityId );
            dictionary.Add( "Amount", this.Amount );
            dictionary.Add( "Summary", this.Summary );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.TransactionId = this.TransactionId;
            expando.Entity = this.Entity;
            expando.EntityId = this.EntityId;
            expando.Amount = this.Amount;
            expando.Summary = this.Summary;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is TransactionDetail )
            {
                var transactionDetail = (TransactionDetail)model;
                this.TransactionId = transactionDetail.TransactionId;
                this.Entity = transactionDetail.Entity;
                this.EntityId = transactionDetail.EntityId;
                this.Amount = transactionDetail.Amount;
                this.Summary = transactionDetail.Summary;
                this.Id = transactionDetail.Id;
                this.Guid = transactionDetail.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is TransactionDetail )
            {
                var transactionDetail = (TransactionDetail)model;
                transactionDetail.TransactionId = this.TransactionId;
                transactionDetail.Entity = this.Entity;
                transactionDetail.EntityId = this.EntityId;
                transactionDetail.Amount = this.Amount;
                transactionDetail.Summary = this.Summary;
                transactionDetail.Id = this.Id;
                transactionDetail.Guid = this.Guid;
            }
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class TransactionDetailDtoExtension
    {
        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static TransactionDetail ToModel( this TransactionDetailDto value )
        {
            TransactionDetail result = new TransactionDetail();
            value.CopyToModel( result );
            return result;
        }

        /// <summary>
        /// To the model.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<TransactionDetail> ToModel( this List<TransactionDetailDto> value )
        {
            List<TransactionDetail> result = new List<TransactionDetail>();
            value.ForEach( a => result.Add( a.ToModel() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static List<TransactionDetailDto> ToDto( this List<TransactionDetail> value )
        {
            List<TransactionDetailDto> result = new List<TransactionDetailDto>();
            value.ForEach( a => result.Add( a.ToDto() ) );
            return result;
        }

        /// <summary>
        /// To the dto.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns></returns>
        public static TransactionDetailDto ToDto( this TransactionDetail value )
        {
            return new TransactionDetailDto( value );
        }

    }
}