//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//

using System;
using System.Linq;

using Rock.Data;

namespace Rock.Financial
{
    /// <summary>
    /// PaymentGateway Service class
    /// </summary>
    public partial class PaymentGatewayService : Service<PaymentGateway, PaymentGatewayDto>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGatewayService"/> class
        /// </summary>
        public PaymentGatewayService()
            : base()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGatewayService"/> class
        /// </summary>
        public PaymentGatewayService(IRepository<PaymentGateway> repository) : base(repository)
        {
        }

        /// <summary>
        /// Creates a new model
        /// </summary>
        public override PaymentGateway CreateNew()
        {
            return new PaymentGateway();
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public override IQueryable<PaymentGatewayDto> QueryableDto( )
        {
            return QueryableDto( this.Queryable() );
        }

        /// <summary>
        /// Query DTO objects
        /// </summary>
        /// <returns>A queryable list of DTO objects</returns>
        public IQueryable<PaymentGatewayDto> QueryableDto( IQueryable<PaymentGateway> items )
        {
            return items.Select( m => new PaymentGatewayDto()
                {
                    Name = m.Name,
                    Description = m.Description,
                    ApiUrl = m.ApiUrl,
                    ApiKey = m.ApiKey,
                    ApiSecret = m.ApiSecret,
                    Id = m.Id,
                    Guid = m.Guid,
                });
        }

        /// <summary>
        /// Determines whether this instance can delete the specified item.
        /// </summary>
        /// <param name="item">The item.</param>
        /// <param name="errorMessage">The error message.</param>
        /// <returns>
        ///   <c>true</c> if this instance can delete the specified item; otherwise, <c>false</c>.
        /// </returns>
        public bool CanDelete( PaymentGateway item, out string errorMessage )
        {
            errorMessage = string.Empty;
            RockContext context = new RockContext();
            context.Database.Connection.Open();

            using ( var cmdCheckRef = context.Database.Connection.CreateCommand() )
            {
                cmdCheckRef.CommandText = string.Format( "select count(*) from FinancialTransaction where GatewayId = {0} ", item.Id );
                var result = cmdCheckRef.ExecuteScalar();
                int? refCount = result as int?;
                if ( refCount > 0 )
                {
                    Type entityType = RockContext.GetEntityFromTableName( "FinancialTransaction" );
                    string friendlyName = entityType != null ? entityType.GetFriendlyTypeName() : "FinancialTransaction";

                    errorMessage = string.Format("This {0} is assigned to a {1}.", PaymentGateway.FriendlyTypeName, friendlyName);
                    return false;
                }
            }

            return true;
        }
    }
}
